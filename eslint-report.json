
> genesis-chronicle@1.0.0 lint
> eslint . --ext .ts,.tsx --format json

[{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/api/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/api/tauri.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":4,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":4,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[72,75],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[72,75],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2642,2645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2642,2645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4841,4844],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4841,4844],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5995,5998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5995,5998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7872,7875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7872,7875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":296,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":296,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9400,9403],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9400,9403],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9436,9439],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9436,9439],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9907,9910],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9907,9910],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":373,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":373,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12179,12182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12179,12182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":384,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":384,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12606,12609],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12606,12609],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":472,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":472,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16131,16134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16131,16134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":558,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":558,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19196,19199],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19196,19199],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { API } from './types';\n\n// 動態導入 Tauri API\nlet tauriInvoke: any = null;\n\nconst waitForTauri = (): Promise<void> => {\n  return new Promise((resolve) => {\n    let attempts = 0;\n    const maxAttempts = 100; // 最多等待 10 秒\n    \n    const checkTauri = () => {\n      attempts++;\n      \n      // 檢查 Tauri API 是否可用\n      if (typeof window !== 'undefined') {\n        // 檢查各種可能的 Tauri API\n        if (window.__TAURI_INVOKE__ || \n            (window.__TAURI__ && window.__TAURI__.invoke) ||\n            (window.__TAURI_INTERNALS__ && window.__TAURI_INTERNALS__.invoke)) {\n          console.log('Tauri API detected after', attempts, 'attempts');\n          resolve();\n          return;\n        }\n        \n        // 在開發模式中，也嘗試檢查是否能動態載入\n        if (attempts === 1) {\n          try {\n            import('@tauri-apps/api/core').then(() => {\n              console.log('Tauri API module available');\n              resolve();\n            }).catch(() => {\n              // 繼續等待\n              if (attempts < maxAttempts) {\n                setTimeout(checkTauri, 100);\n              } else {\n                console.warn('Tauri API not available after waiting, proceeding anyway');\n                resolve(); // 不拒絕，讓後續代碼處理\n              }\n            });\n            return;\n          } catch {\n            // 繼續等待\n          }\n        }\n      }\n      \n      if (attempts < maxAttempts) {\n        setTimeout(checkTauri, 100);\n      } else {\n        console.warn('Tauri API not detected after maximum attempts, proceeding anyway');\n        resolve(); // 不拒絕，讓後續代碼處理\n      }\n    };\n    \n    checkTauri();\n  });\n};\n\nconst loadTauriAPI = async () => {\n  if (tauriInvoke) return tauriInvoke;\n  \n  // 等待 Tauri 初始化\n  await waitForTauri();\n  \n  try {\n    // 檢查全域對象是否存在（優先檢查）\n    if (typeof window !== 'undefined') {\n      // Tauri v2 的標準方式\n      if (window.__TAURI_INVOKE__) {\n        console.log('使用 window.__TAURI_INVOKE__');\n        tauriInvoke = window.__TAURI_INVOKE__;\n        return window.__TAURI_INVOKE__;\n      }\n      \n      // 嘗試從 __TAURI__ 對象獲取\n      if (window.__TAURI__ && window.__TAURI__.invoke) {\n        console.log('使用 window.__TAURI__.invoke');\n        tauriInvoke = window.__TAURI__.invoke;\n        return window.__TAURI__.invoke;\n      }\n    }\n    \n    // 最後嘗試動態導入\n    console.log('嘗試動態導入 @tauri-apps/api/core');\n    const { invoke } = await import('@tauri-apps/api/core');\n    tauriInvoke = invoke;\n    return invoke;\n  } catch (error) {\n    console.warn('無法載入 Tauri API:', error);\n    throw new Error('無法找到 Tauri invoke 函數 - 請確保在 Tauri 環境中運行');\n  }\n};\n\n// 安全的 invoke 函數 - 使用標準 Tauri API\nconst safeInvoke = async (command: string, args?: any) => {\n  try {\n    console.log(`調用 Tauri 命令: ${command}`, args);\n    \n    const invoke = await loadTauriAPI();\n    if (!invoke) {\n      const errorMsg = 'Tauri invoke 函數不可用 - 可能不在 Tauri 環境中運行';\n      console.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n    \n    // 使用獲取到的 invoke 函數，確保參數格式正確\n    const invokeArgs = args || {};\n    const result = await invoke(command, invokeArgs);\n    \n    console.log(`Tauri 命令 ${command} 成功:`, result);\n    return result;\n    \n  } catch (error) {\n    console.error(`Tauri command ${command} failed:`, error);\n    \n    // 特別處理 callbackId 相關錯誤\n    if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('callbackId')) {\n      console.error('檢測到 Tauri 回調錯誤，可能是版本不匹配問題');\n      throw new Error(`Tauri 回調機制錯誤 - 命令: ${command}`);\n    }\n    \n    // 提供更詳細的錯誤信息\n    if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && error.message.includes('not available')) {\n      throw new Error(`Tauri 命令 ${command} 不可用 - 請確保在 Tauri 環境中運行`);\n    }\n    \n    throw error;\n  }\n};\n\n// 臨時的模擬資料回退\nconst createFallbackData = (commandName: string) => {\n  console.warn(`使用 ${commandName} 的模擬資料回退`);\n  \n  switch (commandName) {\n    case 'get_all_projects':\n      return Promise.resolve([]);\n    case 'get_all_settings':\n      return Promise.resolve([]);\n    case 'check_ollama_service':\n      return Promise.resolve(false);\n    case 'get_service_status':\n      return Promise.resolve({\n        service: { available: false, error: 'Tauri API 不可用' },\n        models: { count: 0, list: [] },\n        last_checked: new Date().toISOString()\n      });\n    case 'list_models':\n      return Promise.resolve([]);\n    case 'get_models_info':\n      return Promise.resolve({ success: false, models: [], error: 'Tauri API 不可用' });\n    case 'get_chapters_by_project_id':\n      return Promise.resolve([]);\n    case 'get_characters_by_project_id':\n      return Promise.resolve([]);\n    default:\n      console.warn(`命令 ${commandName} 沒有模擬資料，返回空結果`);\n      return Promise.resolve(null);\n  }\n};\n\n// 增強的 safeInvoke，在開發模式下提供回退\nconst enhancedSafeInvoke = async (command: string, args?: any) => {\n  try {\n    return await safeInvoke(command, args);\n  } catch (error) {\n    console.error(`enhancedSafeInvoke 錯誤 (${command}):`, error);\n    \n    // 特別處理 callbackId 相關錯誤\n    if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && (\n      error.message.includes('callbackId') || \n      error.message.includes('undefined is not an object')\n    )) {\n      console.warn(`檢測到 Tauri 回調機制錯誤，使用模擬資料 - 命令: ${command}`);\n      return createFallbackData(command);\n    }\n    \n    // 在開發模式下，如果是特定的命令錯誤，提供模擬資料\n    if (error && typeof error === 'object' && 'message' in error && typeof error.message === 'string' && (\n      error.message.includes('不可用') || \n      error.message.includes('not available') ||\n      error.message.includes('無法找到 Tauri invoke')\n    )) {\n      console.warn(`Tauri 命令 ${command} 失敗，嘗試使用模擬資料`);\n      return createFallbackData(command);\n    }\n    throw error;\n  }\n};\n\n// Tauri API 實現\nexport const tauriAPI: API = {\n  projects: {\n    getAll: async () => {\n      const projects = await enhancedSafeInvoke('get_all_projects');\n      // 轉換 Tauri 後端格式到前端格式\n      return projects.map((project: any) => ({\n        id: project.id,\n        name: project.name,\n        description: project.description || '',\n        type: project.type || 'isekai',\n        createdAt: new Date(project.created_at),\n        updatedAt: new Date(project.updated_at),\n        settings: project.settings ? JSON.parse(project.settings) : {}\n      }));\n    },\n    create: (project) => {\n      // 轉換前端 Project 格式為後端 CreateProjectRequest 格式\n      const createRequest = {\n        name: project.name,\n        description: project.description || null,\n        type: project.type || null,\n        settings: project.settings ? JSON.stringify(project.settings) : null,\n      };\n      return safeInvoke('create_project', { project: createRequest });\n    },\n    update: (project) => {\n      // 轉換前端 Project 格式為後端 UpdateProjectRequest 格式\n      const updateRequest = {\n        id: project.id,\n        name: project.name,\n        description: project.description || null,\n        type: project.type || null,\n        settings: project.settings ? JSON.stringify(project.settings) : null,\n      };\n      return safeInvoke('update_project', { project: updateRequest });\n    },\n    delete: (id) => safeInvoke('delete_project', { id }),\n    getById: async (id) => {\n      const project = await safeInvoke('get_project_by_id', { id });\n      // 轉換 Tauri 後端格式到前端格式\n      return {\n        id: project.id,\n        name: project.name,\n        description: project.description || '',\n        type: project.type || 'isekai',\n        createdAt: new Date(project.created_at),\n        updatedAt: new Date(project.updated_at),\n        settings: project.settings ? JSON.parse(project.settings) : {}\n      };\n    },\n  },\n  \n  chapters: {\n    getByProjectId: async (projectId) => {\n      const chapters = await safeInvoke('get_chapters_by_project_id', { projectId });\n      // 轉換 Tauri 後端格式到前端格式\n      return chapters.map((chapter: any) => ({\n        id: chapter.id,\n        projectId: chapter.project_id,\n        title: chapter.title,\n        content: chapter.content || '',\n        orderIndex: chapter.order_index,\n        createdAt: new Date(chapter.created_at),\n        updatedAt: new Date(chapter.updated_at)\n      }));\n    },\n    create: (chapter) => safeInvoke('create_chapter', {\n      chapter: {\n        project_id: chapter.projectId,\n        title: chapter.title,\n        content: chapter.content,\n        order_index: chapter.orderIndex\n      }\n    }),\n    update: (chapter) => safeInvoke('update_chapter', {\n      chapter: {\n        id: chapter.id,\n        title: chapter.title,\n        content: chapter.content,\n        order_index: chapter.orderIndex\n      }\n    }),\n    delete: (id) => safeInvoke('delete_chapter', { id }),\n    getById: async (id) => {\n      const chapter = await safeInvoke('get_chapter_by_id', { id });\n      // 轉換 Tauri 後端格式到前端格式\n      return {\n        id: chapter.id,\n        projectId: chapter.project_id,\n        title: chapter.title,\n        content: chapter.content || '',\n        orderIndex: chapter.order_index,\n        createdAt: new Date(chapter.created_at),\n        updatedAt: new Date(chapter.updated_at)\n      };\n    },\n  },\n\n  characters: {\n    getByProjectId: async (projectId) => {\n      const characters = await safeInvoke('get_characters_by_project_id', { projectId });\n      \n      // 轉換 Tauri 格式到前端格式，並載入關係資料\n      const charactersWithRelationships = await Promise.all(\n        characters.map(async (char: any) => {\n          let attributes: any = {};\n          try {\n            attributes = char.attributes ? JSON.parse(char.attributes) : {};\n          } catch {\n            console.warn('Failed to parse character attributes:', char.attributes);\n          }\n          \n          // 載入該角色的關係資料\n          let relationships = [];\n          try {\n            const rawRelationships = await safeInvoke('get_character_relationships', { characterId: char.id });\n            relationships = rawRelationships.map((rel: any) => ({\n              id: rel.id,\n              targetId: rel.to_character_id,\n              type: rel.relationship_type,\n              description: rel.description,\n            }));\n          } catch (e) {\n            console.warn('Failed to load relationships for character:', char.id, e);\n          }\n          \n          return {\n            id: char.id,\n            projectId: char.project_id,\n            name: char.name,\n            description: char.description,\n            avatarUrl: char.avatar_url,\n            createdAt: new Date(char.created_at),\n            updatedAt: new Date(char.updated_at),\n            // 展開 attributes 到個別欄位\n            archetype: attributes.archetype || '',\n            age: attributes.age,\n            gender: attributes.gender || '',\n            appearance: attributes.appearance || '',\n            personality: attributes.personality || '',\n            background: attributes.background || char.description || '',\n            relationships,\n          };\n        })\n      );\n      \n      return charactersWithRelationships;\n    },\n    create: async (character) => {\n      console.log('Tauri API: create character called with:', character);\n      const payload = {\n        character: {\n          project_id: character.projectId,\n          name: character.name,\n          description: character.description,\n          attributes: character.attributes,\n          avatar_url: character.avatarUrl\n        }\n      };\n      console.log('Tauri API: sending payload:', payload);\n      try {\n        const result = await safeInvoke('create_character', payload);\n        console.log('Tauri API: create character result:', result);\n        return result;\n      } catch (error) {\n        console.error('Tauri API: create character failed:', error);\n        throw error;\n      }\n    },\n    update: (character) => safeInvoke('update_character', {\n      character: {\n        id: character.id,\n        name: character.name,\n        description: character.description,\n        attributes: character.attributes,\n        avatar_url: character.avatarUrl\n      }\n    }),\n    delete: (id) => safeInvoke('delete_character', { id }),\n    getById: async (id) => {\n      const char = await safeInvoke('get_character_by_id', { id });\n      let attributes: any = {};\n      try {\n        attributes = char.attributes ? JSON.parse(char.attributes) : {};\n      } catch {\n        console.warn('Failed to parse character attributes:', char.attributes);\n      }\n      \n      // 載入該角色的關係資料\n      let relationships = [];\n      try {\n        const rawRelationships = await safeInvoke('get_character_relationships', { characterId: char.id });\n        relationships = rawRelationships.map((rel: any) => ({\n          id: rel.id,\n          targetId: rel.to_character_id,\n          type: rel.relationship_type,\n          description: rel.description,\n        }));\n      } catch (e) {\n        console.warn('Failed to load relationships for character:', char.id, e);\n      }\n      \n      return {\n        id: char.id,\n        projectId: char.project_id,\n        name: char.name,\n        description: char.description,\n        avatarUrl: char.avatar_url,\n        createdAt: new Date(char.created_at),\n        updatedAt: new Date(char.updated_at),\n        // 展開 attributes 到個別欄位\n        archetype: attributes.archetype || '',\n        age: attributes.age,\n        gender: attributes.gender || '',\n        appearance: attributes.appearance || '',\n        personality: attributes.personality || '',\n        background: attributes.background || char.description || '',\n        relationships,\n      };\n    },\n    createRelationship: (relationship) => safeInvoke('create_character_relationship', {\n      fromCharacterId: relationship.fromCharacterId,\n      toCharacterId: relationship.toCharacterId,\n      relationshipType: relationship.relationshipType,\n      description: relationship.description || null,\n    }),\n    deleteRelationship: (id) => safeInvoke('delete_character_relationship', { id }),\n    clearRelationships: (characterId) => safeInvoke('clear_character_relationships', { characterId }),\n  },\n\n  ai: {\n    checkOllamaService: () => enhancedSafeInvoke('check_ollama_service'),\n    getServiceStatus: () => enhancedSafeInvoke('get_service_status'),\n    listModels: () => enhancedSafeInvoke('list_models'),\n    getModelsInfo: () => enhancedSafeInvoke('get_models_info'),\n    checkModelAvailability: (modelName) => safeInvoke('check_model_availability', { modelName }),\n    generateText: (prompt, model, params) => safeInvoke('generate_text', { prompt, model, params }),\n    generateWithContext: (projectId, chapterId, position, model, params, language) => {\n      console.log('Tauri API: generateWithContext 被調用，參數:', { projectId, chapterId, position, model, params, language });\n      return safeInvoke('generate_with_context', { \n        projectId: String(projectId), \n        chapterId: String(chapterId), \n        position: Number(position), \n        model: String(model), \n        params,\n        language: language || 'zh-TW'\n      });\n    },\n    updateOllamaConfig: (config) => safeInvoke('update_ollama_config', { config }),\n  },\n\n  context: {\n    buildContext: (projectId, chapterId, position) => \n      safeInvoke('build_context', { projectId, chapterId, position }),\n    compressContext: (context, maxTokens) => \n      safeInvoke('compress_context', { context, maxTokens }),\n    getContextStats: (projectId) => safeInvoke('get_context_stats', { projectId }),\n  },\n\n  settings: {\n    get: async (key) => {\n      const value = await enhancedSafeInvoke('get_setting', { key });\n      // Tauri 後端返回字串，需要嘗試解析 JSON\n      if (value && typeof value === 'string') {\n        try {\n          return JSON.parse(value);\n        } catch {\n          return value; // 如果不是 JSON，返回原始字串\n        }\n      }\n      return value;\n    },\n    set: (key, value) => {\n      // 將值轉換為 JSON 字串（與 Tauri 後端一致）\n      const stringValue = typeof value === 'string' ? value : JSON.stringify(value);\n      return safeInvoke('set_setting', { key, value: stringValue });\n    },\n    getAll: async () => {\n      const settingsArray = await enhancedSafeInvoke('get_all_settings');\n      // 將 SettingEntry[] 轉換為物件格式\n      const settings: Record<string, any> = {};\n      for (const entry of settingsArray || []) {\n        try {\n          settings[entry.key] = JSON.parse(entry.value);\n        } catch {\n          settings[entry.key] = entry.value;\n        }\n      }\n      return settings;\n    },\n    reset: () => safeInvoke('reset_settings'),\n  },\n\n  database: {\n    backup: (path) => safeInvoke('backup_database', { path }),\n    restore: (path) => safeInvoke('restore_database', { path }),\n    runMaintenance: () => safeInvoke('run_database_maintenance'),\n    getStats: () => safeInvoke('get_database_stats'),\n    healthCheck: () => safeInvoke('health_check'),\n  },\n\n  system: {\n    getAppVersion: () => safeInvoke('get_app_version'),\n    openExternal: async (url) => {\n      // 在 Tauri v2 中，shell 功能需要通過 invoke 調用後端\n      await safeInvoke('open_external', { url });\n    },\n    showSaveDialog: async (options) => {\n      // 在 Tauri v2 中，對話框功能需要通過 invoke 調用後端\n      return await safeInvoke('show_save_dialog', { options });\n    },\n    showOpenDialog: async (options) => {\n      // 在 Tauri v2 中，對話框功能需要通過 invoke 調用後端\n      return await safeInvoke('show_open_dialog', { options });\n    },\n    quitApp: () => safeInvoke('quit_app'),\n    reloadApp: () => safeInvoke('reload_app'),\n  },\n\n  updates: {\n    checkForUpdates: () => safeInvoke('check_for_updates'),\n    downloadUpdate: () => safeInvoke('download_update'),\n    installUpdate: () => safeInvoke('install_update'),\n    setAutoUpdate: (enabled) => safeInvoke('set_auto_update', { enabled }),\n  },\n\n  aiHistory: {\n    create: async (history) => {\n      const createRequest = {\n        project_id: history.projectId,\n        chapter_id: history.chapterId,\n        model: history.model,\n        prompt: history.prompt,\n        generated_text: history.generatedText,\n        parameters: history.parameters ? JSON.stringify(history.parameters) : null,\n        language_purity: history.languagePurity,\n        token_count: history.tokenCount,\n        generation_time_ms: history.generationTimeMs,\n        position: history.position,\n      };\n      const result = await safeInvoke('create_ai_history', { request: createRequest });\n      return {\n        id: result.id,\n        projectId: result.project_id,\n        chapterId: result.chapter_id,\n        model: result.model,\n        prompt: result.prompt,\n        generatedText: result.generated_text,\n        parameters: result.parameters ? JSON.parse(result.parameters) : null,\n        languagePurity: result.language_purity,\n        tokenCount: result.token_count,\n        generationTimeMs: result.generation_time_ms,\n        selected: result.selected,\n        position: result.position,\n        createdAt: new Date(result.created_at),\n      };\n    },\n    query: async (params) => {\n      const queryRequest = {\n        project_id: params.projectId,\n        chapter_id: params.chapterId,\n        selected_only: params.selectedOnly,\n        limit: params.limit,\n        offset: params.offset,\n      };\n      const results = await safeInvoke('query_ai_history', { request: queryRequest });\n      return results.map((result: any) => ({\n        id: result.id,\n        projectId: result.project_id,\n        chapterId: result.chapter_id,\n        model: result.model,\n        prompt: result.prompt,\n        generatedText: result.generated_text,\n        parameters: result.parameters ? JSON.parse(result.parameters) : null,\n        languagePurity: result.language_purity,\n        tokenCount: result.token_count,\n        generationTimeMs: result.generation_time_ms,\n        selected: result.selected,\n        position: result.position,\n        createdAt: new Date(result.created_at),\n      }));\n    },\n    markSelected: (historyId, projectId) => \n      safeInvoke('mark_ai_history_selected', { historyId, projectId }),\n    delete: (historyId) => \n      safeInvoke('delete_ai_history', { historyId }),\n    cleanup: (projectId, keepCount) => \n      safeInvoke('cleanup_ai_history', { projectId, keepCount }),\n  },\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/api/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[89,92],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[89,92],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[119,122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[119,122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":7,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[166,169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[166,169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[269,272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[269,272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[358,361],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[358,361],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":15,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":15,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[435,438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[435,438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[538,541],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[538,541],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[627,630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[627,630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[659,662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[659,662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[708,711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[708,711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[811,814],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[811,814],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[856,859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[856,859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1189,1192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1189,1192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1254,1257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1254,1257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1318,1321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1318,1321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":106,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":109,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1448,1451],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1448,1451],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1525,1528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1525,1528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1541,1544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1541,1544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1802,1805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1802,1805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1872,1875],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1872,1875],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1908,1911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1908,1911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1957,1960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1957,1960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":64,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":64,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2151,2154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2151,2154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2185,2188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2185,2188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2222,2225],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2222,2225],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2378,2381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2378,2381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2394,2397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2394,2397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2430,2433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2430,2433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2446,2449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2446,2449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2586,2589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2586,2589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2787,2790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2787,2790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2803,2806],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2803,2806],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2829,2832],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2829,2832],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2845,2848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2845,2848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 統一的 API 接口定義\nexport interface API {\n  // 專案管理\n  projects: {\n    getAll: () => Promise<any[]>;\n    create: (project: any) => Promise<string>;\n    update: (project: any) => Promise<void>;\n    delete: (id: string) => Promise<void>;\n    getById: (id: string) => Promise<any>;\n  };\n  \n  // 章節管理\n  chapters: {\n    getByProjectId: (projectId: string) => Promise<any[]>;\n    create: (chapter: any) => Promise<string>;\n    update: (chapter: any) => Promise<void>;\n    delete: (id: string) => Promise<void>;\n    getById: (id: string) => Promise<any>;\n  };\n\n  // 角色管理\n  characters: {\n    getByProjectId: (projectId: string) => Promise<any[]>;\n    create: (character: any) => Promise<string>;\n    update: (character: any) => Promise<void>;\n    delete: (id: string) => Promise<void>;\n    getById: (id: string) => Promise<any>;\n    createRelationship: (relationship: any) => Promise<string>;\n    deleteRelationship: (id: string) => Promise<void>;\n    clearRelationships: (characterId: string) => Promise<void>;\n  };\n\n  // AI 功能\n  ai: {\n    checkOllamaService: () => Promise<boolean>;\n    getServiceStatus: () => Promise<any>;\n    listModels: () => Promise<string[]>;\n    getModelsInfo: () => Promise<any>;\n    checkModelAvailability: (modelName: string) => Promise<any>;\n    generateText: (prompt: string, model: string, params: any) => Promise<string>;\n    generateWithContext: (projectId: string, chapterId: string, position: number, model: string, params: any, language?: string) => Promise<string>;\n    updateOllamaConfig: (config: any) => Promise<any>;\n  };\n\n  // 上下文管理\n  context: {\n    buildContext: (projectId: string, chapterId: string, position: number) => Promise<string>;\n    compressContext: (context: string, maxTokens: number) => Promise<string>;\n    getContextStats: (projectId: string) => Promise<any>;\n  };\n\n  // 設定管理\n  settings: {\n    get: (key: string) => Promise<any>;\n    set: (key: string, value: any) => Promise<void>;\n    getAll: () => Promise<any>;\n    reset: () => Promise<void>;\n  };\n\n  // 資料庫維護\n  database: {\n    backup: (path: string) => Promise<void>;\n    restore: (path: string) => Promise<void>;\n    runMaintenance: () => Promise<any>;\n    getStats: () => Promise<any>;\n    healthCheck: () => Promise<any>;\n  };\n\n  // 系統功能\n  system: {\n    getAppVersion: () => Promise<string>;\n    openExternal: (url: string) => Promise<void>;\n    showSaveDialog: (options: any) => Promise<any>;\n    showOpenDialog: (options: any) => Promise<any>;\n    quitApp: () => Promise<void>;\n    reloadApp: () => Promise<void>;\n  };\n\n  // 更新管理\n  updates: {\n    checkForUpdates: () => Promise<any>;\n    downloadUpdate: () => Promise<void>;\n    installUpdate: () => Promise<void>;\n    setAutoUpdate: (enabled: boolean) => Promise<void>;\n  };\n\n  // AI 歷史記錄管理\n  aiHistory: {\n    create: (history: any) => Promise<any>;\n    query: (params: any) => Promise<any[]>;\n    markSelected: (historyId: string, projectId: string) => Promise<void>;\n    delete: (historyId: string) => Promise<void>;\n    cleanup: (projectId: string, keepCount: number) => Promise<number>;\n  };\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/AI/AIGenerationProgress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/AI/AIHistoryPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/AI/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Backup/BackupManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[886,889],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[886,889],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7525,7528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7525,7528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12246,12249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12246,12249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useCallback } from 'react';\nimport { useAppDispatch } from '../../hooks/redux';\nimport { addNotification } from '../../store/slices/uiSlice';\nimport BackupService, { BackupValidationResult, RestoreOptions } from '../../services/backupService';\n\ninterface BackupManagerProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nconst BackupManager: React.FC<BackupManagerProps> = ({ isOpen, onClose }) => {\n  const dispatch = useAppDispatch();\n  const [activeTab, setActiveTab] = useState<'create' | 'restore'>('create');\n  const [isCreatingBackup, setIsCreatingBackup] = useState(false);\n  const [isRestoring, setIsRestoring] = useState(false);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [validationResult, setValidationResult] = useState<BackupValidationResult | null>(null);\n  const [backupPreview, setBackupPreview] = useState<any>(null);\n  const [restoreOptions, setRestoreOptions] = useState<RestoreOptions>({\n    includeProjects: true,\n    includeChapters: true,\n    includeCharacters: true,\n    includeSettings: false,\n    includeTemplates: false,\n    overwriteExisting: false,\n  });\n\n  // 創建完整備份\n  const handleCreateFullBackup = useCallback(async () => {\n    setIsCreatingBackup(true);\n    try {\n      const filename = await BackupService.createFullBackup();\n      dispatch(addNotification({\n        type: 'success',\n        title: '備份創建成功',\n        message: `備份檔案 ${filename} 已下載`,\n        duration: 5000,\n      }));\n    } catch (error) {\n      dispatch(addNotification({\n        type: 'error',\n        title: '備份創建失敗',\n        message: error instanceof Error ? error.message : '未知錯誤',\n        duration: 5000,\n      }));\n    } finally {\n      setIsCreatingBackup(false);\n    }\n  }, [dispatch]);\n\n  // 處理檔案選擇\n  const handleFileSelect = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    setSelectedFile(file);\n    setValidationResult(null);\n    setBackupPreview(null);\n\n    try {\n      // 驗證備份檔案\n      const validation = await BackupService.validateBackup(file);\n      setValidationResult(validation);\n\n      if (validation.isValid) {\n        // 獲取備份預覽\n        const preview = await BackupService.getBackupPreview(file);\n        setBackupPreview(preview);\n      }\n    } catch (error) {\n      dispatch(addNotification({\n        type: 'error',\n        title: '檔案驗證失敗',\n        message: error instanceof Error ? error.message : '未知錯誤',\n        duration: 5000,\n      }));\n    }\n  }, [dispatch]);\n\n  // 執行還原\n  const handleRestore = useCallback(async () => {\n    if (!selectedFile || !validationResult?.isValid) return;\n\n    setIsRestoring(true);\n    try {\n      await BackupService.restoreBackup(selectedFile, restoreOptions);\n      dispatch(addNotification({\n        type: 'success',\n        title: '還原完成',\n        message: '備份已成功還原',\n        duration: 5000,\n      }));\n      onClose();\n      // 重新載入頁面以反映變更\n      window.location.reload();\n    } catch (error) {\n      dispatch(addNotification({\n        type: 'error',\n        title: '還原失敗',\n        message: error instanceof Error ? error.message : '未知錯誤',\n        duration: 5000,\n      }));\n    } finally {\n      setIsRestoring(false);\n    }\n  }, [selectedFile, validationResult, restoreOptions, dispatch, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-cosmic-900 border border-cosmic-700 rounded-xl shadow-xl w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        {/* 標題欄 */}\n        <div className=\"p-6 border-b border-cosmic-700 flex items-center justify-between\">\n          <h2 className=\"text-xl font-cosmic text-gold-500\">備份與還原</h2>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-white\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* 分頁導航 */}\n        <div className=\"border-b border-cosmic-700\">\n          <nav className=\"flex\">\n            <button\n              onClick={() => setActiveTab('create')}\n              className={`px-6 py-3 font-medium transition-colors ${\n                activeTab === 'create'\n                  ? 'text-gold-400 border-b-2 border-gold-400'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              創建備份\n            </button>\n            <button\n              onClick={() => setActiveTab('restore')}\n              className={`px-6 py-3 font-medium transition-colors ${\n                activeTab === 'restore'\n                  ? 'text-gold-400 border-b-2 border-gold-400'\n                  : 'text-gray-400 hover:text-white'\n              }`}\n            >\n              還原備份\n            </button>\n          </nav>\n        </div>\n\n        {/* 內容區域 */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\n          {activeTab === 'create' && (\n            <CreateBackupTab\n              isCreating={isCreatingBackup}\n              onCreateFullBackup={handleCreateFullBackup}\n            />\n          )}\n\n          {activeTab === 'restore' && (\n            <RestoreBackupTab\n              selectedFile={selectedFile}\n              validationResult={validationResult}\n              backupPreview={backupPreview}\n              restoreOptions={restoreOptions}\n              isRestoring={isRestoring}\n              onFileSelect={handleFileSelect}\n              onRestoreOptionsChange={setRestoreOptions}\n              onRestore={handleRestore}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 創建備份分頁\ninterface CreateBackupTabProps {\n  isCreating: boolean;\n  onCreateFullBackup: () => void;\n}\n\nconst CreateBackupTab: React.FC<CreateBackupTabProps> = ({\n  isCreating,\n  onCreateFullBackup,\n}) => {\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <div className=\"text-6xl mb-4\">💾</div>\n        <h3 className=\"text-xl font-medium text-gold-400 mb-2\">創建備份</h3>\n        <p className=\"text-gray-400 mb-8\">\n          將您的所有創作內容打包成備份檔案，以防資料遺失\n        </p>\n      </div>\n\n      {/* 完整備份 */}\n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-medium text-white mb-2\">完整備份</h4>\n            <p className=\"text-gray-400 mb-4\">\n              包含所有專案、章節、角色和設定的完整備份\n            </p>\n            <ul className=\"text-sm text-gray-400 space-y-1\">\n              <li>• 所有專案和章節內容</li>\n              <li>• 角色資料和關係</li>\n              <li>• 應用程式設定</li>\n              <li>• 模板和自訂配置</li>\n            </ul>\n          </div>\n          <button\n            onClick={onCreateFullBackup}\n            disabled={isCreating}\n            className=\"btn-primary ml-4\"\n          >\n            {isCreating ? '創建中...' : '創建完整備份'}\n          </button>\n        </div>\n      </div>\n\n      {/* 備份說明 */}\n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-4\">\n        <h4 className=\"text-sm font-medium text-gold-400 mb-2\">備份說明</h4>\n        <div className=\"text-xs text-gray-400 space-y-1\">\n          <p>• 備份檔案將以 JSON 格式儲存，包含所有必要的資料</p>\n          <p>• 建議定期創建備份，特別是在重要創作節點</p>\n          <p>• 備份檔案可以在不同裝置間轉移和還原</p>\n          <p>• 請將備份檔案儲存在安全的位置</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// 還原備份分頁\ninterface RestoreBackupTabProps {\n  selectedFile: File | null;\n  validationResult: BackupValidationResult | null;\n  backupPreview: any;\n  restoreOptions: RestoreOptions;\n  isRestoring: boolean;\n  onFileSelect: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  onRestoreOptionsChange: (options: RestoreOptions) => void;\n  onRestore: () => void;\n}\n\nconst RestoreBackupTab: React.FC<RestoreBackupTabProps> = ({\n  selectedFile,\n  validationResult,\n  backupPreview,\n  restoreOptions,\n  isRestoring,\n  onFileSelect,\n  onRestoreOptionsChange,\n  onRestore,\n}) => {\n  return (\n    <div className=\"space-y-6\">\n      {/* 檔案選擇 */}\n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n        <h4 className=\"text-lg font-medium text-white mb-4\">選擇備份檔案</h4>\n        <div className=\"border-2 border-dashed border-cosmic-600 rounded-lg p-8 text-center\">\n          <input\n            type=\"file\"\n            accept=\".gcbackup,.json\"\n            onChange={onFileSelect}\n            className=\"hidden\"\n            id=\"backup-file-input\"\n          />\n          <label\n            htmlFor=\"backup-file-input\"\n            className=\"cursor-pointer block\"\n          >\n            <div className=\"text-4xl mb-4\">📁</div>\n            <p className=\"text-gray-300 mb-2\">點擊選擇備份檔案</p>\n            <p className=\"text-sm text-gray-400\">支援 .gcbackup 和 .json 格式</p>\n          </label>\n        </div>\n\n        {selectedFile && (\n          <div className=\"mt-4 p-4 bg-cosmic-700 rounded-lg\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-white font-medium\">{selectedFile.name}</p>\n                <p className=\"text-sm text-gray-400\">\n                  {BackupService.formatFileSize(selectedFile.size)} • \n                  {BackupService.formatTimestamp(new Date(selectedFile.lastModified))}\n                </p>\n              </div>\n              <div className={`px-3 py-1 rounded text-xs ${\n                validationResult?.isValid \n                  ? 'bg-green-500/20 text-green-400' \n                  : 'bg-red-500/20 text-red-400'\n              }`}>\n                {validationResult?.isValid ? '有效' : '無效'}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* 驗證結果 */}\n      {validationResult && (\n        <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n          <h4 className=\"text-lg font-medium text-white mb-4\">驗證結果</h4>\n          \n          {validationResult.errors.length > 0 && (\n            <div className=\"mb-4\">\n              <h5 className=\"text-red-400 font-medium mb-2\">錯誤</h5>\n              <ul className=\"text-sm text-red-300 space-y-1\">\n                {validationResult.errors.map((error, index) => (\n                  <li key={index}>• {error}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {validationResult.warnings.length > 0 && (\n            <div className=\"mb-4\">\n              <h5 className=\"text-yellow-400 font-medium mb-2\">警告</h5>\n              <ul className=\"text-sm text-yellow-300 space-y-1\">\n                {validationResult.warnings.map((warning, index) => (\n                  <li key={index}>• {warning}</li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {validationResult.isValid && backupPreview && (\n            <div>\n              <h5 className=\"text-green-400 font-medium mb-2\">備份內容預覽</h5>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                <div className=\"bg-cosmic-700 rounded p-3\">\n                  <div className=\"text-2xl font-bold text-blue-400\">{backupPreview.totalProjects}</div>\n                  <div className=\"text-gray-400\">專案</div>\n                </div>\n                <div className=\"bg-cosmic-700 rounded p-3\">\n                  <div className=\"text-2xl font-bold text-green-400\">{backupPreview.totalChapters}</div>\n                  <div className=\"text-gray-400\">章節</div>\n                </div>\n                <div className=\"bg-cosmic-700 rounded p-3\">\n                  <div className=\"text-2xl font-bold text-purple-400\">{backupPreview.totalCharacters}</div>\n                  <div className=\"text-gray-400\">角色</div>\n                </div>\n                <div className=\"bg-cosmic-700 rounded p-3\">\n                  <div className=\"text-2xl font-bold text-gold-400\">{validationResult.version}</div>\n                  <div className=\"text-gray-400\">版本</div>\n                </div>\n              </div>\n\n              {backupPreview.projects && backupPreview.projects.length > 0 && (\n                <div className=\"mt-4\">\n                  <h6 className=\"text-white font-medium mb-2\">專案列表</h6>\n                  <div className=\"space-y-2 max-h-32 overflow-y-auto\">\n                    {backupPreview.projects.map((project: any) => (\n                      <div key={project.id} className=\"flex items-center justify-between bg-cosmic-700 rounded p-2\">\n                        <span className=\"text-white\">{project.name}</span>\n                        <span className=\"text-xs text-gray-400\">{project.type}</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 還原選項 */}\n      {validationResult?.isValid && (\n        <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n          <h4 className=\"text-lg font-medium text-white mb-4\">還原選項</h4>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-4\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={restoreOptions.includeProjects}\n                onChange={(e) => onRestoreOptionsChange({\n                  ...restoreOptions,\n                  includeProjects: e.target.checked\n                })}\n                className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n              />\n              <span className=\"text-gray-300\">還原專案</span>\n            </label>\n\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={restoreOptions.includeChapters}\n                onChange={(e) => onRestoreOptionsChange({\n                  ...restoreOptions,\n                  includeChapters: e.target.checked\n                })}\n                className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n              />\n              <span className=\"text-gray-300\">還原章節</span>\n            </label>\n\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={restoreOptions.includeCharacters}\n                onChange={(e) => onRestoreOptionsChange({\n                  ...restoreOptions,\n                  includeCharacters: e.target.checked\n                })}\n                className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n              />\n              <span className=\"text-gray-300\">還原角色</span>\n            </label>\n\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={restoreOptions.includeSettings}\n                onChange={(e) => onRestoreOptionsChange({\n                  ...restoreOptions,\n                  includeSettings: e.target.checked\n                })}\n                className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n              />\n              <span className=\"text-gray-300\">還原設定</span>\n            </label>\n          </div>\n\n          <div className=\"border-t border-cosmic-700 pt-4\">\n            <label className=\"flex items-center\">\n              <input\n                type=\"checkbox\"\n                checked={restoreOptions.overwriteExisting}\n                onChange={(e) => onRestoreOptionsChange({\n                  ...restoreOptions,\n                  overwriteExisting: e.target.checked\n                })}\n                className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n              />\n              <span className=\"text-gray-300\">覆蓋現有資料</span>\n            </label>\n            <p className=\"text-xs text-gray-400 mt-1 ml-7\">\n              如果不勾選，只會還原不存在的項目\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* 還原按鈕 */}\n      {validationResult?.isValid && (\n        <div className=\"flex justify-end\">\n          <button\n            onClick={onRestore}\n            disabled={isRestoring}\n            className=\"btn-primary\"\n          >\n            {isRestoring ? '還原中...' : '開始還原'}\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default BackupManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/ArchetypeSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterDeleteModal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'checkReferences'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: [isOpen, character, checkReferences]","fix":{"range":[1342,1361],"text":"[isOpen, character, checkReferences]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Character } from '../../types/character';\n\ninterface CharacterReference {\n  type: 'chapter' | 'relationship';\n  id: string;\n  title?: string;\n  projectName?: string;\n  occurrences?: number;\n  preview?: string;\n  relationshipType?: string;\n  relatedCharacter?: string;\n  description?: string;\n  direction?: 'incoming' | 'outgoing';\n}\n\ninterface ReferenceCheckResult {\n  references: CharacterReference[];\n  characterName: string;\n  totalReferences: number;\n}\n\ninterface CharacterDeleteModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: (forceDelete: boolean) => Promise<void>;\n  character: Character | null;\n}\n\nexport const CharacterDeleteModal: React.FC<CharacterDeleteModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  character,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [checkingReferences, setCheckingReferences] = useState(false);\n  const [referenceCheck, setReferenceCheck] = useState<ReferenceCheckResult | null>(null);\n  const [showReferences, setShowReferences] = useState(false);\n  const [forceDelete, setForceDelete] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && character) {\n      checkReferences();\n    } else {\n      setReferenceCheck(null);\n      setShowReferences(false);\n      setForceDelete(false);\n    }\n  }, [isOpen, character]);\n\n  const checkReferences = async () => {\n    if (!character) return;\n    \n    try {\n      setCheckingReferences(true);\n      // TODO: 實現角色引用檢查功能\n      // 暫時返回空的引用結果\n      const result = {\n        references: [],\n        characterName: character.name,\n        totalReferences: 0,\n        canDeleteSafely: true\n      };\n      setReferenceCheck(result);\n      setShowReferences(result.references.length > 0);\n    } catch (error) {\n      console.error('檢查角色引用失敗:', error);\n    } finally {\n      setCheckingReferences(false);\n    }\n  };\n\n  const handleConfirm = async () => {\n    try {\n      setLoading(true);\n      await onConfirm(forceDelete);\n      onClose();\n    } catch (error) {\n      console.error('刪除角色失敗:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  if (!isOpen || !character) return null;\n\n  const hasReferences = referenceCheck && referenceCheck.references.length > 0;\n  const chapterReferences = referenceCheck?.references.filter(ref => ref.type === 'chapter') || [];\n  const relationshipReferences = referenceCheck?.references.filter(ref => ref.type === 'relationship') || [];\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        {/* 標題列 */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <h2 className=\"text-xl font-semibold text-gray-900\">\n              刪除角色確認\n            </h2>\n          </div>\n          <button\n            onClick={handleCancel}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 內容區域 */}\n        <div className=\"p-6\">\n          {checkingReferences ? (\n            <div className=\"flex items-center justify-center py-8\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n                <span className=\"text-gray-600\">正在檢查角色引用...</span>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-6\">\n              {/* 基本確認訊息 */}\n              <div className=\"text-center\">\n                <div className=\"text-6xl mb-4\">⚠️</div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  您確定要刪除角色「{character.name}」嗎？\n                </h3>\n                <p className=\"text-gray-600\">\n                  此操作無法復原，角色的所有資料將被永久刪除。\n                </p>\n              </div>\n\n              {/* 引用檢查結果 */}\n              {referenceCheck && (\n                <>\n                  {hasReferences ? (\n                    <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"w-5 h-5 text-red-400 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                        </div>\n                        <div className=\"ml-3\">\n                          <h4 className=\"text-sm font-medium text-red-800\">\n                            發現 {referenceCheck.totalReferences} 個引用\n                          </h4>\n                          <p className=\"text-sm text-red-700 mt-1\">\n                            此角色在故事中被引用，刪除可能會影響故事的連貫性。\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n                      <div className=\"flex items-start\">\n                        <div className=\"flex-shrink-0\">\n                          <svg className=\"w-5 h-5 text-green-400 mt-0.5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                          </svg>\n                        </div>\n                        <div className=\"ml-3\">\n                          <h4 className=\"text-sm font-medium text-green-800\">\n                            未發現引用\n                          </h4>\n                          <p className=\"text-sm text-green-700 mt-1\">\n                            此角色在故事中沒有被引用，可以安全刪除。\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* 引用詳情 */}\n                  {showReferences && hasReferences && (\n                    <div className=\"space-y-4\">\n                      <h4 className=\"text-md font-medium text-gray-900\">引用詳情：</h4>\n                      \n                      {/* 章節引用 */}\n                      {chapterReferences.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                            章節引用 ({chapterReferences.length})\n                          </h5>\n                          <div className=\"space-y-2\">\n                            {chapterReferences.map((ref, index) => (\n                              <div key={index} className=\"bg-gray-50 rounded-md p-3 border border-gray-200\">\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <span className=\"font-medium text-gray-900\">{ref.title}</span>\n                                  <span className=\"text-xs text-gray-500\">\n                                    出現 {ref.occurrences} 次\n                                  </span>\n                                </div>\n                                {ref.preview && (\n                                  <p className=\"text-sm text-gray-600 italic\">\n                                    \"{ref.preview}\"\n                                  </p>\n                                )}\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* 關係引用 */}\n                      {relationshipReferences.length > 0 && (\n                        <div>\n                          <h5 className=\"text-sm font-medium text-gray-700 mb-2\">\n                            角色關係 ({relationshipReferences.length})\n                          </h5>\n                          <div className=\"space-y-2\">\n                            {relationshipReferences.map((ref, index) => (\n                              <div key={index} className=\"bg-gray-50 rounded-md p-3 border border-gray-200\">\n                                <div className=\"flex items-center space-x-2 mb-1\">\n                                  <span className=\"font-medium text-gray-900\">\n                                    {ref.relatedCharacter}\n                                  </span>\n                                  <span className=\"px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\">\n                                    {ref.relationshipType}\n                                  </span>\n                                  <span className=\"text-xs text-gray-500\">\n                                    ({ref.direction === 'outgoing' ? '對方' : '來自'})\n                                  </span>\n                                </div>\n                                <p className=\"text-sm text-gray-600\">\n                                  {ref.description}\n                                </p>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* 強制刪除選項 */}\n                      <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-4\">\n                        <div className=\"flex items-start\">\n                          <input\n                            type=\"checkbox\"\n                            id=\"forceDelete\"\n                            checked={forceDelete}\n                            onChange={(e) => setForceDelete(e.target.checked)}\n                            className=\"mt-1 h-4 w-4 text-red-600 focus:ring-red-500 border-gray-300 rounded\"\n                          />\n                          <div className=\"ml-3\">\n                            <label htmlFor=\"forceDelete\" className=\"text-sm font-medium text-yellow-800\">\n                              我了解風險，仍要強制刪除\n                            </label>\n                            <p className=\"text-sm text-yellow-700 mt-1\">\n                              勾選此選項將忽略所有引用警告並強制刪除角色。請確保您已經手動處理了相關的引用。\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* 按鈕列 */}\n        <div className=\"flex items-center justify-end space-x-3 p-6 border-t border-gray-200\">\n          <button\n            type=\"button\"\n            onClick={handleCancel}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            取消\n          </button>\n          <button\n            type=\"button\"\n            onClick={handleConfirm}\n            disabled={loading || checkingReferences || (!!hasReferences && !forceDelete)}\n            className={`px-4 py-2 text-sm font-medium text-white rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${\n              !!hasReferences && !forceDelete\n                ? 'bg-gray-400'\n                : 'bg-red-600 hover:bg-red-700 focus:ring-red-500'\n            }`}\n          >\n            {loading ? (\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white\"></div>\n                <span>刪除中...</span>\n              </div>\n            ) : (\n              !!hasReferences && !forceDelete ? '無法刪除' : '確認刪除'\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterDetailModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterList.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2117,2120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2117,2120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2140,2143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2140,2143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3870,3873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3870,3873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useMemo } from 'react';\nimport { Character, CharacterFilters, CharacterSortOptions } from '../../types/character';\nimport { CharacterCard } from './CharacterCard';\nimport { CharacterFiltersComponent } from './CharacterFilters';\nimport { CharacterDeleteModal } from './CharacterDeleteModal';\nimport { api } from '../../api';\n\ninterface CharacterListProps {\n  _projectId: string;\n  characters: Character[];\n  loading?: boolean;\n  error?: string | null;\n  onCreateCharacter: () => void;\n  onEditCharacter: (character: Character) => void;\n  _onDeleteCharacter: (character: Character) => void;\n  onViewCharacter: (character: Character) => void;\n  onReload?: () => void;\n}\n\nexport const CharacterList: React.FC<CharacterListProps> = ({\n  _projectId,\n  characters,\n  loading = false,\n  error = null,\n  onCreateCharacter,\n  onEditCharacter,\n  _onDeleteCharacter,\n  onViewCharacter,\n  onReload,\n}) => {\n  const [filters, setFilters] = useState<CharacterFilters>({});\n  const [sortOptions, setSortOptions] = useState<CharacterSortOptions>({\n    field: 'createdAt',\n    direction: 'desc',\n  });\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n  const [characterToDelete, setCharacterToDelete] = useState<Character | null>(null);\n\n  // 過濾和排序角色\n  const filteredAndSortedCharacters = useMemo(() => {\n    let filtered = [...characters];\n\n    // 應用搜索過濾\n    if (filters.search) {\n      const searchTerm = filters.search.toLowerCase();\n      filtered = filtered.filter(character =>\n        character.name.toLowerCase().includes(searchTerm) ||\n        character.personality?.toLowerCase().includes(searchTerm) ||\n        character.background?.toLowerCase().includes(searchTerm) ||\n        character.appearance?.toLowerCase().includes(searchTerm)\n      );\n    }\n\n    // 應用原型過濾\n    if (filters.archetype) {\n      filtered = filtered.filter(character => character.archetype === filters.archetype);\n    }\n\n    // 應用性別過濾\n    if (filters.gender) {\n      filtered = filtered.filter(character => character.gender === filters.gender);\n    }\n\n    // 應用排序\n    filtered.sort((a, b) => {\n      let aValue: any;\n      let bValue: any;\n\n      switch (sortOptions.field) {\n        case 'name':\n          aValue = a.name.toLowerCase();\n          bValue = b.name.toLowerCase();\n          break;\n        case 'archetype':\n          aValue = a.archetype || '';\n          bValue = b.archetype || '';\n          break;\n        case 'createdAt':\n          aValue = new Date(a.createdAt).getTime();\n          bValue = new Date(b.createdAt).getTime();\n          break;\n        case 'updatedAt':\n          aValue = new Date(a.updatedAt).getTime();\n          bValue = new Date(b.updatedAt).getTime();\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) {\n        return sortOptions.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortOptions.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return filtered;\n  }, [characters, filters, sortOptions]);\n\n  const handleFiltersChange = (newFilters: CharacterFilters) => {\n    setFilters(newFilters);\n  };\n\n  const handleClearFilters = () => {\n    setFilters({});\n  };\n\n  const handleSortChange = (field: CharacterSortOptions['field']) => {\n    setSortOptions(prev => ({\n      field,\n      direction: prev.field === field && prev.direction === 'asc' ? 'desc' : 'asc',\n    }));\n  };\n\n  const handleDeleteCharacter = (character: Character) => {\n    setCharacterToDelete(character);\n    setDeleteModalOpen(true);\n  };\n\n  const handleConfirmDelete = async (_forceDelete: boolean) => {\n    if (!characterToDelete) return;\n\n    try {\n      await api.characters.delete(characterToDelete.id);\n      // 呼叫父組件的重載函數\n      if (onReload) {\n        onReload();\n      }\n      setDeleteModalOpen(false);\n      setCharacterToDelete(null);\n    } catch (err: any) {\n      console.error('刪除角色失敗:', err);\n      \n      if (err.message === 'CHARACTER_HAS_REFERENCES') {\n        // 這個錯誤應該由 CharacterDeleteModal 處理\n        throw err;\n      } else {\n        // 錯誤處理由父組件負責\n        setDeleteModalOpen(false);\n        setCharacterToDelete(null);\n        throw err;\n      }\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setDeleteModalOpen(false);\n    setCharacterToDelete(null);\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gold-500\"></div>\n        <span className=\"ml-2 text-gray-300\">載入中...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"card border-red-500\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-400\">載入錯誤</h3>\n            <p className=\"mt-1 text-sm text-red-300\">{error}</p>\n            {onReload && (\n              <button\n                onClick={onReload}\n                className=\"mt-2 text-sm font-medium text-red-400 hover:text-red-300\"\n              >\n                重新載入\n              </button>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"h-full flex flex-col space-y-6\">\n      {/* 頁面標題和操作 */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-cosmic text-gold-400\">角色管理</h1>\n          <p className=\"mt-1 text-sm text-gray-300\">\n            管理專案中的角色，包括主角、配角和反派等\n          </p>\n        </div>\n        <button\n          onClick={onCreateCharacter}\n          className=\"btn-primary\"\n        >\n          <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n          </svg>\n          新增角色\n        </button>\n      </div>\n\n      {/* 過濾器 */}\n      <CharacterFiltersComponent\n        filters={filters}\n        onFiltersChange={handleFiltersChange}\n        onClearFilters={handleClearFilters}\n      />\n\n      {/* 排序選項 */}\n      <div className=\"flex items-center space-x-4 text-sm\">\n        <span className=\"text-gray-300\">排序方式:</span>\n        <button\n          onClick={() => handleSortChange('name')}\n          className={`px-3 py-1 rounded-lg transition-colors ${\n            sortOptions.field === 'name'\n              ? 'bg-gold-500 text-cosmic-950'\n              : 'text-gray-300 hover:bg-cosmic-800'\n          }`}\n        >\n          名稱\n          {sortOptions.field === 'name' && (\n            <span className=\"ml-1\">\n              {sortOptions.direction === 'asc' ? '↑' : '↓'}\n            </span>\n          )}\n        </button>\n        <button\n          onClick={() => handleSortChange('archetype')}\n          className={`px-3 py-1 rounded-lg transition-colors ${\n            sortOptions.field === 'archetype'\n              ? 'bg-gold-500 text-cosmic-950'\n              : 'text-gray-300 hover:bg-cosmic-800'\n          }`}\n        >\n          原型\n          {sortOptions.field === 'archetype' && (\n            <span className=\"ml-1\">\n              {sortOptions.direction === 'asc' ? '↑' : '↓'}\n            </span>\n          )}\n        </button>\n        <button\n          onClick={() => handleSortChange('createdAt')}\n          className={`px-3 py-1 rounded-lg transition-colors ${\n            sortOptions.field === 'createdAt'\n              ? 'bg-gold-500 text-cosmic-950'\n              : 'text-gray-300 hover:bg-cosmic-800'\n          }`}\n        >\n          創建時間\n          {sortOptions.field === 'createdAt' && (\n            <span className=\"ml-1\">\n              {sortOptions.direction === 'asc' ? '↑' : '↓'}\n            </span>\n          )}\n        </button>\n      </div>\n\n      {/* 角色列表容器 */}\n      <div className=\"flex-1 overflow-y-auto min-h-0\">\n        {filteredAndSortedCharacters.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z\" />\n            </svg>\n            <h3 className=\"mt-2 text-sm font-medium text-gray-300\">\n              {characters.length === 0 ? '尚無角色' : '沒有符合條件的角色'}\n            </h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {characters.length === 0 \n                ? '開始創建您的第一個角色吧！' \n                : '嘗試調整搜索條件或清除過濾器'\n              }\n            </p>\n            {characters.length === 0 && (\n              <div className=\"mt-6\">\n                <button\n                  onClick={onCreateCharacter}\n                  className=\"btn-primary\"\n                >\n                  <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n                  </svg>\n                  新增角色\n                </button>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-1 pb-8\">\n            {filteredAndSortedCharacters.map((character) => (\n              <CharacterCard\n                key={character.id}\n                character={character}\n                onEdit={onEditCharacter}\n                onDelete={handleDeleteCharacter}\n                onView={onViewCharacter}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* 統計資訊 */}\n      {characters.length > 0 && (\n        <div className=\"text-sm text-gray-400 text-center\">\n          顯示 {filteredAndSortedCharacters.length} / {characters.length} 個角色\n        </div>\n      )}\n\n      {/* 刪除確認對話框 */}\n      <CharacterDeleteModal\n        isOpen={deleteModalOpen}\n        onClose={handleCancelDelete}\n        onConfirm={handleConfirmDelete}\n        character={characterToDelete}\n      />\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/CharacterModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4045,4048],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4045,4048],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Character, CharacterFormData, GENDER_OPTIONS, Relationship } from '../../types/character';\nimport { getArchetypeTemplateByName, CharacterArchetypeTemplate } from '../../data/characterArchetypes';\nimport { ArchetypeSelector } from './ArchetypeSelector';\nimport { RelationshipEditor } from './RelationshipEditor';\n\ninterface CharacterModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSave: (character: CharacterFormData) => Promise<void>;\n  character?: Character | null;\n  projectId: string;\n  projectType?: string;\n  allCharacters?: Character[];\n}\n\nexport const CharacterModal: React.FC<CharacterModalProps> = ({\n  isOpen,\n  onClose,\n  onSave,\n  character,\n  projectId,\n  projectType,\n  allCharacters = [],\n}) => {\n  const [formData, setFormData] = useState<CharacterFormData>({\n    name: '',\n    archetype: '',\n    age: undefined,\n    gender: '',\n    appearance: '',\n    personality: '',\n    background: '',\n    relationships: [],\n  });\n  const [loading, setLoading] = useState(false);\n  const [errors, setErrors] = useState<Record<string, string>>({});\n  const [selectedTemplate, setSelectedTemplate] = useState<CharacterArchetypeTemplate | null>(null);\n  const [showTemplatePreview, setShowTemplatePreview] = useState(false);\n  const [activeTab, setActiveTab] = useState<'basic' | 'relationships'>('basic');\n  const [showRelationshipEditor, setShowRelationshipEditor] = useState(false);\n\n  const isEditing = !!character;\n\n  useEffect(() => {\n    if (isOpen) {\n      if (character) {\n        // 編輯模式：填入現有角色資料\n        setFormData({\n          name: character.name,\n          archetype: character.archetype || '',\n          age: character.age,\n          gender: character.gender || '',\n          appearance: character.appearance || '',\n          personality: character.personality || '',\n          background: character.background || '',\n          relationships: character.relationships || [],\n        });\n      } else {\n        // 新增模式：重置表單\n        setFormData({\n          name: '',\n          archetype: '',\n          age: undefined,\n          gender: '',\n          appearance: '',\n          personality: '',\n          background: '',\n          relationships: [],\n        });\n      }\n      setErrors({});\n      setActiveTab('basic');\n      setShowRelationshipEditor(false);\n    }\n  }, [isOpen, character]);\n\n  const validateForm = (): boolean => {\n    const newErrors: Record<string, string> = {};\n\n    // 角色名稱驗證\n    if (!formData.name.trim()) {\n      newErrors.name = '角色名稱為必填項目';\n    } else if (formData.name.trim().length < 1) {\n      newErrors.name = '角色名稱不能為空';\n    } else if (formData.name.trim().length > 50) {\n      newErrors.name = '角色名稱不能超過 50 個字符';\n    }\n\n    // 年齡驗證\n    if (formData.age !== undefined) {\n      if (formData.age < 0 || formData.age > 1000) {\n        newErrors.age = '年齡必須在 0-1000 之間';\n      }\n    }\n\n    // 外觀描述長度驗證\n    if (formData.appearance && formData.appearance.length > 500) {\n      newErrors.appearance = '外觀描述不能超過 500 個字符';\n    }\n\n    // 性格特點長度驗證\n    if (formData.personality && formData.personality.length > 500) {\n      newErrors.personality = '性格特點不能超過 500 個字符';\n    }\n\n    // 背景故事長度驗證\n    if (formData.background && formData.background.length > 1000) {\n      newErrors.background = '背景故事不能超過 1000 個字符';\n    }\n\n    // 原型與模板一致性驗證\n    if (formData.archetype && selectedTemplate) {\n      if (formData.archetype !== selectedTemplate.name) {\n        // 這是一個內部一致性檢查，通常不會發生\n        console.warn('原型與選中的模板不一致');\n      }\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await onSave(formData);\n      onClose();\n    } catch (error) {\n      console.error('儲存角色失敗:', error);\n      setErrors({ submit: '儲存失敗，請稍後再試' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (field: keyof CharacterFormData, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value,\n    }));\n    \n    // 清除該欄位的錯誤\n    if (errors[field]) {\n      setErrors(prev => ({\n        ...prev,\n        [field]: '',\n      }));\n    }\n  };\n\n  const handleArchetypeChange = (archetypeName: string) => {\n    const template = getArchetypeTemplateByName(archetypeName);\n    setSelectedTemplate(template || null);\n    \n    handleInputChange('archetype', archetypeName);\n    \n    if (template) {\n      setShowTemplatePreview(true);\n    } else {\n      setShowTemplatePreview(false);\n    }\n  };\n\n  const applyTemplate = () => {\n    if (!selectedTemplate) return;\n    \n    // 只在欄位為空時才填入預設值，避免覆蓋用戶已輸入的內容\n    setFormData(prev => ({\n      ...prev,\n      personality: prev.personality || selectedTemplate.defaultPersonality,\n      appearance: prev.appearance || selectedTemplate.defaultAppearance || '',\n      background: prev.background || selectedTemplate.defaultBackground || '',\n      age: prev.age || (selectedTemplate.suggestedAge ? \n        Math.floor((selectedTemplate.suggestedAge.min + selectedTemplate.suggestedAge.max) / 2) : \n        undefined),\n      gender: prev.gender || (selectedTemplate.suggestedGender?.[0] || ''),\n    }));\n    \n    setShowTemplatePreview(false);\n  };\n\n  const dismissTemplate = () => {\n    setShowTemplatePreview(false);\n  };\n\n  const handleRelationshipSave = async (relationships: Relationship[]) => {\n    console.log('CharacterModal - handleRelationshipSave called with:', relationships);\n    setFormData(prev => ({\n      ...prev,\n      relationships,\n    }));\n    console.log('CharacterModal - formData updated with relationships');\n    setShowRelationshipEditor(false);\n  };\n\n  const handleRelationshipCancel = () => {\n    setShowRelationshipEditor(false);\n  };\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-y-auto\">\n        <form onSubmit={handleSubmit}>\n          {/* 標題列 */}\n          <div className=\"flex items-center justify-between p-6 border-b border-cosmic-700\">\n            <h2 className=\"text-xl font-semibold text-white\">\n              {isEditing ? '編輯角色' : '新增角色'}\n            </h2>\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"text-gray-400 hover:text-gold-400 transition-colors\"\n            >\n              <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            </button>\n          </div>\n\n          {/* 標籤導航 */}\n          <div className=\"border-b border-cosmic-700\">\n            <nav className=\"flex space-x-8 px-6\">\n              <button\n                type=\"button\"\n                onClick={() => setActiveTab('basic')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'basic'\n                    ? 'border-gold-500 text-gold-400'\n                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-cosmic-600'\n                }`}\n              >\n                基本資料\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setActiveTab('relationships')}\n                className={`py-4 px-1 border-b-2 font-medium text-sm ${\n                  activeTab === 'relationships'\n                    ? 'border-gold-500 text-gold-400'\n                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-cosmic-600'\n                }`}\n              >\n                角色關係\n                {formData.relationships && formData.relationships.length > 0 && (\n                  <span className=\"ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gold-500 text-cosmic-950\">\n                    {formData.relationships.length}\n                  </span>\n                )}\n              </button>\n            </nav>\n          </div>\n\n          {/* 表單內容 */}\n          <div className=\"p-6 space-y-6\">\n            {/* 基本資料標籤 */}\n            {activeTab === 'basic' && (\n              <>\n                {/* 基本資訊 */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              {/* 角色名稱 */}\n              <div className=\"md:col-span-2\">\n                <label htmlFor=\"name\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  角色名稱 <span className=\"text-red-400\">*</span>\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"name\"\n                  value={formData.name}\n                  onChange={(e) => handleInputChange('name', e.target.value)}\n                  className={`w-full px-3 py-2 bg-cosmic-900 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-gold-500 ${\n                    errors.name ? 'border-red-400' : 'border-cosmic-600'\n                  }`}\n                  placeholder=\"輸入角色名稱\"\n                />\n                {errors.name && (\n                  <p className=\"mt-1 text-sm text-red-400\">{errors.name}</p>\n                )}\n              </div>\n\n              {/* 角色原型 */}\n              <div className=\"md:col-span-2\">\n                <label className=\"block text-sm font-medium text-gray-300 mb-2\">\n                  角色原型\n                </label>\n                <ArchetypeSelector\n                  selectedArchetype={formData.archetype}\n                  onSelect={handleArchetypeChange}\n                  projectType={projectType}\n                />\n              </div>\n\n              {/* 年齡 */}\n              <div>\n                <label htmlFor=\"age\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  年齡\n                </label>\n                <input\n                  type=\"number\"\n                  id=\"age\"\n                  value={formData.age || ''}\n                  onChange={(e) => handleInputChange('age', e.target.value ? parseInt(e.target.value) : undefined)}\n                  className={`w-full px-3 py-2 bg-cosmic-900 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-gold-500 ${\n                    errors.age ? 'border-red-400' : 'border-cosmic-600'\n                  }`}\n                  placeholder=\"輸入年齡\"\n                  min=\"0\"\n                  max=\"1000\"\n                />\n                {errors.age && (\n                  <p className=\"mt-1 text-sm text-red-400\">{errors.age}</p>\n                )}\n              </div>\n\n              {/* 性別 */}\n              <div>\n                <label htmlFor=\"gender\" className=\"block text-sm font-medium text-gray-300 mb-1\">\n                  性別\n                </label>\n                <select\n                  id=\"gender\"\n                  value={formData.gender}\n                  onChange={(e) => handleInputChange('gender', e.target.value)}\n                  className=\"w-full px-3 py-2 bg-cosmic-900 border border-cosmic-600 rounded-md text-white focus:ring-2 focus:ring-gold-500 focus:border-gold-500\"\n                >\n                  <option value=\"\">選擇性別</option>\n                  {GENDER_OPTIONS.map((gender) => (\n                    <option key={gender} value={gender}>\n                      {gender}\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* 外觀描述 */}\n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <label htmlFor=\"appearance\" className=\"block text-sm font-medium text-gray-300\">\n                  外觀描述\n                </label>\n                <span className=\"text-xs text-gray-400\">\n                  {formData.appearance?.length || 0}/500\n                </span>\n              </div>\n              <textarea\n                id=\"appearance\"\n                value={formData.appearance}\n                onChange={(e) => handleInputChange('appearance', e.target.value)}\n                rows={3}\n                maxLength={500}\n                className={`w-full px-3 py-2 bg-cosmic-900 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-gold-500 ${\n                  errors.appearance ? 'border-red-400' : 'border-cosmic-600'\n                }`}\n                placeholder=\"描述角色的外觀特徵...\"\n              />\n              {errors.appearance && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.appearance}</p>\n              )}\n            </div>\n\n            {/* 性格特點 */}\n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <label htmlFor=\"personality\" className=\"block text-sm font-medium text-gray-300\">\n                  性格特點\n                </label>\n                <span className=\"text-xs text-gray-400\">\n                  {formData.personality?.length || 0}/500\n                </span>\n              </div>\n              <textarea\n                id=\"personality\"\n                value={formData.personality}\n                onChange={(e) => handleInputChange('personality', e.target.value)}\n                rows={3}\n                maxLength={500}\n                className={`w-full px-3 py-2 bg-cosmic-900 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-gold-500 ${\n                  errors.personality ? 'border-red-400' : 'border-cosmic-600'\n                }`}\n                placeholder=\"描述角色的性格特點...\"\n              />\n              {errors.personality && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.personality}</p>\n              )}\n            </div>\n\n            {/* 背景故事 */}\n            <div>\n              <div className=\"flex items-center justify-between mb-1\">\n                <label htmlFor=\"background\" className=\"block text-sm font-medium text-gray-300\">\n                  背景故事\n                </label>\n                <span className=\"text-xs text-gray-400\">\n                  {formData.background?.length || 0}/1000\n                </span>\n              </div>\n              <textarea\n                id=\"background\"\n                value={formData.background}\n                onChange={(e) => handleInputChange('background', e.target.value)}\n                rows={4}\n                maxLength={1000}\n                className={`w-full px-3 py-2 bg-cosmic-900 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-gold-500 focus:border-gold-500 ${\n                  errors.background ? 'border-red-400' : 'border-cosmic-600'\n                }`}\n                placeholder=\"描述角色的背景故事...\"\n              />\n              {errors.background && (\n                <p className=\"mt-1 text-sm text-red-400\">{errors.background}</p>\n              )}\n            </div>\n\n            {/* 模板預覽和應用 */}\n            {showTemplatePreview && selectedTemplate && (\n              <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <h4 className=\"text-lg font-medium text-blue-900\">\n                    🎭 {selectedTemplate.name} 模板預覽\n                  </h4>\n                  <button\n                    type=\"button\"\n                    onClick={dismissTemplate}\n                    className=\"text-blue-400 hover:text-blue-600\"\n                  >\n                    <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n                    </svg>\n                  </button>\n                </div>\n                \n                <div className=\"space-y-3 text-sm\">\n                  <div>\n                    <span className=\"font-medium text-blue-800\">描述：</span>\n                    <p className=\"text-blue-700 mt-1\">{selectedTemplate.description}</p>\n                  </div>\n                  \n                  <div>\n                    <span className=\"font-medium text-blue-800\">預設性格：</span>\n                    <p className=\"text-blue-700 mt-1\">{selectedTemplate.defaultPersonality}</p>\n                  </div>\n                  \n                  {selectedTemplate.defaultAppearance && (\n                    <div>\n                      <span className=\"font-medium text-blue-800\">預設外觀：</span>\n                      <p className=\"text-blue-700 mt-1\">{selectedTemplate.defaultAppearance}</p>\n                    </div>\n                  )}\n                  \n                  {selectedTemplate.defaultBackground && (\n                    <div>\n                      <span className=\"font-medium text-blue-800\">預設背景：</span>\n                      <p className=\"text-blue-700 mt-1\">{selectedTemplate.defaultBackground}</p>\n                    </div>\n                  )}\n                  \n                  {selectedTemplate.suggestedAge && (\n                    <div>\n                      <span className=\"font-medium text-blue-800\">建議年齡：</span>\n                      <span className=\"text-blue-700 ml-1\">\n                        {selectedTemplate.suggestedAge.min} - {selectedTemplate.suggestedAge.max} 歲\n                      </span>\n                    </div>\n                  )}\n                  \n                  {selectedTemplate.suggestedGender && selectedTemplate.suggestedGender.length > 0 && (\n                    <div>\n                      <span className=\"font-medium text-blue-800\">建議性別：</span>\n                      <span className=\"text-blue-700 ml-1\">\n                        {selectedTemplate.suggestedGender.join('、')}\n                      </span>\n                    </div>\n                  )}\n                  \n                  <div className=\"flex flex-wrap gap-1 mt-2\">\n                    {selectedTemplate.tags.map((tag) => (\n                      <span\n                        key={tag}\n                        className=\"inline-block px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center justify-end space-x-2 mt-4 pt-3 border-t border-blue-200\">\n                  <button\n                    type=\"button\"\n                    onClick={dismissTemplate}\n                    className=\"px-3 py-1 text-sm text-blue-600 hover:text-blue-800\"\n                  >\n                    稍後再說\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={applyTemplate}\n                    className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                  >\n                    應用模板\n                  </button>\n                </div>\n              </div>\n            )}\n\n                {/* 提交錯誤 */}\n                {errors.submit && (\n                  <div className=\"bg-red-50 border border-red-200 rounded-md p-3\">\n                    <p className=\"text-sm text-red-400\">{errors.submit}</p>\n                  </div>\n                )}\n              </>\n            )}\n\n            {/* 角色關係標籤 */}\n            {activeTab === 'relationships' && (\n              <>\n                {showRelationshipEditor ? (\n                  <RelationshipEditor\n                    character={{\n                      ...formData,\n                      id: character?.id || '',\n                      projectId,\n                      createdAt: character?.createdAt || new Date(),\n                      updatedAt: character?.updatedAt || new Date(),\n                    }}\n                    allCharacters={allCharacters}\n                    onSave={handleRelationshipSave}\n                    onCancel={handleRelationshipCancel}\n                  />\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <h3 className=\"text-lg font-medium text-white\">角色關係</h3>\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowRelationshipEditor(true)}\n                        className=\"px-4 py-2 text-sm font-medium text-cosmic-950 bg-gold-500 rounded-md hover:bg-gold-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gold-500\"\n                      >\n                        管理關係\n                      </button>\n                    </div>\n\n                    {formData.relationships && formData.relationships.length > 0 ? (\n                      <div className=\"space-y-3\">\n                        {formData.relationships.map((relationship, index) => {\n                          const targetCharacter = allCharacters.find(c => c.id === relationship.targetId);\n                          return (\n                            <div key={index} className=\"bg-cosmic-900 rounded-lg p-4 border border-cosmic-700\">\n                              <div className=\"flex items-center space-x-2 mb-2\">\n                                <span className=\"font-medium text-white\">\n                                  {targetCharacter?.name || '未知角色'}\n                                </span>\n                                <span className=\"px-2 py-1 text-xs font-medium bg-gold-500 text-cosmic-950 rounded-full\">\n                                  {relationship.type}\n                                </span>\n                              </div>\n                              <p className=\"text-sm text-gray-300\">\n                                {relationship.description}\n                              </p>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-400\">\n                        <div className=\"text-4xl mb-2\">👥</div>\n                        <p>尚未建立任何角色關係</p>\n                        <p className=\"text-sm\">點擊「管理關係」開始添加關係</p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </>\n            )}\n          </div>\n\n          {/* 按鈕列 */}\n          <div className=\"flex items-center justify-end space-x-3 p-6 border-t border-cosmic-700\">\n            <button\n              type=\"button\"\n              onClick={onClose}\n              className=\"px-4 py-2 text-sm font-medium text-gray-300 bg-cosmic-800 border border-cosmic-600 rounded-md hover:bg-cosmic-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gold-500\"\n            >\n              取消\n            </button>\n            <button\n              type=\"submit\"\n              disabled={loading}\n              className=\"px-4 py-2 text-sm font-medium text-cosmic-950 bg-gold-500 border border-transparent rounded-md hover:bg-gold-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gold-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n            >\n              {loading ? '儲存中...' : (isEditing ? '更新' : '創建')}\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/RelationshipEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/RelationshipVisualization.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Characters/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Debug/ModalDebugger.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Debug/TestModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/AIWritingPanel.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'updateProgress'. Either exclude it or remove the dependency array. Outer scope values like 'updateProgress' aren't valid dependencies because mutating them doesn't re-render the component.","line":291,"column":6,"nodeType":"ArrayExpression","endLine":291,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[8321,8337],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'updateProgress'. Either exclude it or remove the dependency array. Outer scope values like 'updateProgress' aren't valid dependencies because mutating them doesn't re-render the component.","line":350,"column":6,"nodeType":"ArrayExpression","endLine":350,"endColumn":22,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[9848,9864],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useCallback, useRef } from 'react';\nimport { useSlate } from 'slate-react';\nimport { Transforms, Range } from 'slate';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { addNotification } from '../../store/slices/uiSlice';\nimport { setCurrentModel, fetchAvailableModels } from '../../store/slices/aiSlice';\nimport { startProgress, updateProgress, completeProgress, failProgress } from '../../store/slices/errorSlice';\nimport { store } from '../../store/store';\nimport { api } from '../../api';\nimport { ErrorSeverity } from '../../types/error';\n\ninterface AIWritingPanelProps {\n  projectId: string;\n  chapterId: string;\n}\n\ninterface GenerationOption {\n  id: string;\n  text: string;\n  temperature: number;\n  timestamp: Date;\n  selected?: boolean;\n}\n\nconst AIWritingPanel: React.FC<AIWritingPanelProps> = ({ projectId, chapterId }) => {\n  const dispatch = useAppDispatch();\n  const editor = useSlate();\n  const abortControllerRef = useRef<AbortController | null>(null);\n  \n  // 從 Redux store 獲取 AI 相關狀態\n  const { currentModel, availableModels, isOllamaConnected } = useAppSelector(state => state.ai);\n  \n  const [isGenerating, setIsGenerating] = useState(false);\n  const [generationOptions, setGenerationOptions] = useState<GenerationOption[]>([]);\n  const [progressId, setProgressId] = useState<string | null>(null);\n  \n  // 從 Redux store 獲取進度狀態\n  const progressState = useAppSelector(state => state.progress);\n  const currentProgress = progressId ? progressState.indicators.find(p => p.id === progressId) : null;\n  const [temperature, setTemperature] = useState(0.7);\n  const [maxTokens, setMaxTokens] = useState(200);\n  const [generationCount, setGenerationCount] = useState(3);\n  const [showAdvancedSettings, setShowAdvancedSettings] = useState(false);\n  const [topP, setTopP] = useState(0.9);\n  const [presencePenalty, setPresencePenalty] = useState(0);\n  const [frequencyPenalty, setFrequencyPenalty] = useState(0);\n  \n  // 獲取可用的 AI 模型（如果尚未載入）\n  useEffect(() => {\n    if (isOllamaConnected && availableModels.length === 0) {\n      dispatch(fetchAvailableModels());\n    }\n  }, [dispatch, isOllamaConnected, availableModels.length]);\n\n  // 清理效果：組件卸載時取消正在進行的請求\n  useEffect(() => {\n    return () => {\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n    };\n  }, []);\n  \n\n  // 生成文本\n  const handleGenerate = async () => {\n    if (!currentModel) {\n      dispatch(addNotification({\n        type: 'warning',\n        title: '未選擇模型',\n        message: '請先在 AI 設定中選擇一個模型',\n        duration: 3000,\n      }));\n      return;\n    }\n    \n    // 檢查是否有選擇位置\n    const { selection } = editor;\n    if (!selection || !Range.isCollapsed(selection)) {\n      dispatch(addNotification({\n        type: 'warning',\n        title: '請選擇續寫位置',\n        message: '請將游標放在您希望 AI 續寫的位置',\n        duration: 3000,\n      }));\n      return;\n    }\n    \n    setIsGenerating(true);\n    setGenerationOptions([]);\n    \n    // 創建 AbortController 用於取消請求\n    abortControllerRef.current = new AbortController();\n    \n    // 開始進度追蹤\n    dispatch(startProgress({\n      title: 'AI 續寫',\n      description: `正在使用 ${currentModel} 模型生成文本`,\n      totalSteps: generationCount,\n      completedSteps: 0,\n      progress: 0\n    }));\n    \n    // 等待一小段時間以確保進度已創建\n    await new Promise(resolve => setTimeout(resolve, 50));\n    \n    // 從 store 獲取最新的進度 ID\n    const progressState = store.getState().progress;\n    const latestProgress = progressState.indicators[progressState.indicators.length - 1];\n    const newProgressId = latestProgress?.id;\n    \n    if (!newProgressId) {\n      console.error('無法創建進度指示器');\n      return;\n    }\n    \n    setProgressId(newProgressId);\n    \n    try {\n      dispatch(updateProgress({\n        id: newProgressId,\n        progress: 10,\n        currentStep: '準備生成上下文...'\n      }));\n      \n      // 生成多個選項的參數配置\n      const baseParams = {\n        temperature,\n        maxTokens,\n        topP,\n        presencePenalty,\n        frequencyPenalty,\n        maxContextTokens: 2000,\n      };\n      \n      // 根據生成數量創建不同的參數組合\n      const paramVariations = [];\n      for (let i = 0; i < generationCount; i++) {\n        const tempVariation = temperature + (i - Math.floor(generationCount / 2)) * 0.1;\n        paramVariations.push({\n          ...baseParams,\n          temperature: Math.max(0.1, Math.min(1.5, tempVariation))\n        });\n      }\n      \n      dispatch(updateProgress({\n        id: newProgressId,\n        progress: 20,\n        currentStep: `開始生成 ${generationCount} 個版本...`\n      }));\n      \n      // 並行生成多個選項\n      const generationPromises = paramVariations.map(async (params, index) => {\n        try {\n          dispatch(updateProgress({\n            id: newProgressId,\n            progress: 20 + (index * 60 / generationCount),\n            currentStep: `生成第 ${index + 1} 個版本...`,\n            completedSteps: index\n          }));\n          \n          const result = await api.ai.generateWithContext(\n            projectId, \n            chapterId, \n            selection.anchor.offset, \n            currentModel, \n            params\n          );\n          \n          return {\n            id: `${Date.now()}-${index}`,\n            text: result,\n            temperature: params.temperature,\n            timestamp: new Date()\n          };\n        } catch (error) {\n          console.error(`生成第 ${index + 1} 個版本失敗:`, error);\n          return null;\n        }\n      });\n      \n      // 等待所有生成完成\n      const results = await Promise.all(generationPromises);\n      \n      dispatch(updateProgress({\n        id: newProgressId,\n        progress: 90,\n        currentStep: '處理生成結果...',\n        completedSteps: generationCount\n      }));\n      \n      // 過濾掉失敗的結果\n      const validResults = results.filter((result): result is GenerationOption => result !== null);\n      \n      if (validResults.length === 0) {\n        throw new Error('所有生成嘗試都失敗了');\n      }\n      \n      // 完成進度\n      dispatch(completeProgress(newProgressId));\n      \n      setGenerationOptions(validResults);\n      \n      dispatch(addNotification({\n        type: 'success',\n        title: 'AI 續寫完成',\n        message: `成功生成 ${validResults.length} 個版本，請選擇您喜歡的版本`,\n        duration: 3000,\n      }));\n      \n    } catch (error) {\n      console.error('AI 續寫失敗:', error);\n      \n      // 標記進度失敗\n      if (newProgressId) {\n        dispatch(failProgress({\n          id: newProgressId,\n          error: {\n            id: Date.now().toString(),\n            code: 'AI_GENERATION_ERROR',\n            message: error instanceof Error ? error.message : '生成文本時發生錯誤',\n            severity: 'high' as ErrorSeverity,\n            category: 'ai',\n            timestamp: new Date(),\n            stack: error instanceof Error ? error.stack : undefined\n          }\n        }));\n      }\n      \n      dispatch(addNotification({\n        type: 'error',\n        title: 'AI 續寫失敗',\n        message: error instanceof Error ? error.message : '生成文本時發生錯誤',\n        duration: 5000,\n      }));\n    } finally {\n      setIsGenerating(false);\n      setProgressId(null);\n      abortControllerRef.current = null;\n    }\n  };\n  \n  // 應用生成的文本\n  const handleApplyOption = useCallback((option: GenerationOption) => {\n    try {\n      // 獲取當前選擇位置\n      const { selection } = editor;\n      if (selection) {\n        // 在當前位置插入文本\n        Transforms.insertText(editor, option.text);\n        \n        // 標記選項為已選擇\n        setGenerationOptions(prev => \n          prev.map(opt => ({\n            ...opt,\n            selected: opt.id === option.id\n          }))\n        );\n        \n        dispatch(addNotification({\n          type: 'success',\n          title: '已插入文本',\n          message: `已成功插入 AI 生成的文本（溫度: ${option.temperature.toFixed(1)}）`,\n          duration: 3000,\n        }));\n        \n        // 3秒後清除選項\n        setTimeout(() => {\n          setGenerationOptions([]);\n        }, 3000);\n      }\n    } catch (error) {\n      console.error('插入文本失敗:', error);\n      dispatch(addNotification({\n        type: 'error',\n        title: '插入失敗',\n        message: '無法插入生成的文本',\n        duration: 3000,\n      }));\n    }\n  }, [editor, dispatch]);\n  \n  // 取消生成\n  const handleCancel = useCallback(() => {\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    setGenerationOptions([]);\n    setIsGenerating(false);\n    // 取消操作，暫時不更新進度\n  }, [updateProgress]);\n\n  // 重新生成特定選項\n  const handleRegenerateOption = useCallback(async (optionId: string) => {\n    const option = generationOptions.find(opt => opt.id === optionId);\n    if (!option || !currentModel) return;\n\n    try {\n      const { selection } = editor;\n      if (!selection) return;\n\n      const params = {\n        temperature: option.temperature,\n        maxTokens,\n        topP,\n        presencePenalty,\n        frequencyPenalty,\n        maxContextTokens: 2000,\n      };\n\n      const result = await api.ai.generateWithContext(\n        projectId, \n        chapterId, \n        selection.anchor.offset, \n        currentModel, \n        params\n      );\n\n      // 更新該選項\n      setGenerationOptions(prev => \n        prev.map(opt => \n          opt.id === optionId \n            ? { ...opt, text: result, timestamp: new Date() }\n            : opt\n        )\n      );\n\n      dispatch(addNotification({\n        type: 'success',\n        title: '重新生成完成',\n        message: '已更新該版本的內容',\n        duration: 2000,\n      }));\n\n    } catch (error) {\n      console.error('重新生成失敗:', error);\n      dispatch(addNotification({\n        type: 'error',\n        title: '重新生成失敗',\n        message: error instanceof Error ? error.message : '重新生成時發生錯誤',\n        duration: 3000,\n      }));\n    }\n  }, [generationOptions, currentModel, editor, projectId, chapterId, maxTokens, topP, presencePenalty, frequencyPenalty, dispatch]);\n\n  // 清除所有選項\n  const handleClearOptions = useCallback(() => {\n    setGenerationOptions([]);\n    // 清除選項，暫時不更新進度\n  }, [updateProgress]);\n  \n  return (\n    <div className=\"bg-cosmic-900 border-t border-cosmic-700 p-4\">\n      <div className=\"mb-4\">\n        <h3 className=\"text-lg font-medium text-gold-400 mb-2\">AI 續寫</h3>\n        <p className=\"text-sm text-gray-400\">\n          使用 AI 協助您繼續寫作。請先將游標放在您希望 AI 續寫的位置。\n        </p>\n      </div>\n      \n      {/* 模型選擇和基本參數設置 */}\n      <div className=\"space-y-4 mb-4\">\n        <div>\n          <label className=\"block text-sm text-gray-300 mb-1\">AI 模型</label>\n          <select\n            value={currentModel || ''}\n            onChange={(e) => dispatch(setCurrentModel(e.target.value))}\n            className=\"w-full bg-cosmic-800 border border-cosmic-700 rounded-lg px-3 py-2 text-white text-sm focus:outline-none focus:ring-2 focus:ring-gold-500\"\n            disabled={isGenerating || availableModels.length === 0}\n          >\n            <option value=\"\">請選擇模型...</option>\n            {availableModels.map(model => (\n              <option key={model} value={model}>{model}</option>\n            ))}\n          </select>\n          {!isOllamaConnected && (\n            <p className=\"text-xs text-red-400 mt-1\">\n              Ollama 服務未連接，請在 AI 設定中檢查連接狀態\n            </p>\n          )}\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-sm text-gray-300 mb-1\">生成數量 ({generationCount})</label>\n            <input\n              type=\"range\"\n              min=\"1\"\n              max=\"5\"\n              step=\"1\"\n              value={generationCount}\n              onChange={(e) => setGenerationCount(parseInt(e.target.value))}\n              className=\"w-full\"\n              disabled={isGenerating}\n            />\n          </div>\n          \n          <div>\n            <label className=\"block text-sm text-gray-300 mb-1\">生成長度 ({maxTokens})</label>\n            <input\n              type=\"range\"\n              min=\"50\"\n              max=\"500\"\n              step=\"10\"\n              value={maxTokens}\n              onChange={(e) => setMaxTokens(parseInt(e.target.value))}\n              className=\"w-full\"\n              disabled={isGenerating}\n            />\n          </div>\n        </div>\n        \n        <div>\n          <label className=\"block text-sm text-gray-300 mb-1\">創意度 ({temperature.toFixed(1)})</label>\n          <input\n            type=\"range\"\n            min=\"0.1\"\n            max=\"1.5\"\n            step=\"0.1\"\n            value={temperature}\n            onChange={(e) => setTemperature(parseFloat(e.target.value))}\n            className=\"w-full\"\n            disabled={isGenerating}\n          />\n          <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n            <span>保守</span>\n            <span>平衡</span>\n            <span>創意</span>\n          </div>\n        </div>\n        \n        {/* 進階設定 */}\n        <div>\n          <button\n            onClick={() => setShowAdvancedSettings(!showAdvancedSettings)}\n            className=\"text-sm text-gold-400 hover:text-gold-300 transition-colors\"\n            disabled={isGenerating}\n          >\n            {showAdvancedSettings ? '隱藏' : '顯示'}進階設定\n          </button>\n          \n          {showAdvancedSettings && (\n            <div className=\"mt-3 space-y-3 p-3 bg-cosmic-800 rounded-lg border border-cosmic-700\">\n              <div>\n                <label className=\"block text-sm text-gray-300 mb-1\">Top-P ({topP.toFixed(1)})</label>\n                <input\n                  type=\"range\"\n                  min=\"0.1\"\n                  max=\"1.0\"\n                  step=\"0.1\"\n                  value={topP}\n                  onChange={(e) => setTopP(parseFloat(e.target.value))}\n                  className=\"w-full\"\n                  disabled={isGenerating}\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-3\">\n                <div>\n                  <label className=\"block text-sm text-gray-300 mb-1\">存在懲罰 ({presencePenalty.toFixed(1)})</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={presencePenalty}\n                    onChange={(e) => setPresencePenalty(parseFloat(e.target.value))}\n                    className=\"w-full\"\n                    disabled={isGenerating}\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm text-gray-300 mb-1\">頻率懲罰 ({frequencyPenalty.toFixed(1)})</label>\n                  <input\n                    type=\"range\"\n                    min=\"0\"\n                    max=\"2\"\n                    step=\"0.1\"\n                    value={frequencyPenalty}\n                    onChange={(e) => setFrequencyPenalty(parseFloat(e.target.value))}\n                    className=\"w-full\"\n                    disabled={isGenerating}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* 生成按鈕 */}\n      <div className=\"flex justify-center mb-4\">\n        <button\n          onClick={handleGenerate}\n          disabled={isGenerating || !currentModel || !isOllamaConnected}\n          className=\"btn-primary px-6 py-2\"\n        >\n          {isGenerating ? '生成中...' : '開始 AI 續寫'}\n        </button>\n        \n        {isGenerating && (\n          <button\n            onClick={handleCancel}\n            className=\"btn-secondary ml-2\"\n          >\n            取消\n          </button>\n        )}\n      </div>\n      \n      {/* 進度指示器 */}\n      {isGenerating && currentProgress && (\n        <div className=\"mb-4 p-3 bg-cosmic-800 rounded-lg border border-cosmic-700\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-300\">{currentProgress.currentStep || currentProgress.description || currentProgress.title}</span>\n            <span className=\"text-sm text-gold-400\">{currentProgress.progress}%</span>\n          </div>\n          \n          <div className=\"h-2 bg-cosmic-900 rounded-full overflow-hidden mb-2\">\n            <div \n              className={`h-full transition-all duration-500 ${\n                currentProgress.status === 'completed' ? 'bg-green-500' : \n                currentProgress.status === 'running' ? 'bg-gold-500' : \n                'bg-blue-500'\n              }`}\n              style={{ width: `${currentProgress.progress}%` }}\n            ></div>\n          </div>\n          \n          <div className=\"flex items-center justify-between text-xs text-gray-400\">\n            <div className=\"flex items-center space-x-4\">\n              <span className={`flex items-center ${currentProgress.status === 'pending' ? 'text-blue-400' : 'text-gray-500'}`}>\n                <div className={`w-2 h-2 rounded-full mr-1 ${currentProgress.status === 'pending' ? 'bg-blue-400 animate-pulse' : 'bg-gray-500'}`}></div>\n                準備\n              </span>\n              <span className={`flex items-center ${currentProgress.status === 'running' ? 'text-gold-400' : 'text-gray-500'}`}>\n                <div className={`w-2 h-2 rounded-full mr-1 ${currentProgress.status === 'running' ? 'bg-gold-400 animate-pulse' : 'bg-gray-500'}`}></div>\n                生成\n              </span>\n              <span className={`flex items-center ${currentProgress.status === 'running' && currentProgress.progress > 50 ? 'text-purple-400' : 'text-gray-500'}`}>\n                <div className={`w-2 h-2 rounded-full mr-1 ${currentProgress.status === 'running' && currentProgress.progress > 50 ? 'bg-purple-400 animate-pulse' : 'bg-gray-500'}`}></div>\n                處理\n              </span>\n              <span className={`flex items-center ${currentProgress.status === 'completed' ? 'text-green-400' : 'text-gray-500'}`}>\n                <div className={`w-2 h-2 rounded-full mr-1 ${currentProgress.status === 'completed' ? 'bg-green-400' : 'bg-gray-500'}`}></div>\n                完成\n              </span>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* 生成結果 */}\n      {generationOptions.length > 0 && (\n        <div className=\"mt-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <h4 className=\"text-sm font-medium text-gold-400\">\n              生成結果 ({generationOptions.length} 個版本)\n            </h4>\n            <button\n              onClick={handleClearOptions}\n              className=\"text-xs text-gray-400 hover:text-gray-300 transition-colors\"\n            >\n              清除全部\n            </button>\n          </div>\n          \n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {generationOptions.map((option, index) => (\n              <div \n                key={option.id}\n                className={`bg-cosmic-800 border rounded-lg p-4 transition-all duration-200 ${\n                  option.selected \n                    ? 'border-green-500 bg-green-900/20' \n                    : 'border-cosmic-700 hover:border-gold-500'\n                }`}\n              >\n                {/* 選項標題 */}\n                <div className=\"flex items-center justify-between mb-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs font-medium text-gold-400\">版本 {index + 1}</span>\n                    <span className=\"text-xs text-gray-400\">\n                      溫度: {option.temperature.toFixed(1)}\n                    </span>\n                    {option.selected && (\n                      <span className=\"text-xs text-green-400 flex items-center\">\n                        <svg className=\"w-3 h-3 mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                          <path fillRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clipRule=\"evenodd\" />\n                        </svg>\n                        已使用\n                      </span>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-1\">\n                    <button\n                      onClick={() => handleRegenerateOption(option.id)}\n                      className=\"text-xs text-blue-400 hover:text-blue-300 transition-colors p-1\"\n                      title=\"重新生成此版本\"\n                    >\n                      <svg className=\"w-3 h-3\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n                      </svg>\n                    </button>\n                    \n                    <span className=\"text-xs text-gray-500\">\n                      {option.timestamp.toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n                \n                {/* 生成的文本 */}\n                <div className=\"mb-3 text-white text-sm leading-relaxed whitespace-pre-wrap max-h-32 overflow-y-auto\">\n                  {option.text}\n                </div>\n                \n                {/* 操作按鈕 */}\n                <div className=\"flex justify-end space-x-2\">\n                  <button\n                    onClick={() => navigator.clipboard.writeText(option.text)}\n                    className=\"text-xs text-gray-400 hover:text-gray-300 transition-colors px-2 py-1\"\n                  >\n                    複製\n                  </button>\n                  \n                  <button\n                    onClick={() => handleApplyOption(option)}\n                    className={`text-xs px-3 py-1 rounded transition-colors ${\n                      option.selected\n                        ? 'bg-green-600 text-white cursor-not-allowed'\n                        : 'bg-gold-600 hover:bg-gold-500 text-white'\n                    }`}\n                    disabled={option.selected}\n                  >\n                    {option.selected ? '已使用' : '使用此版本'}\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          {/* 批量操作 */}\n          <div className=\"mt-3 pt-3 border-t border-cosmic-700\">\n            <div className=\"flex justify-between items-center text-xs text-gray-400\">\n              <span>提示：您可以重新生成任何版本或複製文本</span>\n              <button\n                onClick={handleGenerate}\n                className=\"text-gold-400 hover:text-gold-300 transition-colors\"\n                disabled={isGenerating}\n              >\n                重新生成全部\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AIWritingPanel;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/ChapterBatchActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/ChapterList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/ChapterNotes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/EditorSettingsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/EditorToolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/ReadingModeOverlay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/SimpleAIWritingPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Editor/SlateEditor.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2183,2186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2183,2186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2629,2632],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2629,2632],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3707,3710],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3707,3710],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6525,6528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6525,6528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":96,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":99,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6554,6557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6554,6557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7255,7258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7255,7258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7284,7287],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7284,7287],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useCallback, useMemo } from 'react';\nimport { createEditor, Descendant, Editor, Transforms, Range } from 'slate';\nimport { Slate, Editable, withReact, ReactEditor } from 'slate-react';\nimport { withHistory } from 'slate-history';\nimport { useAppSelector } from '../../hooks/redux';\nimport { selectEditorSettings } from '../../store/slices/editorSlice';\n\n// 定義編輯器節點類型\ntype CustomElement = {\n  type: 'paragraph' | 'heading' | 'quote' | 'list-item';\n  children: CustomText[];\n  level?: number; // 用於標題級別\n};\n\ntype CustomText = {\n  text: string;\n  bold?: boolean;\n  italic?: boolean;\n  underline?: boolean;\n  code?: boolean;\n};\n\ndeclare module 'slate' {\n  interface CustomTypes {\n    Editor: ReactEditor;\n    Element: CustomElement;\n    Text: CustomText;\n  }\n}\n\ninterface SlateEditorProps {\n  value: Descendant[];\n  onChange: (value: Descendant[]) => void;\n  placeholder?: string;\n  autoFocus?: boolean;\n  onSave?: () => void;\n}\n\nconst SlateEditor: React.FC<SlateEditorProps> = ({\n  value,\n  onChange,\n  placeholder = '開始寫作...',\n  autoFocus = false,\n  onSave,\n}) => {\n  const editor = useMemo(() => withHistory(withReact(createEditor())), []);\n  const settings = useAppSelector(selectEditorSettings);\n\n  // 處理鍵盤快捷鍵\n  const handleKeyDown = useCallback((event: React.KeyboardEvent) => {\n    if (event.ctrlKey || event.metaKey) {\n      switch (event.key) {\n        case 'b':\n          event.preventDefault();\n          toggleMark(editor, 'bold');\n          break;\n        case 'i':\n          event.preventDefault();\n          toggleMark(editor, 'italic');\n          break;\n        case 'u':\n          event.preventDefault();\n          toggleMark(editor, 'underline');\n          break;\n        case '`':\n          event.preventDefault();\n          toggleMark(editor, 'code');\n          break;\n        case 's':\n          event.preventDefault();\n          if (onSave) {\n            onSave();\n          }\n          break;\n      }\n    }\n\n    // 處理 Enter 鍵\n    if (event.key === 'Enter') {\n      const { selection } = editor;\n      if (selection && Range.isCollapsed(selection)) {\n        const [match] = Editor.nodes(editor, {\n          match: (n) => Editor.isBlock(editor, n as any),\n        });\n\n        if (match) {\n          const [block] = match as [CustomElement, number[]];\n          if ('type' in block && block.type === 'quote') {\n            event.preventDefault();\n            Transforms.insertNodes(editor, {\n              type: 'paragraph',\n              children: [{ text: '' }],\n            });\n          }\n        }\n      }\n    }\n  }, [editor, onSave]);\n\n  // 渲染元素\n  const renderElement = useCallback((props: any) => {\n    switch (props.element.type) {\n      case 'heading': {\n        const level = props.element.level || 1;\n        const HeadingTag = `h${Math.min(level, 6)}` as keyof JSX.IntrinsicElements;\n        return (\n          <HeadingTag\n            {...props.attributes}\n            className={`text-${4 - Math.min(level, 3)}xl font-bold text-gold-400 mb-4`}\n          >\n            {props.children}\n          </HeadingTag>\n        );\n      }\n      case 'quote':\n        return (\n          <blockquote\n            {...props.attributes}\n            className=\"border-l-4 border-gold-500 pl-4 italic text-gray-300 my-4\"\n          >\n            {props.children}\n          </blockquote>\n        );\n      case 'list-item':\n        return (\n          <li {...props.attributes} className=\"ml-4 mb-2\">\n            {props.children}\n          </li>\n        );\n      default:\n        return (\n          <p {...props.attributes} className=\"mb-4 leading-relaxed\">\n            {props.children}\n          </p>\n        );\n    }\n  }, []);\n\n  // 渲染葉子節點\n  const renderLeaf = useCallback((props: any) => {\n    let children = props.children;\n\n    if (props.leaf.bold) {\n      children = <strong className=\"font-bold\">{children}</strong>;\n    }\n\n    if (props.leaf.italic) {\n      children = <em className=\"italic\">{children}</em>;\n    }\n\n    if (props.leaf.underline) {\n      children = <u className=\"underline\">{children}</u>;\n    }\n\n    if (props.leaf.code) {\n      children = (\n        <code className=\"bg-cosmic-800 px-2 py-1 rounded text-sm font-mono text-gold-400\">\n          {children}\n        </code>\n      );\n    }\n\n    return <span {...props.attributes}>{children}</span>;\n  }, []);\n\n  // 計算編輯器樣式\n  const editorStyle = {\n    minHeight: '100vh', // 確保編輯器有足夠高度產生滾動\n    fontFamily: settings.fontFamily,\n    fontSize: `${settings.fontSize}px`,\n    fontWeight: settings.fontWeight,\n    lineHeight: settings.lineHeight,\n    letterSpacing: `${settings.letterSpacing}px`,\n    textAlign: settings.textAlign,\n    color: settings.textColor,\n    backgroundColor: settings.backgroundColor,\n    whiteSpace: settings.wordWrap ? 'pre-wrap' : 'pre',\n  };\n\n\n  return (\n    <div \n      className=\"w-full transition-all duration-300\"\n      style={{ \n        backgroundColor: settings.backgroundColor\n      }}\n    >\n      <Slate editor={editor} initialValue={value} onChange={onChange}>\n        <div className=\"w-full\">\n          {/* 行號顯示 */}\n          {settings.showLineNumbers && (\n            <div className=\"absolute left-0 top-0 bottom-0 w-12 bg-cosmic-800/50 border-r border-cosmic-700 text-xs text-gray-500 p-2\">\n              {/* 行號實現可以在後續版本中添加 */}\n            </div>\n          )}\n          \n          <Editable\n            renderElement={renderElement}\n            renderLeaf={renderLeaf}\n            placeholder={placeholder}\n            spellCheck={settings.spellCheck}\n            autoFocus={autoFocus}\n            onKeyDown={handleKeyDown}\n            className={`p-6 focus:outline-none transition-all duration-300 ${\n              settings.showLineNumbers ? 'pl-16' : ''\n            }`}\n            style={editorStyle}\n          />\n        </div>\n      </Slate>\n    </div>\n  );\n};\n\n// 輔助函數：切換文本標記\nconst toggleMark = (editor: Editor, format: keyof CustomText) => {\n  const isActive = isMarkActive(editor, format);\n\n  if (isActive) {\n    Editor.removeMark(editor, format);\n  } else {\n    Editor.addMark(editor, format, true);\n  }\n};\n\n// 輔助函數：檢查標記是否激活\nconst isMarkActive = (editor: Editor, format: keyof CustomText) => {\n  const marks = Editor.marks(editor);\n  return marks ? marks[format as keyof typeof marks] === true : false;\n};\n\n// 輔助函數：切換塊級元素\nconst toggleBlock = (editor: Editor, format: CustomElement['type']) => {\n  const isActive = isBlockActive(editor, format);\n  const isList = format === 'list-item';\n\n  Transforms.unwrapNodes(editor, {\n    match: (n): n is CustomElement => Editor.isBlock(editor, n as any) && 'type' in n && (n as any).type === 'list-item',\n    split: true,\n  });\n\n  const newProperties: Partial<CustomElement> = {\n    type: isActive ? 'paragraph' : isList ? 'list-item' : format,\n  };\n\n  Transforms.setNodes(editor, newProperties);\n\n  if (!isActive && isList) {\n    const block: CustomElement = { type: 'list-item', children: [] };\n    Transforms.wrapNodes(editor, block);\n  }\n};\n\n// 輔助函數：檢查塊級元素是否激活\nconst isBlockActive = (editor: Editor, format: CustomElement['type']) => {\n  const { selection } = editor;\n  if (!selection) return false;\n\n  const [match] = Array.from(\n    Editor.nodes(editor, {\n      at: Editor.unhangRange(editor, selection),\n      match: (n): n is CustomElement => Editor.isBlock(editor, n as any) && 'type' in n && (n as any).type === format,\n    })\n  );\n\n  return !!match;\n};\n\nexport default SlateEditor;\nexport { toggleMark, toggleBlock, isMarkActive, isBlockActive };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Error/ErrorDisplay.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Error/GlobalErrorHandler.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2820,2823],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2820,2823],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { addError, selectActiveErrors, selectCriticalErrors, cleanupOldErrors } from '../../store/slices/errorSlice';\nimport { ERROR_CODES } from '../../types/error';\nimport ErrorDisplay from './ErrorDisplay';\nimport { isElectron } from '../../api';\n\ninterface GlobalErrorHandlerProps {\n  children: React.ReactNode;\n}\n\nconst GlobalErrorHandler: React.FC<GlobalErrorHandlerProps> = ({ children }) => {\n  const dispatch = useAppDispatch();\n  const activeErrors = useAppSelector(selectActiveErrors);\n  const criticalErrors = useAppSelector(selectCriticalErrors);\n\n  // 設置全域錯誤處理\n  useEffect(() => {\n    // 處理未捕獲的 JavaScript 錯誤\n    const handleError = (event: ErrorEvent) => {\n      dispatch(addError({\n        code: ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        message: '應用程式發生未預期的錯誤',\n        description: event.message,\n        severity: 'high',\n        category: 'system',\n        stack: event.error?.stack,\n        context: {\n          filename: event.filename,\n          lineno: event.lineno,\n          colno: event.colno\n        }\n      }));\n    };\n\n    // 處理未捕獲的 Promise 拒絕\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      dispatch(addError({\n        code: ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        message: '應用程式發生未處理的異步錯誤',\n        description: event.reason?.message || String(event.reason),\n        severity: 'high',\n        category: 'system',\n        stack: event.reason?.stack,\n        context: {\n          reason: event.reason\n        }\n      }));\n    };\n\n    // 監聽網路狀態變化\n    const handleOnline = () => {\n      // 網路恢復時可以清除相關錯誤\n    };\n\n    const handleOffline = () => {\n      dispatch(addError({\n        code: ERROR_CODES.NETWORK_OFFLINE,\n        message: '網路連線中斷',\n        description: '偵測到網路連線中斷，部分功能可能無法正常使用',\n        severity: 'medium',\n        category: 'network'\n      }));\n    };\n\n    // 註冊事件監聽器\n    window.addEventListener('error', handleError);\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    // 清理函數\n    return () => {\n      window.removeEventListener('error', handleError);\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, [dispatch]);\n\n  // 定期清理舊錯誤\n  useEffect(() => {\n    const cleanup = setInterval(() => {\n      // 清理 5 分鐘前的錯誤\n      dispatch(cleanupOldErrors(5 * 60 * 1000));\n    }, 60 * 1000); // 每分鐘檢查一次\n\n    return () => clearInterval(cleanup);\n  }, [dispatch]);\n\n  // 監聽 Electron 主進程錯誤\n  useEffect(() => {\n    const handleMainProcessError = (error: any) => {\n      dispatch(addError({\n        code: ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        message: '主進程發生錯誤',\n        description: error.message,\n        severity: 'critical',\n        category: 'system',\n        context: error\n      }));\n    };\n\n    // 如果是 Electron 環境，監聽主進程錯誤\n    if (isElectron() && typeof window !== 'undefined' && window.electronAPI?.onError) {\n      try {\n        window.electronAPI.onError(handleMainProcessError);\n      } catch (error) {\n        console.warn('設置主進程錯誤監聽器失敗:', error);\n      }\n    }\n  }, [dispatch]);\n\n  return (\n    <>\n      {children}\n      \n      {/* 錯誤顯示容器 */}\n      <div className=\"fixed top-4 right-4 z-50 space-y-2 max-w-md\">\n        {/* 顯示關鍵錯誤 */}\n        {criticalErrors.map((error) => (\n          <ErrorDisplay\n            key={error.id}\n            error={error}\n            className=\"animate-slide-in-right\"\n          />\n        ))}\n        \n        {/* 顯示其他活躍錯誤（最多3個） */}\n        {activeErrors\n          .filter(error => error.severity !== 'critical')\n          .slice(0, 3)\n          .map((error) => (\n            <ErrorDisplay\n              key={error.id}\n              error={error}\n              compact={true}\n              className=\"animate-slide-in-right\"\n            />\n          ))}\n        \n        {/* 如果有更多錯誤，顯示摺疊指示 */}\n        {activeErrors.filter(error => error.severity !== 'critical').length > 3 && (\n          <div className=\"bg-cosmic-800/80 backdrop-blur-sm border border-cosmic-600 rounded-lg p-2 text-center\">\n            <span className=\"text-sm text-gray-400\">\n              還有 {activeErrors.filter(error => error.severity !== 'critical').length - 3} 個錯誤...\n            </span>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default GlobalErrorHandler;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/FeatureShowcase.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/HelpButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/HelpCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3489,3492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3489,3492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { tutorialIndex, TutorialId } from '../../data/tutorialSteps';\nimport { categoryNames, searchFAQ } from '../../data/faqData';\nimport { useTutorial } from '../Tutorial/TutorialOverlay';\nimport CosmicButton from '../UI/CosmicButton';\nimport { useNotification } from '../UI/NotificationSystem';\nimport UserManual from './UserManual';\nimport QuickStartGuide from './QuickStartGuide';\n\ninterface HelpCenterProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport const HelpCenter: React.FC<HelpCenterProps> = ({ isOpen, onClose }) => {\n  const [activeTab, setActiveTab] = useState<'faq' | 'shortcuts' | 'manual' | 'quickstart'>('quickstart');\n  const [selectedCategory, setSelectedCategory] = useState<string>('all');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [expandedFAQ, setExpandedFAQ] = useState<string | null>(null);\n  const [showUserManual, setShowUserManual] = useState(false);\n  const [showQuickStart, setShowQuickStart] = useState(false);\n  \n  const { startTutorial, resetTutorials: _resetTutorials } = useTutorial();\n  const notification = useNotification();\n\n  // 使用新的搜索函數\n  const filteredFAQ = searchFAQ(searchQuery, selectedCategory === 'all' ? undefined : selectedCategory);\n\n  // 鍵盤快捷鍵資料\n  const shortcuts = [\n    { key: 'Ctrl + S', description: '儲存當前章節' },\n    { key: 'Ctrl + N', description: '創建新章節' },\n    { key: 'Ctrl + D', description: '複製當前行' },\n    { key: 'Ctrl + /', description: '切換註釋' },\n    { key: 'Ctrl + F', description: '搜尋文字' },\n    { key: 'Ctrl + H', description: '取代文字' },\n    { key: 'Ctrl + Z', description: '撤銷' },\n    { key: 'Ctrl + Y', description: '重做' },\n    { key: 'F11', description: '切換全螢幕' },\n    { key: 'Ctrl + ,', description: '開啟設定' },\n    { key: 'Ctrl + Shift + P', description: '開啟命令面板' },\n    { key: 'Alt + A', description: '開啟 AI 續寫面板' }\n  ];\n\n  const handleStartTutorial = (tutorialId: TutorialId) => {\n    startTutorial(tutorialId);\n    onClose();\n    notification.info('教學開始', `正在開始「${tutorialIndex[tutorialId].title}」教學`);\n  };\n\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 z-50 flex items-center justify-center p-4\">\n      <div className=\"bg-cosmic-900/95 backdrop-blur-sm border border-gold-500/30 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden\">\n        {/* 標題欄 */}\n        <div className=\"flex items-center justify-between p-6 border-b border-cosmic-700\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-2xl\">📚</div>\n            <h2 className=\"text-2xl font-cosmic text-gold-400\">幫助中心</h2>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-white transition-colors p-2\"\n          >\n            <svg className=\"w-6 h-6\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n\n        {/* 標籤頁 */}\n        <div className=\"flex border-b border-cosmic-700 overflow-x-auto\">\n          {[\n            { id: 'quickstart', label: '快速入門', icon: '🚀' },\n            { id: 'manual', label: '使用手冊', icon: '📖' },\n            { id: 'faq', label: '常見問題', icon: '❓' },\n            { id: 'shortcuts', label: '快捷鍵', icon: '⌨️' }\n          ].map(tab => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 px-6 py-3 transition-colors ${\n                activeTab === tab.id\n                  ? 'bg-gold-500/20 text-gold-400 border-b-2 border-gold-500'\n                  : 'text-gray-400 hover:text-white hover:bg-cosmic-800/50'\n              }`}\n            >\n              <span>{tab.icon}</span>\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </div>\n\n        {/* 內容區域 */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\n          {/* 快速入門 */}\n          {activeTab === 'quickstart' && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-xl font-semibold text-white mb-2\">快速入門指南</h3>\n                <p className=\"text-gray-400\">5 分鐘快速了解創世紀元的核心功能</p>\n              </div>\n\n              <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"text-lg font-semibold text-white mb-2\">互動式快速入門</h4>\n                    <p className=\"text-gray-400\">\n                      跟隨步驟式指南，快速掌握專案創建、編輯器使用、角色管理和 AI 輔助功能。\n                    </p>\n                  </div>\n                  <CosmicButton\n                    onClick={() => setShowQuickStart(true)}\n                    className=\"ml-4\"\n                  >\n                    開始入門\n                  </CosmicButton>\n                </div>\n              </div>\n\n              <div className=\"bg-blue-900/20 border border-blue-500/30 rounded-lg p-6\">\n                <h4 className=\"text-blue-400 font-semibold mb-4\">💡 如何開始教學</h4>\n                <div className=\"space-y-3 text-gray-300 text-sm\">\n                  <p>• <strong>首次使用教學</strong>：點擊右下角的 ❓ 幫助按鈕 → 互動教學 → 首次使用教學</p>\n                  <p>• <strong>編輯器教學</strong>：在專案編輯器頁面，點擊 ❓ 幫助按鈕 → 互動教學 → 編輯器使用教學</p>\n                  <p>• <strong>角色管理教學</strong>：在角色管理頁面，點擊 ❓ 幫助按鈕 → 互動教學 → 角色管理教學</p>\n                  <p>• <strong>AI 輔助教學</strong>：在專案編輯器頁面，點擊 ❓ 幫助按鈕 → 互動教學 → AI 輔助教學</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* 使用手冊 */}\n          {activeTab === 'manual' && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-xl font-semibold text-white mb-2\">詳細使用手冊</h3>\n                <p className=\"text-gray-400\">完整的功能說明和使用指南</p>\n              </div>\n\n              <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h4 className=\"text-lg font-semibold text-white mb-2\">完整使用手冊</h4>\n                    <p className=\"text-gray-400\">\n                      詳細的功能說明、操作步驟和最佳實踐，幫助您充分利用創世紀元的所有功能。\n                    </p>\n                  </div>\n                  <CosmicButton\n                    onClick={() => setShowUserManual(true)}\n                    className=\"ml-4\"\n                  >\n                    查看手冊\n                  </CosmicButton>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">📝</div>\n                  <h4 className=\"text-white font-semibold mb-2\">專案管理</h4>\n                  <p className=\"text-gray-400 text-sm\">創建、管理和組織您的創作專案</p>\n                </div>\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">✍️</div>\n                  <h4 className=\"text-white font-semibold mb-2\">寫作編輯</h4>\n                  <p className=\"text-gray-400 text-sm\">使用編輯器進行創作和文字處理</p>\n                </div>\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">🤖</div>\n                  <h4 className=\"text-white font-semibold mb-2\">AI 輔助</h4>\n                  <p className=\"text-gray-400 text-sm\">有效使用 AI 功能提升創作效率</p>\n                </div>\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">👥</div>\n                  <h4 className=\"text-white font-semibold mb-2\">角色管理</h4>\n                  <p className=\"text-gray-400 text-sm\">創建和管理故事中的角色</p>\n                </div>\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">⚙️</div>\n                  <h4 className=\"text-white font-semibold mb-2\">設定配置</h4>\n                  <p className=\"text-gray-400 text-sm\">個人化設定和系統配置</p>\n                </div>\n                <div className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg p-4 text-center\">\n                  <div className=\"text-3xl mb-3\">🔧</div>\n                  <h4 className=\"text-white font-semibold mb-2\">故障排除</h4>\n                  <p className=\"text-gray-400 text-sm\">解決常見問題和技術支援</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n\n          {/* 常見問題 */}\n          {activeTab === 'faq' && (\n            <div className=\"space-y-6\">\n              {/* 搜尋和篩選 */}\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <div className=\"flex-1\">\n                  <input\n                    type=\"text\"\n                    placeholder=\"搜尋問題...\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className=\"w-full px-4 py-2 bg-cosmic-800 border border-cosmic-600 rounded-lg text-white placeholder-gray-400 focus:border-gold-500 focus:outline-none\"\n                  />\n                </div>\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => setSelectedCategory(e.target.value)}\n                  className=\"px-4 py-2 bg-cosmic-800 border border-cosmic-600 rounded-lg text-white focus:border-gold-500 focus:outline-none\"\n                >\n                  <option value=\"all\">所有分類</option>\n                  {Object.entries(categoryNames).map(([key, name]) => (\n                    <option key={key} value={key}>{name}</option>\n                  ))}\n                </select>\n              </div>\n\n              {/* FAQ 列表 */}\n              <div className=\"space-y-3\">\n                {filteredFAQ.map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"bg-cosmic-800/50 border border-cosmic-600 rounded-lg overflow-hidden\"\n                  >\n                    <button\n                      onClick={() => setExpandedFAQ(expandedFAQ === item.id ? null : item.id)}\n                      className=\"w-full px-4 py-3 text-left flex items-center justify-between hover:bg-cosmic-700/50 transition-colors\"\n                    >\n                      <span className=\"text-white font-medium\">{item.question}</span>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-xs text-gray-400 bg-cosmic-700 px-2 py-1 rounded\">\n                          {categoryNames[item.category]}\n                        </span>\n                        <svg\n                          className={`w-5 h-5 text-gray-400 transform transition-transform ${\n                            expandedFAQ === item.id ? 'rotate-180' : ''\n                          }`}\n                          fill=\"none\"\n                          stroke=\"currentColor\"\n                          viewBox=\"0 0 24 24\"\n                        >\n                          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                        </svg>\n                      </div>\n                    </button>\n                    \n                    {expandedFAQ === item.id && (\n                      <div className=\"px-4 pb-4 text-gray-300 text-sm leading-relaxed border-t border-cosmic-600\">\n                        <div className=\"pt-3\">{item.answer}</div>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n\n              {filteredFAQ.length === 0 && (\n                <div className=\"text-center py-8\">\n                  <div className=\"text-4xl mb-4\">🔍</div>\n                  <p className=\"text-gray-400\">沒有找到相關問題</p>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* 快捷鍵 */}\n          {activeTab === 'shortcuts' && (\n            <div className=\"space-y-6\">\n              <div className=\"text-center mb-8\">\n                <h3 className=\"text-xl font-semibold text-white mb-2\">鍵盤快捷鍵</h3>\n                <p className=\"text-gray-400\">使用快捷鍵提升您的創作效率</p>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {shortcuts.map((shortcut, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 bg-cosmic-800/50 border border-cosmic-600 rounded-lg\"\n                  >\n                    <span className=\"text-gray-300\">{shortcut.description}</span>\n                    <kbd className=\"px-2 py-1 bg-cosmic-700 border border-cosmic-600 rounded text-sm text-gold-400 font-mono\">\n                      {shortcut.key}\n                    </kbd>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"mt-8 p-4 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n                <h4 className=\"text-blue-400 font-semibold mb-2\">💡 提示</h4>\n                <p className=\"text-gray-300 text-sm\">\n                  在 macOS 系統上，請將 Ctrl 替換為 Cmd 鍵。您也可以在設定中自定義快捷鍵。\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* 用戶手冊模態框 */}\n      <UserManual \n        isOpen={showUserManual}\n        onClose={() => setShowUserManual(false)}\n      />\n\n      {/* 快速入門指南模態框 */}\n      <QuickStartGuide\n        isOpen={showQuickStart}\n        onClose={() => setShowQuickStart(false)}\n        onStartTutorial={(tutorialId) => {\n          setShowQuickStart(false);\n          handleStartTutorial(tutorialId as TutorialId);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HelpCenter;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/HelpSystem.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/QuickHelp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/QuickStartGuide.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Help/UserManual.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Layout/Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Layout/Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Layout/Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/AISettingsModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/BackupManagerModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1408,1411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1408,1411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2581,2584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2581,2584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState } from 'react';\nimport { useAppDispatch } from '../../hooks/redux';\nimport { closeModal } from '../../store/slices/uiSlice';\nimport api from '../../api';\n\nconst BackupManagerModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const [isBackingUp, setIsBackingUp] = useState(false);\n  const [isRestoring, setIsRestoring] = useState(false);\n  const [message, setMessage] = useState<{ type: 'success' | 'error' | 'info'; text: string } | null>(null);\n\n  const handleClose = () => {\n    dispatch(closeModal('backupManager'));\n  };\n\n  const handleBackup = async () => {\n    try {\n      setIsBackingUp(true);\n      setMessage({ type: 'info', text: '正在選擇備份位置...' });\n      \n      // 顯示儲存對話框\n      const saveResult = await api.system.showSaveDialog({\n        title: '選擇備份檔案位置',\n        defaultPath: `創世紀元備份_${new Date().toISOString().split('T')[0]}.db`,\n        filters: [\n          { name: '資料庫檔案', extensions: ['db'] },\n          { name: '所有檔案', extensions: ['*'] }\n        ]\n      });\n      \n      if (saveResult.canceled) {\n        setMessage(null);\n        return;\n      }\n      \n      setMessage({ type: 'info', text: '正在建立備份...' });\n      \n      // 調用統一 API 進行備份\n      await api.database.backup(saveResult.filePath || saveResult.file_path);\n      \n      setMessage({ type: 'success', text: `備份已成功建立至：${saveResult.filePath || saveResult.file_path}` });\n    } catch (error: any) {\n      console.error('備份失敗:', error);\n      setMessage({ type: 'error', text: error.message || '備份建立失敗，請稍後再試' });\n    } finally {\n      setIsBackingUp(false);\n    }\n  };\n\n  const handleRestore = async () => {\n    try {\n      setIsRestoring(true);\n      setMessage({ type: 'info', text: '正在選擇備份檔案...' });\n      \n      // 顯示開啟對話框\n      const openResult = await api.system.showOpenDialog({\n        title: '選擇要還原的備份檔案',\n        filters: [\n          { name: '資料庫檔案', extensions: ['db'] },\n          { name: '所有檔案', extensions: ['*'] }\n        ],\n        properties: ['openFile']\n      });\n      \n      const filePaths = openResult.filePaths || openResult.file_paths;\n      if (openResult.canceled || !filePaths || filePaths.length === 0) {\n        setMessage(null);\n        return;\n      }\n      \n      const backupPath = filePaths[0];\n      setMessage({ type: 'info', text: '正在還原備份...' });\n      \n      // 調用統一 API 進行還原\n      await api.database.restore(backupPath);\n      \n      setMessage({ type: 'success', text: '專案已成功從備份還原！頁面將在2秒後重新載入...' });\n      \n      // 重新載入以反映還原的資料\n      setTimeout(() => {\n        window.location.reload();\n      }, 2000);\n    } catch (error: any) {\n      console.error('還原失敗:', error);\n      setMessage({ type: 'error', text: error.message || '還原失敗，請稍後再試' });\n    } finally {\n      setIsRestoring(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-cosmic-900 border border-cosmic-700 rounded-xl shadow-xl w-full max-w-3xl max-h-[90vh] overflow-y-auto\">\n        {/* 標題 */}\n        <div className=\"p-6 border-b border-cosmic-700 flex items-center justify-between\">\n          <h2 className=\"text-xl font-cosmic text-gold-500\">💿 備份還原管理</h2>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-400 hover:text-white\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* 內容 */}\n        <div className=\"p-6\">\n          {/* 訊息顯示區域 */}\n          {message && (\n            <div className={`mb-6 p-4 rounded-lg border-l-4 ${\n              message.type === 'success' ? 'bg-green-500/10 border-green-500 text-green-400' :\n              message.type === 'error' ? 'bg-red-500/10 border-red-500 text-red-400' :\n              'bg-blue-500/10 border-blue-500 text-blue-400'\n            }`}>\n              <p className=\"text-sm\">{message.text}</p>\n            </div>\n          )}\n\n          <div className=\"text-center py-8\">\n            <div className=\"text-6xl mb-4\">💾</div>\n            <h3 className=\"text-xl font-cosmic text-gold-400 mb-4\">備份還原功能</h3>\n            <p className=\"text-gray-300 mb-6\">\n              管理您的專案備份，確保創作成果永不丟失。\n            </p>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 max-w-xl mx-auto\">\n              <div className=\"card text-center p-4\">\n                <div className=\"text-3xl mb-2\">📦</div>\n                <h4 className=\"font-medium text-gold-400 mb-2\">建立備份</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">\n                  備份當前所有專案資料\n                </p>\n                <button \n                  onClick={handleBackup}\n                  disabled={isBackingUp || isRestoring}\n                  className=\"btn-primary w-full disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isBackingUp ? (\n                    <span className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                      備份中...\n                    </span>\n                  ) : (\n                    '立即備份'\n                  )}\n                </button>\n              </div>\n              <div className=\"card text-center p-4\">\n                <div className=\"text-3xl mb-2\">📂</div>\n                <h4 className=\"font-medium text-gold-400 mb-2\">還原備份</h4>\n                <p className=\"text-sm text-gray-400 mb-3\">\n                  從備份檔案還原專案\n                </p>\n                <button \n                  onClick={handleRestore}\n                  disabled={isBackingUp || isRestoring}\n                  className=\"btn-secondary w-full disabled:opacity-50 disabled:cursor-not-allowed\"\n                >\n                  {isRestoring ? (\n                    <span className=\"flex items-center justify-center\">\n                      <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-current mr-2\"></div>\n                      還原中...\n                    </span>\n                  ) : (\n                    '選擇備份檔案'\n                  )}\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* 底部按鈕 */}\n        <div className=\"p-6 border-t border-cosmic-700 flex justify-end\">\n          <button\n            onClick={handleClose}\n            className=\"btn-secondary\"\n          >\n            關閉\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BackupManagerModal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/ChapterManageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/CreateChapterModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/CreateProjectModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":269,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":269,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6399,6402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6399,6402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { createProject } from '../../store/slices/projectsSlice';\nimport { closeModal } from '../../store/slices/uiSlice';\nimport { fetchAvailableModels } from '../../store/slices/aiSlice';\nimport { fetchAllTemplates } from '../../store/slices/templatesSlice';\n\ninterface ProjectType {\n  id: 'isekai' | 'school' | 'scifi' | 'fantasy';\n  name: string;\n  icon: string;\n  description: string;\n  color: string;\n}\n\nconst projectTypes: ProjectType[] = [\n  {\n    id: 'isekai',\n    name: '異世界',\n    icon: '🌟',\n    description: '主角穿越或轉生到異世界的冒險故事',\n    color: 'from-purple-500 to-pink-500',\n  },\n  {\n    id: 'school',\n    name: '校園',\n    icon: '🏫',\n    description: '以學校為背景的青春戀愛或成長故事',\n    color: 'from-blue-500 to-cyan-500',\n  },\n  {\n    id: 'scifi',\n    name: '科幻',\n    icon: '🚀',\n    description: '探索未來科技和太空冒險的故事',\n    color: 'from-green-500 to-teal-500',\n  },\n  {\n    id: 'fantasy',\n    name: '奇幻',\n    icon: '⚔️',\n    description: '充滿魔法和神秘生物的奇幻世界冒險',\n    color: 'from-orange-500 to-red-500',\n  },\n];\n\ninterface TemplateSettings {\n  // 異世界設定\n  levelSystem?: string;\n  magicSystem?: string;\n  reincarnation?: string;\n  \n  // 校園設定\n  schoolName?: string;\n  schoolType?: string;\n  \n  // 科幻設定\n  techLevel?: string;\n  worldSetting?: string;\n  \n  // 奇幻設定\n  races?: string;\n}\n\ninterface AISettings {\n  model: string;\n  temperature: number;\n  topP: number;\n  maxTokens: number;\n}\n\nconst CreateProjectModal: React.FC = () => {\n  console.log('CreateProjectModal 被渲染');\n  const dispatch = useAppDispatch();\n  const { availableModels, isOllamaConnected } = useAppSelector(state => state.ai);\n  \n  const [step, setStep] = useState<1 | 2 | 3>(1);\n  const [projectName, setProjectName] = useState('');\n  const [projectDescription, setProjectDescription] = useState('');\n  const [selectedType, setSelectedType] = useState<ProjectType['id'] | null>(null);\n  \n  // 模板設定\n  const [templateSettings, setTemplateSettings] = useState<TemplateSettings>({});\n  \n  // AI 設定\n  const [aiSettings, setAiSettings] = useState<AISettings>({\n    model: 'llama3',\n    temperature: 0.7,\n    topP: 0.9,\n    maxTokens: 200,\n  });\n  \n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [errors, setErrors] = useState<{\n    name?: string;\n    type?: string;\n    model?: string;\n  }>({});\n  \n  // 載入可用的 AI 模型\n  useEffect(() => {\n    if (isOllamaConnected) {\n      dispatch(fetchAvailableModels());\n    }\n  }, [dispatch, isOllamaConnected]);\n\n  const handleClose = (e?: React.MouseEvent) => {\n    e?.stopPropagation();\n    dispatch(closeModal('createProject'));\n  };\n\n  const validateStep1 = () => {\n    const newErrors: {\n      name?: string;\n      type?: string;\n    } = {};\n\n    if (!projectName.trim()) {\n      newErrors.name = '請輸入專案名稱';\n    }\n\n    if (!selectedType) {\n      newErrors.type = '請選擇專案類型';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n  \n  const validateStep2 = () => {\n    // 步驟 2 沒有必填欄位，直接返回 true\n    return true;\n  };\n  \n  const validateStep3 = () => {\n    const newErrors: {\n      model?: string;\n    } = {};\n\n    if (!aiSettings.model) {\n      newErrors.model = '請選擇 AI 模型';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleNextStep = () => {\n    if (step === 1 && validateStep1()) {\n      setStep(2);\n      \n      // 根據選擇的專案類型設置默認的模板設定\n      if (selectedType) {\n        const defaultSettings: TemplateSettings = {};\n        \n        switch (selectedType) {\n          case 'isekai':\n            defaultSettings.levelSystem = '等級與技能系統';\n            defaultSettings.magicSystem = '元素魔法';\n            defaultSettings.reincarnation = '車禍後轉生';\n            break;\n          case 'school':\n            defaultSettings.schoolName = '櫻花高中';\n            defaultSettings.schoolType = '普通高中';\n            break;\n          case 'scifi':\n            defaultSettings.techLevel = '近未來科技';\n            defaultSettings.worldSetting = '太空殖民時代';\n            break;\n          case 'fantasy':\n            defaultSettings.magicSystem = '魔法與咒語';\n            defaultSettings.races = '人類、精靈、矮人、獸人';\n            break;\n        }\n        \n        setTemplateSettings(defaultSettings);\n      }\n    } else if (step === 2 && validateStep2()) {\n      setStep(3);\n    }\n  };\n\n  const handlePrevStep = () => {\n    if (step === 2) {\n      setStep(1);\n    } else if (step === 3) {\n      setStep(2);\n    }\n  };\n\n  const handleSubmit = async () => {\n    if (!validateStep1()) {\n      setStep(1);\n      return;\n    }\n\n    if (!validateStep3()) {\n      return;\n    }\n\n    if (!selectedType) return;\n\n    setIsSubmitting(true);\n\n    try {\n      // 1. 創建專案\n      const projectResult = await dispatch(createProject({\n        name: projectName,\n        type: selectedType,\n        description: projectDescription,\n        settings: {\n          aiModel: aiSettings.model,\n          aiParams: {\n            temperature: aiSettings.temperature,\n            topP: aiSettings.topP,\n            maxTokens: aiSettings.maxTokens,\n          },\n        },\n      })).unwrap();\n\n      // 2. 應用對應的模板\n      try {\n        // 載入模板\n        await dispatch(fetchAllTemplates());\n        \n        // 找到對應類型的預設模板\n        const templateId = `${selectedType}-default`;\n        const { templateService } = await import('../../services/templateService');\n        \n        // 應用模板到新創建的專案\n        const applicationResult = await templateService.applyTemplateToProject(\n          templateId,\n          projectResult.id,\n          {\n            createCharacters: true,\n            updateProjectSettings: true\n          }\n        );\n\n        if (!applicationResult.success) {\n          console.warn('模板應用失敗:', applicationResult.message);\n          // 不阻止專案創建，只是記錄警告\n        }\n      } catch (templateError) {\n        console.error('應用模板失敗:', templateError);\n        // 不阻止專案創建，模板應用失敗不影響專案創建\n      }\n\n      handleClose();\n    } catch (error) {\n      console.error('創建專案失敗:', error);\n      setErrors({\n        name: '創建專案失敗，請稍後再試',\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n  \n  // 處理模板設定變更\n  const handleTemplateSettingChange = (key: keyof TemplateSettings, value: string) => {\n    setTemplateSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n  \n  // 處理 AI 設定變更\n  const handleAISettingChange = (key: keyof AISettings, value: any) => {\n    setAiSettings(prev => ({\n      ...prev,\n      [key]: value\n    }));\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4 overflow-y-auto\">\n      <div \n        className=\"bg-cosmic-900 border border-cosmic-700 rounded-xl shadow-xl w-full max-w-2xl relative my-8 flex flex-col max-h-[90vh]\"\n        onClick={(e) => e.stopPropagation()}\n      >\n        {/* 標題 */}\n        <div className=\"p-6 border-b border-cosmic-700 flex items-center justify-between relative z-10 flex-shrink-0\">\n          <h2 className=\"text-xl font-cosmic text-gold-500\">創建新專案</h2>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-400 hover:text-white hover:bg-cosmic-700 text-2xl p-2 rounded-lg transition-colors\"\n            aria-label=\"關閉\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* 內容 */}\n        <div className=\"p-6 overflow-y-auto flex-1\">\n          {/* 步驟指示器 */}\n          <div className=\"flex items-center mb-8\">\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n              step === 1 ? 'bg-gold-500 text-cosmic-900' : 'bg-cosmic-700 text-gold-500'\n            }`}>\n              1\n            </div>\n            <div className={`h-1 flex-1 mx-2 ${\n              step >= 2 ? 'bg-gold-500' : 'bg-cosmic-700'\n            }`}></div>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n              step === 2 ? 'bg-gold-500 text-cosmic-900' : (step > 2 ? 'bg-cosmic-700 text-gold-500' : 'bg-cosmic-700 text-gray-300')\n            }`}>\n              2\n            </div>\n            <div className={`h-1 flex-1 mx-2 ${\n              step >= 3 ? 'bg-gold-500' : 'bg-cosmic-700'\n            }`}></div>\n            <div className={`w-8 h-8 rounded-full flex items-center justify-center ${\n              step === 3 ? 'bg-gold-500 text-cosmic-900' : 'bg-cosmic-700 text-gray-300'\n            }`}>\n              3\n            </div>\n          </div>\n\n          {/* 步驟 1：基本資訊 */}\n          {step === 1 && (\n            <div>\n              <div className=\"mb-6\">\n                <label className=\"block text-gray-300 mb-2\">專案名稱</label>\n                <input\n                  type=\"text\"\n                  value={projectName}\n                  onChange={(e) => setProjectName(e.target.value)}\n                  placeholder=\"輸入專案名稱\"\n                  className={`w-full bg-cosmic-800 border ${\n                    errors.name ? 'border-red-500' : 'border-cosmic-700'\n                  } rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500`}\n                />\n                {errors.name && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.name}</p>\n                )}\n              </div>\n\n              <div className=\"mb-6\">\n                <label className=\"block text-gray-300 mb-2\">選擇專案類型</label>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {projectTypes.map((type) => (\n                    <div\n                      key={type.id}\n                      onClick={() => setSelectedType(type.id)}\n                      className={`p-4 rounded-lg cursor-pointer border ${\n                        selectedType === type.id\n                          ? 'border-gold-500 bg-cosmic-800'\n                          : 'border-cosmic-700 bg-cosmic-900 hover:bg-cosmic-800'\n                      }`}\n                    >\n                      <div className=\"flex items-center mb-2\">\n                        <div className={`w-10 h-10 rounded-lg bg-gradient-to-br ${type.color} flex items-center justify-center text-2xl mr-3`}>\n                          {type.icon}\n                        </div>\n                        <h3 className=\"text-lg font-medium text-white\">\n                          {type.name}\n                        </h3>\n                      </div>\n                      <p className=\"text-sm text-gray-400\">\n                        {type.description}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n                {errors.type && (\n                  <p className=\"text-red-500 text-sm mt-1\">{errors.type}</p>\n                )}\n              </div>\n            </div>\n          )}\n\n          {/* 步驟 2：詳細資訊和模板設定 */}\n          {step === 2 && (\n            <div>\n              <div className=\"mb-6\">\n                <label className=\"block text-gray-300 mb-2\">專案描述（選填）</label>\n                <textarea\n                  value={projectDescription}\n                  onChange={(e) => setProjectDescription(e.target.value)}\n                  placeholder=\"輸入專案描述...\"\n                  rows={3}\n                  className=\"w-full bg-cosmic-800 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                ></textarea>\n              </div>\n\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-medium text-gold-400 mb-4\">模板設定</h3>\n                <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-4\">\n                  {selectedType === 'isekai' && (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">等級系統</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.levelSystem || ''}\n                          onChange={(e) => handleTemplateSettingChange('levelSystem', e.target.value)}\n                          placeholder=\"例如：等級與技能系統\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">魔法系統</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.magicSystem || ''}\n                          onChange={(e) => handleTemplateSettingChange('magicSystem', e.target.value)}\n                          placeholder=\"例如：元素魔法\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">轉生設定</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.reincarnation || ''}\n                          onChange={(e) => handleTemplateSettingChange('reincarnation', e.target.value)}\n                          placeholder=\"例如：車禍後轉生\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedType === 'school' && (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">學校名稱</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.schoolName || ''}\n                          onChange={(e) => handleTemplateSettingChange('schoolName', e.target.value)}\n                          placeholder=\"例如：櫻花高中\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">學校類型</label>\n                        <select\n                          value={templateSettings.schoolType || ''}\n                          onChange={(e) => handleTemplateSettingChange('schoolType', e.target.value)}\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        >\n                          <option value=\"\">選擇學校類型</option>\n                          <option value=\"普通高中\">普通高中</option>\n                          <option value=\"私立貴族學校\">私立貴族學校</option>\n                          <option value=\"藝術學校\">藝術學校</option>\n                          <option value=\"體育學校\">體育學校</option>\n                          <option value=\"魔法學院\">魔法學院</option>\n                        </select>\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedType === 'scifi' && (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">科技水平</label>\n                        <select\n                          value={templateSettings.techLevel || ''}\n                          onChange={(e) => handleTemplateSettingChange('techLevel', e.target.value)}\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        >\n                          <option value=\"\">選擇科技水平</option>\n                          <option value=\"近未來科技\">近未來科技</option>\n                          <option value=\"太空時代\">太空時代</option>\n                          <option value=\"星際文明\">星際文明</option>\n                          <option value=\"後奇點時代\">後奇點時代</option>\n                        </select>\n                      </div>\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">世界設定</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.worldSetting || ''}\n                          onChange={(e) => handleTemplateSettingChange('worldSetting', e.target.value)}\n                          placeholder=\"例如：太空殖民時代\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                    </div>\n                  )}\n\n                  {selectedType === 'fantasy' && (\n                    <div className=\"space-y-4\">\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">魔法系統</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.magicSystem || ''}\n                          onChange={(e) => handleTemplateSettingChange('magicSystem', e.target.value)}\n                          placeholder=\"例如：魔法與咒語\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                      <div>\n                        <label className=\"block text-gray-300 mb-2\">種族設定</label>\n                        <input\n                          type=\"text\"\n                          value={templateSettings.races || ''}\n                          onChange={(e) => handleTemplateSettingChange('races', e.target.value)}\n                          placeholder=\"例如：人類、精靈、矮人、獸人\"\n                          className=\"w-full bg-cosmic-900 border border-cosmic-700 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n                        />\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          )}\n          \n          {/* 步驟 3：AI 設定 */}\n          {step === 3 && (\n            <div>\n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-medium text-gold-400 mb-4\">AI 設定</h3>\n                <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-4 space-y-4\">\n                  <div>\n                    <label className=\"block text-gray-300 mb-2\">AI 模型</label>\n                    <select\n                      value={aiSettings.model}\n                      onChange={(e) => handleAISettingChange('model', e.target.value)}\n                      className={`w-full bg-cosmic-900 border ${\n                        errors.model ? 'border-red-500' : 'border-cosmic-700'\n                      } rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500`}\n                      disabled={!isOllamaConnected || availableModels.length === 0}\n                    >\n                      {!isOllamaConnected ? (\n                        <option value=\"\">Ollama 未連接</option>\n                      ) : availableModels.length === 0 ? (\n                        <option value=\"\">無可用模型</option>\n                      ) : (\n                        <>\n                          <option value=\"\">選擇 AI 模型</option>\n                          {availableModels.map(model => (\n                            <option key={model} value={model}>{model}</option>\n                          ))}\n                        </>\n                      )}\n                    </select>\n                    {errors.model && (\n                      <p className=\"text-red-500 text-sm mt-1\">{errors.model}</p>\n                    )}\n                    {!isOllamaConnected && (\n                      <p className=\"text-yellow-500 text-sm mt-1\">\n                        Ollama 服務未連接，請先安裝並啟動 Ollama\n                      </p>\n                    )}\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-gray-300 mb-2\">\n                      溫度（Temperature）：{aiSettings.temperature}\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"0\"\n                      max=\"1\"\n                      step=\"0.1\"\n                      value={aiSettings.temperature}\n                      onChange={(e) => handleAISettingChange('temperature', parseFloat(e.target.value))}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400\">\n                      <span>更保守（0）</span>\n                      <span>更創意（1）</span>\n                    </div>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-gray-300 mb-2\">\n                      Top P：{aiSettings.topP}\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"0.1\"\n                      max=\"1\"\n                      step=\"0.1\"\n                      value={aiSettings.topP}\n                      onChange={(e) => handleAISettingChange('topP', parseFloat(e.target.value))}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n                      <span>詞彙選擇較固定</span>\n                      <span>詞彙選擇較多樣</span>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      控制 AI 在生成文字時的詞彙多樣性。較低值讓輸出更穩定集中，較高值讓輸出更富變化。\n                    </p>\n                  </div>\n                  \n                  <div>\n                    <label className=\"block text-gray-300 mb-2\">\n                      最大生成長度：{aiSettings.maxTokens} tokens\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"100\"\n                      max=\"1000\"\n                      step=\"50\"\n                      value={aiSettings.maxTokens}\n                      onChange={(e) => handleAISettingChange('maxTokens', parseInt(e.target.value))}\n                      className=\"w-full\"\n                    />\n                    <div className=\"flex justify-between text-xs text-gray-400 mt-1\">\n                      <span>較短回應</span>\n                      <span>較長回應</span>\n                    </div>\n                    <p className=\"text-xs text-gray-500 mt-1\">\n                      限制 AI 單次生成文字的最大長度。1 token 約等於 0.75 個中文字，400 tokens 約為 300 字。\n                    </p>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mb-6\">\n                <h3 className=\"text-lg font-medium text-gold-400 mb-4\">專案預覽</h3>\n                <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-4\">\n                  <div className=\"flex items-center mb-4\">\n                    <div className=\"text-2xl mr-3\">\n                      {projectTypes.find(t => t.id === selectedType)?.icon || '📝'}\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium text-white\">{projectName}</h4>\n                      <p className=\"text-sm text-gray-400\">\n                        {projectTypes.find(t => t.id === selectedType)?.name || '未知類型'}\n                      </p>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-gray-400 border-t border-cosmic-700 pt-4 mb-4\">\n                    {projectDescription || '暫無描述'}\n                  </p>\n                  <div className=\"text-xs text-gray-500 border-t border-cosmic-700 pt-4\">\n                    <div className=\"flex justify-between mb-1\">\n                      <span>AI 模型：</span>\n                      <span className=\"text-gold-400\">{aiSettings.model || '未選擇'}</span>\n                    </div>\n                    <div className=\"flex justify-between\">\n                      <span>模板：</span>\n                      <span className=\"text-gold-400\">\n                        {selectedType === 'isekai' && '異世界模板'}\n                        {selectedType === 'school' && '校園模板'}\n                        {selectedType === 'scifi' && '科幻模板'}\n                        {selectedType === 'fantasy' && '奇幻模板'}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 底部按鈕 */}\n        <div className=\"p-6 border-t border-cosmic-700 flex justify-between relative z-10 bg-cosmic-900 rounded-b-xl flex-shrink-0\">\n          {step === 1 ? (\n            <button\n              onClick={handleClose}\n              className=\"btn-secondary\"\n            >\n              取消\n            </button>\n          ) : (\n            <button\n              onClick={handlePrevStep}\n              className=\"btn-secondary\"\n            >\n              上一步\n            </button>\n          )}\n\n          {step < 3 ? (\n            <button\n              onClick={handleNextStep}\n              className=\"btn-primary\"\n            >\n              下一步\n            </button>\n          ) : (\n            <button\n              onClick={handleSubmit}\n              disabled={isSubmitting}\n              className=\"btn-primary\"\n            >\n              {isSubmitting ? '創建中...' : '創建專案'}\n            </button>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CreateProjectModal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/DeleteProjectModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/HelpCenterModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/ImportProjectModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[619,622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[619,622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1518,1521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1518,1521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef } from 'react';\nimport { useAppDispatch } from '../../hooks/redux';\nimport { createProject } from '../../store/slices/projectsSlice';\nimport { closeModal, addNotification } from '../../store/slices/uiSlice';\n\nconst ImportProjectModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [importedData, setImportedData] = useState<any | null>(null);\n\n  const handleClose = () => {\n    dispatch(closeModal('importProject'));\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      setSelectedFile(file);\n      setError(null);\n      \n      // 讀取文件內容\n      const reader = new FileReader();\n      reader.onload = (event) => {\n        try {\n          const data = JSON.parse(event.target?.result as string);\n          validateImportData(data);\n          setImportedData(data);\n        } catch (_err) {\n          setError('無法解析檔案，請確保是有效的 JSON 格式');\n          setImportedData(null);\n        }\n      };\n      reader.onerror = () => {\n        setError('讀取檔案時發生錯誤');\n        setImportedData(null);\n      };\n      reader.readAsText(file);\n    } else {\n      setSelectedFile(null);\n      setImportedData(null);\n    }\n  };\n\n  const validateImportData = (data: any) => {\n    // 檢查必要欄位\n    if (!data.name || !data.type) {\n      setError('匯入檔案缺少必要欄位（名稱或類型）');\n      return false;\n    }\n    \n    // 檢查類型是否有效\n    const validTypes = ['isekai', 'school', 'scifi', 'fantasy'];\n    if (!validTypes.includes(data.type)) {\n      setError('專案類型無效');\n      return false;\n    }\n    \n    return true;\n  };\n\n  const handleImport = async () => {\n    if (!importedData) {\n      setError('請先選擇有效的匯入檔案');\n      return;\n    }\n\n    setIsSubmitting(true);\n\n    try {\n      // 創建新專案\n      await dispatch(createProject({\n        name: importedData.name,\n        type: importedData.type,\n        description: importedData.description || '',\n        settings: importedData.settings || {\n          aiModel: 'llama3',\n          aiParams: {\n            temperature: 0.7,\n            topP: 0.9,\n            maxTokens: 200,\n          },\n        },\n      })).unwrap();\n\n      dispatch(addNotification({\n        type: 'success',\n        title: '匯入成功',\n        message: `專案「${importedData.name}」已成功匯入`,\n      }));\n\n      handleClose();\n    } catch (error) {\n      console.error('匯入專案失敗:', error);\n      setError('匯入專案失敗，請稍後再試');\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const file = e.dataTransfer.files?.[0];\n    if (file && file.type === 'application/json') {\n      // 模擬文件輸入變更\n      const dataTransfer = new DataTransfer();\n      dataTransfer.items.add(file);\n      \n      if (fileInputRef.current) {\n        fileInputRef.current.files = dataTransfer.files;\n        const event = new Event('change', { bubbles: true });\n        fileInputRef.current.dispatchEvent(event);\n      }\n    } else {\n      setError('請選擇有效的 JSON 檔案');\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/70 flex items-center justify-center z-50 p-4\">\n      <div className=\"bg-cosmic-900 border border-cosmic-700 rounded-xl shadow-xl w-full max-w-2xl\">\n        {/* 標題 */}\n        <div className=\"p-6 border-b border-cosmic-700 flex items-center justify-between\">\n          <h2 className=\"text-xl font-cosmic text-gold-500\">匯入專案</h2>\n          <button\n            onClick={handleClose}\n            className=\"text-gray-400 hover:text-white\"\n          >\n            ✕\n          </button>\n        </div>\n\n        {/* 內容 */}\n        <div className=\"p-6\">\n          {/* 檔案上傳區域 */}\n          <div\n            className=\"border-2 border-dashed border-cosmic-700 rounded-lg p-8 mb-6 text-center cursor-pointer hover:border-gold-500 transition-colors\"\n            onDragOver={handleDragOver}\n            onDrop={handleDrop}\n            onClick={() => fileInputRef.current?.click()}\n          >\n            <input\n              type=\"file\"\n              ref={fileInputRef}\n              onChange={handleFileChange}\n              accept=\"application/json\"\n              className=\"hidden\"\n            />\n            <div className=\"text-4xl mb-4\">📁</div>\n            <h3 className=\"text-lg font-medium text-gold-400 mb-2\">\n              {selectedFile ? selectedFile.name : '選擇檔案或拖放至此'}\n            </h3>\n            <p className=\"text-sm text-gray-400\">\n              支援 JSON 格式的專案匯出檔案\n            </p>\n          </div>\n\n          {/* 錯誤訊息 */}\n          {error && (\n            <div className=\"bg-red-900/20 border border-red-900/30 rounded-lg p-4 mb-6\">\n              <p className=\"text-red-400\">{error}</p>\n            </div>\n          )}\n\n          {/* 匯入預覽 */}\n          {importedData && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-medium text-gold-400 mb-4\">匯入預覽</h3>\n              <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-4\">\n                <div className=\"mb-4\">\n                  <h4 className=\"font-medium text-white\">{importedData.name}</h4>\n                  <p className=\"text-sm text-gray-400\">\n                    {importedData.type === 'isekai' && '異世界'}\n                    {importedData.type === 'school' && '校園'}\n                    {importedData.type === 'scifi' && '科幻'}\n                    {importedData.type === 'fantasy' && '奇幻'}\n                  </p>\n                </div>\n                <p className=\"text-sm text-gray-400 border-t border-cosmic-700 pt-4\">\n                  {importedData.description || '暫無描述'}\n                </p>\n                {importedData.exportedAt && (\n                  <p className=\"text-xs text-gray-500 mt-4\">\n                    匯出時間：{new Date(importedData.exportedAt).toLocaleString('zh-TW')}\n                  </p>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 底部按鈕 */}\n        <div className=\"p-6 border-t border-cosmic-700 flex justify-end space-x-4\">\n          <button\n            onClick={handleClose}\n            className=\"btn-secondary\"\n            disabled={isSubmitting}\n          >\n            取消\n          </button>\n          <button\n            onClick={handleImport}\n            disabled={!importedData || isSubmitting}\n            className=\"btn-primary\"\n          >\n            {isSubmitting ? '匯入中...' : '匯入專案'}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImportProjectModal;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/ProjectManageModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/SelectProjectForCharactersModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/TemplateApplicationModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/TemplateManagerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Modals/UpdateManagerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Progress/ProgressContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Progress/ProgressIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Progress/ProgressManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/StableApp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/components/FeatureCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/constants/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/modals/CharacterManagerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/modals/CreateProjectModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/modals/TemplateManagerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/pages/DashboardPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/pages/EditorPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/pages/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/styles/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/types/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/StableApp/utils/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1496,1499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1496,1499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2657,2660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2657,2660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3198,3201],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3198,3201],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { STORAGE_KEYS } from '../constants';\nimport { Project, Character } from '../types';\n\n// 本地儲存相關工具函數\nexport const storage = {\n  // 專案相關\n  getProjects: (): Project[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.PROJECTS);\n    return data ? JSON.parse(data) : [];\n  },\n  \n  saveProjects: (projects: Project[]): void => {\n    localStorage.setItem(STORAGE_KEYS.PROJECTS, JSON.stringify(projects));\n  },\n  \n  // 角色相關\n  getCharacters: (): Character[] => {\n    const data = localStorage.getItem(STORAGE_KEYS.CHARACTERS);\n    return data ? JSON.parse(data) : [];\n  },\n  \n  saveCharacters: (characters: Character[]): void => {\n    localStorage.setItem(STORAGE_KEYS.CHARACTERS, JSON.stringify(characters));\n  },\n  \n  // 內容相關\n  getContent: (): string => {\n    return localStorage.getItem(STORAGE_KEYS.CONTENT) || '';\n  },\n  \n  saveContent: (content: string): void => {\n    localStorage.setItem(STORAGE_KEYS.CONTENT, content);\n    localStorage.setItem(STORAGE_KEYS.SAVED_TIME, new Date().toLocaleString());\n  },\n  \n  // 寫作時間相關\n  getWritingTime: (): number => {\n    const saved = localStorage.getItem(STORAGE_KEYS.WRITING_TIME);\n    return saved ? parseInt(saved) : 0;\n  },\n  \n  saveWritingTime: (time: number): void => {\n    localStorage.setItem(STORAGE_KEYS.WRITING_TIME, time.toString());\n  },\n  \n  // 模板相關\n  getAppliedTemplate: (): any => {\n    const data = localStorage.getItem(STORAGE_KEYS.TEMPLATE);\n    return data ? JSON.parse(data) : null;\n  },\n  \n  saveAppliedTemplate: (template: any): void => {\n    localStorage.setItem(STORAGE_KEYS.TEMPLATE, JSON.stringify(template));\n  }\n};\n\n// 文字統計工具函數\nexport const textStats = {\n  // 計算字數\n  countWords: (text: string): number => {\n    return text.length;\n  },\n  \n  // 計算段落數\n  countParagraphs: (text: string): number => {\n    return text.split('\\n\\n').filter(p => p.trim().length > 0).length;\n  },\n  \n  // 計算寫作效率（字/分鐘）\n  calculateEfficiency: (wordCount: number, minutes: number): number => {\n    return minutes > 0 ? Math.round(wordCount / minutes) : 0;\n  },\n  \n  // 計算進度百分比\n  calculateProgress: (current: number, goal: number): number => {\n    return Math.min((current / goal) * 100, 100);\n  }\n};\n\n// 備份相關工具函數\nexport const backup = {\n  // 創建備份資料\n  createBackupData: () => {\n    return {\n      projects: storage.getProjects(),\n      characters: storage.getCharacters(),\n      content: storage.getContent(),\n      template: storage.getAppliedTemplate(),\n      stats: {\n        totalWritingTime: storage.getWritingTime().toString(),\n        savedTime: localStorage.getItem(STORAGE_KEYS.SAVED_TIME) || ''\n      },\n      exportTime: new Date().toISOString()\n    };\n  },\n  \n  // 還原備份\n  restoreBackup: (data: any): void => {\n    if (data.projects) storage.saveProjects(data.projects);\n    if (data.characters) storage.saveCharacters(data.characters);\n    if (data.content) storage.saveContent(data.content);\n    if (data.template) storage.saveAppliedTemplate(data.template);\n    if (data.stats?.totalWritingTime) {\n      storage.saveWritingTime(parseInt(data.stats.totalWritingTime));\n    }\n    if (data.stats?.savedTime) {\n      localStorage.setItem(STORAGE_KEYS.SAVED_TIME, data.stats.savedTime);\n    }\n  },\n  \n  // 下載備份檔案\n  downloadBackup: (data: any, filename: string): void => {\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    a.click();\n    URL.revokeObjectURL(url);\n  }\n};\n\n// 日期時間格式化\nexport const formatDateTime = (date: Date | string): string => {\n  const d = typeof date === 'string' ? new Date(date) : date;\n  return d.toLocaleString();\n};\n\n// 生成唯一 ID\nexport const generateId = (): string => {\n  return Date.now().toString();\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Templates/TemplateApplicationWizard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1340,1343],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1340,1343],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateCharacterPreviews'. Either include it or remove the dependency array.","line":41,"column":6,"nodeType":"ArrayExpression","endLine":41,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [template, updateCharacterPreviews]","fix":{"range":[1706,1716],"text":"[template, updateCharacterPreviews]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2920,2923],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2920,2923],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { NovelTemplate, TemplateApplicationResult } from '../../types/template';\nimport { CharacterArchetypeTemplate } from '../../types/template';\nimport { templateService } from '../../services/templateService';\nimport { templateCharacterService } from '../../services/templateCharacterService';\n\ninterface TemplateApplicationWizardProps {\n  template: NovelTemplate;\n  projectId: string;\n  onComplete: (result: TemplateApplicationResult) => void;\n  onCancel: () => void;\n}\n\ntype WizardStep = 'overview' | 'characters' | 'settings' | 'applying' | 'complete';\n\nexport const TemplateApplicationWizard: React.FC<TemplateApplicationWizardProps> = ({\n  template,\n  projectId,\n  onComplete,\n  onCancel,\n}) => {\n  const [currentStep, setCurrentStep] = useState<WizardStep>('overview');\n  const [selectedArchetypes, setSelectedArchetypes] = useState<string[]>([]);\n  const [createCharacters, setCreateCharacters] = useState(true);\n  const [updateProjectSettings, setUpdateProjectSettings] = useState(true);\n  const [applicationResult, setApplicationResult] = useState<TemplateApplicationResult | null>(null);\n  const [_isApplying, _setIsApplying] = useState(false);\n  const [characterPreviews, setCharacterPreviews] = useState<Array<{\n    archetype: CharacterArchetypeTemplate;\n    previewData: any;\n  }>>([]);\n\n  useEffect(() => {\n    // 獲取推薦的角色組合\n    const { essential, optional: _optional } = templateCharacterService.getRecommendedCharacterCombination(template);\n    const recommendedArchetypes = essential.map(arch => arch.name);\n    setSelectedArchetypes(recommendedArchetypes);\n    \n    // 生成角色預覽\n    updateCharacterPreviews(recommendedArchetypes);\n  }, [template]);\n\n  const updateCharacterPreviews = (archetypes: string[]) => {\n    const previews = templateCharacterService.previewCharacterCreation(template, archetypes);\n    setCharacterPreviews(previews);\n  };\n\n  const handleArchetypeToggle = (archetypeName: string) => {\n    const newSelection = selectedArchetypes.includes(archetypeName)\n      ? selectedArchetypes.filter(name => name !== archetypeName)\n      : [...selectedArchetypes, archetypeName];\n    \n    setSelectedArchetypes(newSelection);\n    updateCharacterPreviews(newSelection);\n  };\n\n  const handleApplyTemplate = async () => {\n    _setIsApplying(true);\n    setCurrentStep('applying');\n\n    try {\n      const result = await templateService.applyTemplateToProject(template.id, projectId, {\n        createCharacters,\n        selectedArchetypes: createCharacters ? selectedArchetypes : [],\n        updateProjectSettings\n      });\n\n      setApplicationResult(result);\n      setCurrentStep('complete');\n    } catch (error) {\n      console.error('應用模板失敗:', error);\n      setApplicationResult({\n        success: false,\n        message: `應用模板失敗: ${error instanceof Error ? error.message : '未知錯誤'}`,\n        appliedSettings: {\n          worldSetting: {} as any,\n          createdCharacters: [],\n          projectSettings: {}\n        },\n        errors: [error instanceof Error ? error.message : '未知錯誤']\n      });\n      setCurrentStep('complete');\n    } finally {\n      _setIsApplying(false);\n    }\n  };\n\n  const handleComplete = () => {\n    if (applicationResult) {\n      onComplete(applicationResult);\n    }\n  };\n\n  const renderStepIndicator = () => {\n    const steps = [\n      { key: 'overview', label: '模板概覽' },\n      { key: 'characters', label: '角色設定' },\n      { key: 'settings', label: '應用設定' },\n      { key: 'applying', label: '應用中' },\n      { key: 'complete', label: '完成' }\n    ];\n\n    const currentIndex = steps.findIndex(step => step.key === currentStep);\n\n    return (\n      <div className=\"flex items-center justify-center mb-8\">\n        {steps.map((step, index) => (\n          <React.Fragment key={step.key}>\n            <div className={`flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium ${\n              index <= currentIndex\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-200 text-gray-600'\n            }`}>\n              {index + 1}\n            </div>\n            <div className={`text-sm ${\n              index <= currentIndex ? 'text-blue-600' : 'text-gray-500'\n            } ml-2`}>\n              {step.label}\n            </div>\n            {index < steps.length - 1 && (\n              <div className={`w-8 h-0.5 mx-4 ${\n                index < currentIndex ? 'bg-blue-600' : 'bg-gray-200'\n              }`} />\n            )}\n          </React.Fragment>\n        ))}\n      </div>\n    );\n  };\n\n  const renderOverviewStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{template.name}</h2>\n        <p className=\"text-gray-600\">{template.description}</p>\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-blue-900 mb-4\">模板將為您的專案提供：</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <h4 className=\"font-medium text-blue-800 mb-2\">世界觀設定</h4>\n            <ul className=\"text-sm text-blue-700 space-y-1\">\n              <li>• 時代背景：{template.worldSetting.era}</li>\n              <li>• 科技水平：{template.worldSetting.technology}</li>\n              <li>• 社會結構：{template.worldSetting.society}</li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-medium text-blue-800 mb-2\">特殊元素</h4>\n            <div className=\"flex flex-wrap gap-1\">\n              {template.worldSetting.specialElements.slice(0, 6).map((element, index) => (\n                <span key={index} className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\">\n                  {element}\n                </span>\n              ))}\n              {template.worldSetting.specialElements.length > 6 && (\n                <span className=\"px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\">\n                  +{template.worldSetting.specialElements.length - 6}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-green-50 border border-green-200 rounded-lg p-6\">\n        <h3 className=\"text-lg font-semibold text-green-900 mb-4\">角色原型 ({template.characterArchetypes.length} 個)</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          {template.characterArchetypes.slice(0, 4).map((archetype, index) => (\n            <div key={index} className=\"bg-white rounded-lg p-3 border border-green-200\">\n              <h4 className=\"font-medium text-green-900\">{archetype.name}</h4>\n              <p className=\"text-sm text-green-700 mt-1\">{archetype.description}</p>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex justify-end space-x-3\">\n        <button\n          onClick={onCancel}\n          className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n        >\n          取消\n        </button>\n        <button\n          onClick={() => setCurrentStep('characters')}\n          className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n        >\n          下一步\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderCharactersStep = () => {\n    const { essential, optional } = templateCharacterService.getRecommendedCharacterCombination(template);\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">選擇要創建的角色</h2>\n          <p className=\"text-gray-600\">您可以選擇要自動創建的角色原型</p>\n        </div>\n\n        <div className=\"flex items-center space-x-4 mb-6\">\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={createCharacters}\n              onChange={(e) => setCreateCharacters(e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n            <span className=\"ml-2 text-sm text-gray-700\">自動創建角色</span>\n          </label>\n        </div>\n\n        {createCharacters && (\n          <>\n            {/* 必要角色 */}\n            {essential.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-3\">推薦角色（建議創建）</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {essential.map((archetype) => (\n                    <div\n                      key={archetype.name}\n                      className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                        selectedArchetypes.includes(archetype.name)\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => handleArchetypeToggle(archetype.name)}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{archetype.name}</h4>\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedArchetypes.includes(archetype.name)}\n                          onChange={() => {}}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                        />\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">{archetype.description}</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {archetype.tags.map((tag, index) => (\n                          <span key={index} className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 可選角色 */}\n            {optional.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-3\">其他角色（可選）</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {optional.map((archetype) => (\n                    <div\n                      key={archetype.name}\n                      className={`border-2 rounded-lg p-4 cursor-pointer transition-all ${\n                        selectedArchetypes.includes(archetype.name)\n                          ? 'border-blue-500 bg-blue-50'\n                          : 'border-gray-200 hover:border-gray-300'\n                      }`}\n                      onClick={() => handleArchetypeToggle(archetype.name)}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">{archetype.name}</h4>\n                        <input\n                          type=\"checkbox\"\n                          checked={selectedArchetypes.includes(archetype.name)}\n                          onChange={() => {}}\n                          className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n                        />\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-2\">{archetype.description}</p>\n                      <div className=\"flex flex-wrap gap-1\">\n                        {archetype.tags.map((tag, index) => (\n                          <span key={index} className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* 角色預覽 */}\n            {selectedArchetypes.length > 0 && (\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 mb-3\">角色預覽</h3>\n                <div className=\"bg-gray-50 rounded-lg p-4\">\n                  <div className=\"space-y-3\">\n                    {characterPreviews.map((preview, index) => (\n                      <div key={index} className=\"bg-white rounded-lg p-3 border border-gray-200\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-gray-900\">{preview.previewData.name}</h4>\n                          <div className=\"text-sm text-gray-500\">\n                            {preview.previewData.age && `${preview.previewData.age}歲`}\n                            {preview.previewData.gender && ` • ${preview.previewData.gender}`}\n                          </div>\n                        </div>\n                        <p className=\"text-sm text-gray-600\">{preview.previewData.personality}</p>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            )}\n          </>\n        )}\n\n        <div className=\"flex justify-between\">\n          <button\n            onClick={() => setCurrentStep('overview')}\n            className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n          >\n            上一步\n          </button>\n          <button\n            onClick={() => setCurrentStep('settings')}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n          >\n            下一步\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  const renderSettingsStep = () => (\n    <div className=\"space-y-6\">\n      <div className=\"text-center\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">應用設定</h2>\n        <p className=\"text-gray-600\">確認模板應用的設定選項</p>\n      </div>\n\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <h3 className=\"font-medium text-gray-900\">更新專案設定</h3>\n            <p className=\"text-sm text-gray-600\">將模板的世界觀設定和寫作指導應用到專案</p>\n          </div>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={updateProjectSettings}\n              onChange={(e) => setUpdateProjectSettings(e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n          </label>\n        </div>\n\n        <div className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\">\n          <div>\n            <h3 className=\"font-medium text-gray-900\">創建角色</h3>\n            <p className=\"text-sm text-gray-600\">\n              根據選擇的角色原型自動創建 {selectedArchetypes.length} 個角色\n            </p>\n          </div>\n          <label className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              checked={createCharacters}\n              onChange={(e) => setCreateCharacters(e.target.checked)}\n              className=\"h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded\"\n            />\n          </label>\n        </div>\n      </div>\n\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h3 className=\"font-medium text-blue-900 mb-2\">應用摘要</h3>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 模板：{template.name}</li>\n          {updateProjectSettings && <li>• 將更新專案的世界觀設定和寫作指導</li>}\n          {createCharacters && <li>• 將創建 {selectedArchetypes.length} 個角色</li>}\n          {createCharacters && selectedArchetypes.length > 1 && <li>• 將建立角色間的基本關係</li>}\n        </ul>\n      </div>\n\n      <div className=\"flex justify-between\">\n        <button\n          onClick={() => setCurrentStep('characters')}\n          className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50\"\n        >\n          上一步\n        </button>\n        <button\n          onClick={handleApplyTemplate}\n          className=\"px-4 py-2 text-sm font-medium text-white bg-green-600 rounded-md hover:bg-green-700\"\n        >\n          應用模板\n        </button>\n      </div>\n    </div>\n  );\n\n  const renderApplyingStep = () => (\n    <div className=\"text-center py-12\">\n      <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n      <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">正在應用模板...</h2>\n      <p className=\"text-gray-600\">請稍候，正在設定您的專案</p>\n    </div>\n  );\n\n  const renderCompleteStep = () => {\n    if (!applicationResult) return null;\n\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"text-center\">\n          <div className={`w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center ${\n            applicationResult.success ? 'bg-green-100' : 'bg-red-100'\n          }`}>\n            {applicationResult.success ? (\n              <svg className=\"w-8 h-8 text-green-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M5 13l4 4L19 7\" />\n              </svg>\n            ) : (\n              <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n              </svg>\n            )}\n          </div>\n          <h2 className={`text-xl font-semibold mb-2 ${\n            applicationResult.success ? 'text-green-900' : 'text-red-900'\n          }`}>\n            {applicationResult.success ? '模板應用成功！' : '模板應用失敗'}\n          </h2>\n          <p className=\"text-gray-600\">{applicationResult.message}</p>\n        </div>\n\n        {applicationResult.success && (\n          <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\n            <h3 className=\"font-medium text-green-900 mb-2\">應用結果：</h3>\n            <ul className=\"text-sm text-green-800 space-y-1\">\n              <li>• 已更新專案設定</li>\n              {applicationResult.appliedSettings.createdCharacters.length > 0 && (\n                <li>• 已創建 {applicationResult.appliedSettings.createdCharacters.length} 個角色</li>\n              )}\n              <li>• AI 續寫將參考模板特色生成內容</li>\n            </ul>\n          </div>\n        )}\n\n        {applicationResult.errors && applicationResult.errors.length > 0 && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <h3 className=\"font-medium text-red-900 mb-2\">錯誤詳情：</h3>\n            <ul className=\"text-sm text-red-800 space-y-1\">\n              {applicationResult.errors.map((error, index) => (\n                <li key={index}>• {error}</li>\n              ))}\n            </ul>\n          </div>\n        )}\n\n        <div className=\"flex justify-end\">\n          <button\n            onClick={handleComplete}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700\"\n          >\n            完成\n          </button>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      {renderStepIndicator()}\n      \n      <div className=\"bg-white rounded-lg shadow-lg p-8\">\n        {currentStep === 'overview' && renderOverviewStep()}\n        {currentStep === 'characters' && renderCharactersStep()}\n        {currentStep === 'settings' && renderSettingsStep()}\n        {currentStep === 'applying' && renderApplyingStep()}\n        {currentStep === 'complete' && renderCompleteStep()}\n      </div>\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Templates/TemplateManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1398,1401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1398,1401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6718,6721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6718,6721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { NovelTemplate, TemplateType, TEMPLATE_TYPES } from '../../types/template';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport {\n  fetchAllTemplates,\n  selectFilteredAndSortedTemplates,\n  selectTemplateLoading,\n  selectTemplateError,\n  setFilters,\n  setSortOptions,\n  deleteTemplate,\n  cloneTemplate,\n  updateTemplate\n} from '../../store/slices/templatesSlice';\n\ninterface TemplateManagerProps {\n  onEditTemplate?: (template: NovelTemplate) => void;\n  onCreateTemplate?: () => void;\n}\n\nexport const TemplateManager: React.FC<TemplateManagerProps> = ({\n  onEditTemplate,\n  onCreateTemplate,\n}) => {\n  const dispatch = useAppDispatch();\n  const templates = useAppSelector(selectFilteredAndSortedTemplates);\n  const loading = useAppSelector(selectTemplateLoading);\n  const error = useAppSelector(selectTemplateError);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [typeFilter, setTypeFilter] = useState<TemplateType | ''>('');\n  const [customFilter, setCustomFilter] = useState<'all' | 'default' | 'custom'>('all');\n  const [selectedTemplate, setSelectedTemplate] = useState<NovelTemplate | null>(null);\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchAllTemplates());\n  }, [dispatch]);\n\n  useEffect(() => {\n    // 更新過濾器\n    const filters: any = {};\n    \n    if (searchQuery.trim()) {\n      filters.search = searchQuery.trim();\n    }\n    \n    if (typeFilter) {\n      filters.type = typeFilter;\n    }\n    \n    if (customFilter === 'default') {\n      filters.isCustom = false;\n    } else if (customFilter === 'custom') {\n      filters.isCustom = true;\n    }\n\n    dispatch(setFilters(filters));\n  }, [dispatch, searchQuery, typeFilter, customFilter]);\n\n  const handleSortChange = (field: 'name' | 'type' | 'createdAt' | 'updatedAt') => {\n    dispatch(setSortOptions({ field, direction: 'asc' }));\n  };\n\n  const handleDeleteClick = (template: NovelTemplate) => {\n    setSelectedTemplate(template);\n    setShowDeleteConfirm(true);\n  };\n\n  const handleConfirmDelete = async () => {\n    if (selectedTemplate) {\n      try {\n        await dispatch(deleteTemplate(selectedTemplate.id)).unwrap();\n        setShowDeleteConfirm(false);\n        setSelectedTemplate(null);\n      } catch (error) {\n        console.error('刪除模板失敗:', error);\n      }\n    }\n  };\n\n  const handleCancelDelete = () => {\n    setShowDeleteConfirm(false);\n    setSelectedTemplate(null);\n  };\n\n  const handleCloneTemplate = async (template: NovelTemplate) => {\n    try {\n      await dispatch(cloneTemplate({ \n        id: template.id, \n        newName: `${template.name} (副本)` \n      })).unwrap();\n    } catch (error) {\n      console.error('複製模板失敗:', error);\n    }\n  };\n\n  const handleToggleActive = async (template: NovelTemplate) => {\n    try {\n      await dispatch(updateTemplate({\n        id: template.id,\n        updates: { isActive: !template.isActive }\n      })).unwrap();\n    } catch (error) {\n      console.error('更新模板狀態失敗:', error);\n    }\n  };\n\n  const getTemplateTypeColor = (type: TemplateType): string => {\n    const colors = {\n      isekai: 'bg-purple-100 text-purple-800',\n      school: 'bg-pink-100 text-pink-800',\n      scifi: 'bg-blue-100 text-blue-800',\n      fantasy: 'bg-green-100 text-green-800'\n    };\n    return colors[type] || 'bg-gray-100 text-gray-800';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600\">載入模板中...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 標題和操作 */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">模板管理</h1>\n          <p className=\"mt-1 text-sm text-gray-600\">\n            管理輕小說創作模板，包括預設模板和自定義模板\n          </p>\n        </div>\n        {onCreateTemplate && (\n          <button\n            onClick={onCreateTemplate}\n            className=\"inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            <svg className=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 6v6m0 0v6m0-6h6m-6 0H6\" />\n            </svg>\n            新增模板\n          </button>\n        )}\n      </div>\n\n      {/* 過濾器 */}\n      <div className=\"bg-white rounded-lg border border-gray-200 p-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          {/* 搜索 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">搜索</label>\n            <input\n              type=\"text\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"搜索模板名稱或描述...\"\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            />\n          </div>\n\n          {/* 類型過濾 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">類型</label>\n            <select\n              value={typeFilter}\n              onChange={(e) => setTypeFilter(e.target.value as TemplateType | '')}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"\">所有類型</option>\n              {Object.entries(TEMPLATE_TYPES).map(([key, label]) => (\n                <option key={key} value={key}>{label}</option>\n              ))}\n            </select>\n          </div>\n\n          {/* 自定義過濾 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">來源</label>\n            <select\n              value={customFilter}\n              onChange={(e) => setCustomFilter(e.target.value as 'all' | 'default' | 'custom')}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"all\">全部</option>\n              <option value=\"default\">預設模板</option>\n              <option value=\"custom\">自定義模板</option>\n            </select>\n          </div>\n\n          {/* 排序 */}\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 mb-1\">排序</label>\n            <select\n              onChange={(e) => handleSortChange(e.target.value as any)}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n            >\n              <option value=\"name\">名稱</option>\n              <option value=\"type\">類型</option>\n              <option value=\"createdAt\">創建時間</option>\n              <option value=\"updatedAt\">更新時間</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* 錯誤提示 */}\n      {error && (\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <h3 className=\"text-sm font-medium text-red-800\">錯誤</h3>\n              <p className=\"mt-1 text-sm text-red-700\">{error}</p>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 模板列表 */}\n      {templates.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">沒有找到模板</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            {searchQuery || typeFilter || customFilter !== 'all' \n              ? '嘗試調整搜索條件或過濾器' \n              : '還沒有任何模板'\n            }\n          </p>\n        </div>\n      ) : (\n        <div className=\"bg-white rounded-lg border border-gray-200 overflow-hidden\">\n          <div className=\"overflow-x-auto\">\n            <table className=\"min-w-full divide-y divide-gray-200\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    模板\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    類型\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    狀態\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    更新時間\n                  </th>\n                  <th className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    操作\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {templates.map((template) => (\n                  <tr key={template.id} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div>\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {template.name}\n                          </div>\n                          <div className=\"text-sm text-gray-500 max-w-xs truncate\">\n                            {template.description}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${getTemplateTypeColor(template.type)}`}>\n                        {TEMPLATE_TYPES[template.type]}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center space-x-2\">\n                        <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full ${\n                          template.isActive !== false \n                            ? 'bg-green-100 text-green-800' \n                            : 'bg-gray-100 text-gray-800'\n                        }`}>\n                          {template.isActive !== false ? '啟用' : '停用'}\n                        </span>\n                        {template.isCustom && (\n                          <span className=\"inline-flex px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full\">\n                            自定義\n                          </span>\n                        )}\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                      {template.updatedAt.toLocaleDateString('zh-TW')}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-right text-sm font-medium\">\n                      <div className=\"flex items-center justify-end space-x-2\">\n                        {/* 啟用/停用 */}\n                        <button\n                          onClick={() => handleToggleActive(template)}\n                          className={`text-xs px-2 py-1 rounded ${\n                            template.isActive !== false\n                              ? 'text-gray-600 hover:text-gray-800'\n                              : 'text-green-600 hover:text-green-800'\n                          }`}\n                        >\n                          {template.isActive !== false ? '停用' : '啟用'}\n                        </button>\n\n                        {/* 複製 */}\n                        <button\n                          onClick={() => handleCloneTemplate(template)}\n                          className=\"text-blue-600 hover:text-blue-800 text-xs\"\n                        >\n                          複製\n                        </button>\n\n                        {/* 編輯 */}\n                        {onEditTemplate && (\n                          <button\n                            onClick={() => onEditTemplate(template)}\n                            className=\"text-indigo-600 hover:text-indigo-800 text-xs\"\n                          >\n                            編輯\n                          </button>\n                        )}\n\n                        {/* 刪除（僅自定義模板） */}\n                        {template.isCustom && (\n                          <button\n                            onClick={() => handleDeleteClick(template)}\n                            className=\"text-red-600 hover:text-red-800 text-xs\"\n                          >\n                            刪除\n                          </button>\n                        )}\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n\n      {/* 統計資訊 */}\n      {templates.length > 0 && (\n        <div className=\"text-sm text-gray-500 text-center\">\n          顯示 {templates.length} 個模板\n        </div>\n      )}\n\n      {/* 刪除確認對話框 */}\n      {showDeleteConfirm && selectedTemplate && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg shadow-xl w-full max-w-md\">\n            <div className=\"p-6\">\n              <div className=\"flex items-center mb-4\">\n                <div className=\"flex-shrink-0\">\n                  <svg className=\"w-6 h-6 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                  </svg>\n                </div>\n                <div className=\"ml-3\">\n                  <h3 className=\"text-lg font-medium text-gray-900\">確認刪除</h3>\n                </div>\n              </div>\n              <p className=\"text-sm text-gray-600 mb-6\">\n                確定要刪除模板「{selectedTemplate.name}」嗎？此操作無法復原。\n              </p>\n              <div className=\"flex items-center justify-end space-x-3\">\n                <button\n                  onClick={handleCancelDelete}\n                  className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n                >\n                  取消\n                </button>\n                <button\n                  onClick={handleConfirmDelete}\n                  className=\"px-4 py-2 text-sm font-medium text-white bg-red-600 border border-transparent rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500\"\n                >\n                  確認刪除\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Templates/TemplateSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1274,1277],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1274,1277],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { NovelTemplate, TemplateType, TEMPLATE_TYPES } from '../../types/template';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { \n  fetchAllTemplates, \n  selectFilteredAndSortedTemplates, \n  selectTemplateLoading,\n  selectTemplateError,\n  setFilters,\n  setSortOptions as _setSortOptions\n} from '../../store/slices/templatesSlice';\n\ninterface TemplateSelectorProps {\n  selectedTemplateId?: string;\n  onSelect: (template: NovelTemplate) => void;\n  onCancel?: () => void;\n  filterType?: TemplateType;\n  showCustomTemplates?: boolean;\n}\n\nexport const TemplateSelector: React.FC<TemplateSelectorProps> = ({\n  selectedTemplateId,\n  onSelect,\n  onCancel,\n  filterType,\n  showCustomTemplates = true,\n}) => {\n  const dispatch = useAppDispatch();\n  const templates = useAppSelector(selectFilteredAndSortedTemplates);\n  const loading = useAppSelector(selectTemplateLoading);\n  const error = useAppSelector(selectTemplateError);\n\n  const [selectedTemplate, setSelectedTemplate] = useState<NovelTemplate | null>(null);\n  const [previewMode, setPreviewMode] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchAllTemplates());\n  }, [dispatch]);\n\n  useEffect(() => {\n    // 設置過濾器\n    const filters: any = {};\n    if (filterType) {\n      filters.type = filterType;\n    }\n    if (!showCustomTemplates) {\n      filters.isCustom = false;\n    }\n    dispatch(setFilters(filters));\n  }, [dispatch, filterType, showCustomTemplates]);\n\n  useEffect(() => {\n    // 如果有預選的模板 ID，找到對應的模板\n    if (selectedTemplateId) {\n      const template = templates.find(t => t.id === selectedTemplateId);\n      if (template) {\n        setSelectedTemplate(template);\n      }\n    }\n  }, [selectedTemplateId, templates]);\n\n  const handleTemplateClick = (template: NovelTemplate) => {\n    setSelectedTemplate(template);\n    setPreviewMode(true);\n  };\n\n  const handleConfirmSelection = () => {\n    if (selectedTemplate) {\n      onSelect(selectedTemplate);\n    }\n  };\n\n  const handleBackToList = () => {\n    setPreviewMode(false);\n  };\n\n  const getTemplateTypeColor = (type: TemplateType): string => {\n    const colors = {\n      isekai: 'bg-purple-100 text-purple-800',\n      school: 'bg-pink-100 text-pink-800',\n      scifi: 'bg-blue-100 text-blue-800',\n      fantasy: 'bg-green-100 text-green-800'\n    };\n    return colors[type] || 'bg-gray-100 text-gray-800';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n        <span className=\"ml-2 text-gray-600\">載入模板中...</span>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-md p-4\">\n        <div className=\"flex\">\n          <div className=\"flex-shrink-0\">\n            <svg className=\"h-5 w-5 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <div className=\"ml-3\">\n            <h3 className=\"text-sm font-medium text-red-800\">載入錯誤</h3>\n            <p className=\"mt-1 text-sm text-red-700\">{error}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (previewMode && selectedTemplate) {\n    return (\n      <div className=\"space-y-6\">\n        {/* 預覽標題 */}\n        <div className=\"flex items-center justify-between\">\n          <button\n            onClick={handleBackToList}\n            className=\"flex items-center text-blue-600 hover:text-blue-800\"\n          >\n            <svg className=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\n            </svg>\n            返回列表\n          </button>\n          <div className=\"flex items-center space-x-2\">\n            <span className={`px-2 py-1 text-xs font-medium rounded-full ${getTemplateTypeColor(selectedTemplate.type)}`}>\n              {TEMPLATE_TYPES[selectedTemplate.type]}\n            </span>\n            {selectedTemplate.isCustom && (\n              <span className=\"px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full\">\n                自定義\n              </span>\n            )}\n          </div>\n        </div>\n\n        {/* 模板詳情 */}\n        <div className=\"bg-white rounded-lg border border-gray-200 p-6\">\n          <h2 className=\"text-2xl font-bold text-gray-900 mb-2\">{selectedTemplate.name}</h2>\n          <p className=\"text-gray-600 mb-6\">{selectedTemplate.description}</p>\n\n          {/* 世界觀設定 */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">世界觀設定</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-700\">時代背景</h4>\n                <p className=\"text-gray-600\">{selectedTemplate.worldSetting.era}</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-700\">科技水平</h4>\n                <p className=\"text-gray-600\">{selectedTemplate.worldSetting.technology}</p>\n              </div>\n              <div className=\"md:col-span-2\">\n                <h4 className=\"font-medium text-gray-700\">社會結構</h4>\n                <p className=\"text-gray-600\">{selectedTemplate.worldSetting.society}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* 特殊元素 */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">特殊元素</h3>\n            <div className=\"flex flex-wrap gap-2\">\n              {selectedTemplate.worldSetting.specialElements.map((element, index) => (\n                <span\n                  key={index}\n                  className=\"px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full\"\n                >\n                  {element}\n                </span>\n              ))}\n            </div>\n          </div>\n\n          {/* 角色原型 */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">角色原型</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {selectedTemplate.characterArchetypes.slice(0, 4).map((archetype, index) => (\n                <div key={index} className=\"bg-gray-50 rounded-lg p-4\">\n                  <h4 className=\"font-medium text-gray-900 mb-1\">{archetype.name}</h4>\n                  <p className=\"text-sm text-gray-600 mb-2\">{archetype.description}</p>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {archetype.tags.map((tag, tagIndex) => (\n                      <span\n                        key={tagIndex}\n                        className=\"px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded\"\n                      >\n                        {tag}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 寫作指導 */}\n          <div className=\"mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">寫作指導</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"font-medium text-gray-700\">語調風格</h4>\n                <p className=\"text-gray-600\">{selectedTemplate.writingGuidelines.tone}</p>\n              </div>\n              <div>\n                <h4 className=\"font-medium text-gray-700\">節奏控制</h4>\n                <p className=\"text-gray-600\">{selectedTemplate.writingGuidelines.pacing}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* 範例內容 */}\n          {selectedTemplate.sampleContent && (\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">範例內容</h3>\n              <div className=\"bg-gray-50 rounded-lg p-4\">\n                <h4 className=\"font-medium text-gray-700 mb-2\">開場範例</h4>\n                <p className=\"text-gray-600 italic\">\"{selectedTemplate.sampleContent.opening}\"</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* 操作按鈕 */}\n        <div className=\"flex items-center justify-end space-x-3\">\n          {onCancel && (\n            <button\n              onClick={onCancel}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              取消\n            </button>\n          )}\n          <button\n            onClick={handleConfirmSelection}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n          >\n            選擇此模板\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 標題 */}\n      <div>\n        <h2 className=\"text-xl font-semibold text-gray-900\">選擇模板</h2>\n        <p className=\"mt-1 text-sm text-gray-600\">\n          選擇一個模板來快速開始您的創作，每個模板都包含完整的世界觀設定和角色原型\n        </p>\n      </div>\n\n      {/* 模板列表 */}\n      {templates.length === 0 ? (\n        <div className=\"text-center py-12\">\n          <svg className=\"mx-auto h-12 w-12 text-gray-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z\" />\n          </svg>\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">沒有可用的模板</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">請檢查過濾條件或聯繫管理員</p>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {templates.map((template) => (\n            <div\n              key={template.id}\n              className={`bg-white rounded-lg border-2 cursor-pointer transition-all hover:shadow-md ${\n                selectedTemplate?.id === template.id\n                  ? 'border-blue-500 shadow-md'\n                  : 'border-gray-200 hover:border-gray-300'\n              }`}\n              onClick={() => handleTemplateClick(template)}\n            >\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-3\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded-full ${getTemplateTypeColor(template.type)}`}>\n                    {TEMPLATE_TYPES[template.type]}\n                  </span>\n                  {template.isCustom && (\n                    <span className=\"px-2 py-1 text-xs font-medium bg-yellow-100 text-yellow-800 rounded-full\">\n                      自定義\n                    </span>\n                  )}\n                </div>\n                \n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">{template.name}</h3>\n                <p className=\"text-sm text-gray-600 mb-4 line-clamp-3\">{template.description}</p>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"text-xs text-gray-500\">\n                    <span className=\"font-medium\">時代：</span>{template.worldSetting.era}\n                  </div>\n                  <div className=\"flex flex-wrap gap-1\">\n                    {template.worldSetting.specialElements.slice(0, 3).map((element, index) => (\n                      <span\n                        key={index}\n                        className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\"\n                      >\n                        {element}\n                      </span>\n                    ))}\n                    {template.worldSetting.specialElements.length > 3 && (\n                      <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                        +{template.worldSetting.specialElements.length - 3}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* 底部按鈕 */}\n      {!previewMode && (\n        <div className=\"flex items-center justify-end space-x-3\">\n          {onCancel && (\n            <button\n              onClick={onCancel}\n              className=\"px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n            >\n              取消\n            </button>\n          )}\n          <button\n            onClick={handleConfirmSelection}\n            disabled={!selectedTemplate}\n            className=\"px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50 disabled:cursor-not-allowed\"\n          >\n            選擇模板\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Templates/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Tutorial/TutorialOverlay.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateTooltipPosition'. Either include it or remove the dependency array.","line":61,"column":6,"nodeType":"ArrayExpression","endLine":61,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [currentStep, isActive, currentStepData, updateTooltipPosition]","fix":{"range":[1640,1680],"text":"[currentStep, isActive, currentStepData, updateTooltipPosition]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect, useRef } from 'react';\nimport { createPortal } from 'react-dom';\nimport CosmicButton from '../UI/CosmicButton';\nimport { useNotification } from '../UI/NotificationSystem';\n\nexport interface TutorialStep {\n  id: string;\n  title: string;\n  content: string;\n  target?: string; // CSS 選擇器\n  position?: 'top' | 'bottom' | 'left' | 'right' | 'center';\n  action?: () => void;\n  skipable?: boolean;\n  highlight?: boolean;\n}\n\ninterface TutorialOverlayProps {\n  steps: TutorialStep[];\n  isActive: boolean;\n  onComplete: () => void;\n  onSkip: () => void;\n  currentStepIndex?: number;\n  onStepChange?: (index: number) => void;\n}\n\nexport const TutorialOverlay: React.FC<TutorialOverlayProps> = ({\n  steps,\n  isActive,\n  onComplete,\n  onSkip,\n  currentStepIndex = 0,\n  onStepChange\n}) => {\n  const [currentStep, setCurrentStep] = useState(currentStepIndex);\n  const [targetElement, setTargetElement] = useState<HTMLElement | null>(null);\n  const [tooltipPosition, setTooltipPosition] = useState({ x: 0, y: 0 });\n  const tooltipRef = useRef<HTMLDivElement>(null);\n  const notification = useNotification();\n\n  const currentStepData = steps[currentStep];\n\n  // 更新目標元素和位置\n  useEffect(() => {\n    if (!isActive || !currentStepData?.target) {\n      setTargetElement(null);\n      return;\n    }\n\n    const element = document.querySelector(currentStepData.target) as HTMLElement;\n    if (element) {\n      setTargetElement(element);\n      updateTooltipPosition(element);\n      \n      // 滾動到目標元素\n      element.scrollIntoView({ \n        behavior: 'smooth', \n        block: 'center',\n        inline: 'center'\n      });\n    }\n  }, [currentStep, isActive, currentStepData]);\n\n  // 更新提示框位置\n  const updateTooltipPosition = (element: HTMLElement) => {\n    const rect = element.getBoundingClientRect();\n    const tooltipRect = tooltipRef.current?.getBoundingClientRect();\n    \n    let x = 0;\n    let y = 0;\n\n    switch (currentStepData.position) {\n      case 'top':\n        x = rect.left + rect.width / 2;\n        y = rect.top - (tooltipRect?.height || 0) - 20;\n        break;\n      case 'bottom':\n        x = rect.left + rect.width / 2;\n        y = rect.bottom + 20;\n        break;\n      case 'left':\n        x = rect.left - (tooltipRect?.width || 0) - 20;\n        y = rect.top + rect.height / 2;\n        break;\n      case 'right':\n        x = rect.right + 20;\n        y = rect.top + rect.height / 2;\n        break;\n      default:\n        x = window.innerWidth / 2;\n        y = window.innerHeight / 2;\n    }\n\n    // 確保提示框在視窗範圍內\n    x = Math.max(20, Math.min(x, window.innerWidth - (tooltipRect?.width || 0) - 20));\n    y = Math.max(20, Math.min(y, window.innerHeight - (tooltipRect?.height || 0) - 20));\n\n    setTooltipPosition({ x, y });\n  };\n\n  // 處理下一步\n  const handleNext = () => {\n    if (currentStepData.action) {\n      currentStepData.action();\n    }\n\n    if (currentStep < steps.length - 1) {\n      const nextStep = currentStep + 1;\n      setCurrentStep(nextStep);\n      onStepChange?.(nextStep);\n    } else {\n      handleComplete();\n    }\n  };\n\n  // 處理上一步\n  const handlePrevious = () => {\n    if (currentStep > 0) {\n      const prevStep = currentStep - 1;\n      setCurrentStep(prevStep);\n      onStepChange?.(prevStep);\n    }\n  };\n\n  // 完成教學\n  const handleComplete = () => {\n    notification.success('教學完成', '恭喜您完成了新手引導！');\n    onComplete();\n  };\n\n  // 跳過教學\n  const handleSkip = () => {\n    notification.info('已跳過教學', '您可以隨時在設定中重新開啟教學');\n    onSkip();\n  };\n\n  if (!isActive || !currentStepData) {\n    return null;\n  }\n\n  const overlayContent = (\n    <>\n      {/* 遮罩層 */}\n      <div className=\"fixed inset-0 bg-black/70 z-50 transition-opacity duration-300\">\n        {/* 高亮區域 */}\n        {targetElement && currentStepData.highlight && (\n          <div\n            className=\"absolute border-4 border-gold-400 rounded-lg shadow-lg shadow-gold-400/50 animate-pulse-glow\"\n            style={{\n              left: targetElement.getBoundingClientRect().left - 8,\n              top: targetElement.getBoundingClientRect().top - 8,\n              width: targetElement.getBoundingClientRect().width + 16,\n              height: targetElement.getBoundingClientRect().height + 16,\n              pointerEvents: 'none'\n            }}\n          />\n        )}\n      </div>\n\n      {/* 教學提示框 */}\n      <div\n        ref={tooltipRef}\n        className=\"fixed z-50 bg-cosmic-900/95 backdrop-blur-sm border border-gold-500/30 rounded-lg shadow-2xl max-w-md w-full mx-4 transform transition-all duration-300\"\n        style={{\n          left: currentStepData.position === 'center' ? '50%' : tooltipPosition.x,\n          top: currentStepData.position === 'center' ? '50%' : tooltipPosition.y,\n          transform: currentStepData.position === 'center' ? 'translate(-50%, -50%)' : \n                    currentStepData.position === 'top' || currentStepData.position === 'bottom' ? 'translateX(-50%)' :\n                    currentStepData.position === 'left' || currentStepData.position === 'right' ? 'translateY(-50%)' : 'none'\n        }}\n      >\n        {/* 箭頭指示器 */}\n        {targetElement && currentStepData.position !== 'center' && (\n          <div\n            className={`absolute w-0 h-0 border-8 ${\n              currentStepData.position === 'top' ? 'border-t-cosmic-900 border-x-transparent border-b-transparent top-full left-1/2 -translate-x-1/2' :\n              currentStepData.position === 'bottom' ? 'border-b-cosmic-900 border-x-transparent border-t-transparent bottom-full left-1/2 -translate-x-1/2' :\n              currentStepData.position === 'left' ? 'border-l-cosmic-900 border-y-transparent border-r-transparent left-full top-1/2 -translate-y-1/2' :\n              'border-r-cosmic-900 border-y-transparent border-l-transparent right-full top-1/2 -translate-y-1/2'\n            }`}\n          />\n        )}\n\n        <div className=\"p-6\">\n          {/* 標題和進度 */}\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"text-lg font-cosmic text-gold-400\">\n              {currentStepData.title}\n            </h3>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n              <span>{currentStep + 1}</span>\n              <span>/</span>\n              <span>{steps.length}</span>\n            </div>\n          </div>\n\n          {/* 進度條 */}\n          <div className=\"w-full bg-gray-700 rounded-full h-1 mb-4\">\n            <div \n              className=\"bg-gradient-to-r from-gold-500 to-gold-600 h-1 rounded-full transition-all duration-300\"\n              style={{ width: `${((currentStep + 1) / steps.length) * 100}%` }}\n            />\n          </div>\n\n          {/* 內容 */}\n          <div className=\"text-gray-300 text-sm leading-relaxed mb-6\">\n            {currentStepData.content}\n          </div>\n\n          {/* 操作按鈕 */}\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex space-x-2\">\n              {currentStep > 0 && (\n                <CosmicButton\n                  variant=\"secondary\"\n                  size=\"small\"\n                  onClick={handlePrevious}\n                >\n                  上一步\n                </CosmicButton>\n              )}\n            </div>\n\n            <div className=\"flex space-x-2\">\n              {currentStepData.skipable !== false && (\n                <CosmicButton\n                  variant=\"secondary\"\n                  size=\"small\"\n                  onClick={handleSkip}\n                >\n                  跳過教學\n                </CosmicButton>\n              )}\n              \n              <CosmicButton\n                variant=\"primary\"\n                size=\"small\"\n                onClick={handleNext}\n              >\n                {currentStep === steps.length - 1 ? '完成' : '下一步'}\n              </CosmicButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n\n  return createPortal(overlayContent, document.body);\n};\n\n// 教學管理 Hook\nexport const useTutorial = () => {\n  const [isActive, setIsActive] = useState(false);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [currentTutorialId, setCurrentTutorialId] = useState<string | null>(null);\n  const [completedTutorials, setCompletedTutorials] = useState<string[]>([]);\n\n  useEffect(() => {\n    // 從 localStorage 載入已完成的教學\n    const completed = localStorage.getItem('completed-tutorials');\n    if (completed) {\n      setCompletedTutorials(JSON.parse(completed));\n    }\n  }, []);\n\n  const startTutorial = (tutorialId: string) => {\n    setCurrentTutorialId(tutorialId);\n    setCurrentStep(0);\n    setIsActive(true);\n  };\n\n  const completeTutorial = (tutorialId: string) => {\n    const updated = [...completedTutorials, tutorialId];\n    setCompletedTutorials(updated);\n    localStorage.setItem('completed-tutorials', JSON.stringify(updated));\n    setIsActive(false);\n    setCurrentTutorialId(null);\n  };\n\n  const skipTutorial = (tutorialId: string) => {\n    const updated = [...completedTutorials, tutorialId];\n    setCompletedTutorials(updated);\n    localStorage.setItem('completed-tutorials', JSON.stringify(updated));\n    setIsActive(false);\n    setCurrentTutorialId(null);\n  };\n\n  const resetTutorials = () => {\n    setCompletedTutorials([]);\n    localStorage.removeItem('completed-tutorials');\n  };\n\n  const isTutorialCompleted = (tutorialId: string) => {\n    return completedTutorials.includes(tutorialId);\n  };\n\n  return {\n    isActive,\n    currentStep,\n    currentTutorialId,\n    setCurrentStep,\n    startTutorial,\n    completeTutorial,\n    skipTutorial,\n    resetTutorials,\n    isTutorialCompleted\n  };\n};\n\nexport default TutorialOverlay;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/AIStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/AutoBackupIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[570,573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[570,573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport AutoBackupService from '../../services/autoBackupService';\n\ninterface AutoBackupIndicatorProps {\n  className?: string;\n  showText?: boolean;\n  size?: 'small' | 'medium' | 'large';\n}\n\nconst AutoBackupIndicator: React.FC<AutoBackupIndicatorProps> = ({\n  className = '',\n  showText = true,\n  size = 'medium'\n}) => {\n  const [status, setStatus] = useState(AutoBackupService.getStatus());\n  const [countdown, setCountdown] = useState(0);\n\n  useEffect(() => {\n    // 監聽狀態變更\n    const handleStatusChange = (newStatus: any) => {\n      setStatus(newStatus);\n    };\n\n    AutoBackupService.addStatusListener(handleStatusChange);\n\n    // 倒數計時器\n    const countdownInterval = setInterval(() => {\n      setCountdown(AutoBackupService.getNextBackupCountdown());\n    }, 1000);\n\n    return () => {\n      AutoBackupService.removeStatusListener(handleStatusChange);\n      clearInterval(countdownInterval);\n    };\n  }, []);\n\n  const getStatusIcon = () => {\n    if (status.error) {\n      return (\n        <svg className=\"w-4 h-4 text-red-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n        </svg>\n      );\n    }\n\n    if (!status.enabled) {\n      return (\n        <svg className=\"w-4 h-4 text-gray-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n          <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L5.636 5.636\" />\n        </svg>\n      );\n    }\n\n    if (status.enabled && countdown > 0) {\n      return (\n        <div className=\"relative\">\n          <svg className=\"w-4 h-4 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z\" />\n          </svg>\n          {countdown < 3600 && ( // 小於1小時時顯示倒數\n            <div className=\"absolute -top-1 -right-1 bg-blue-500 text-white text-xs rounded-full w-3 h-3 flex items-center justify-center\">\n              <div className=\"w-1 h-1 bg-white rounded-full animate-pulse\"></div>\n            </div>\n          )}\n        </div>\n      );\n    }\n\n    return (\n      <svg className=\"w-4 h-4 text-green-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z\" />\n      </svg>\n    );\n  };\n\n  const getStatusText = () => {\n    if (status.error) {\n      return `備份錯誤: ${status.error}`;\n    }\n\n    if (!status.enabled) {\n      return '自動備份已停用';\n    }\n\n    if (countdown > 0) {\n      return `下次備份: ${AutoBackupService.formatTimeInterval(countdown)}`;\n    }\n\n    if (status.lastBackup) {\n      const timeSince = Date.now() - status.lastBackup.getTime();\n      const timeString = AutoBackupService.formatTimeInterval(Math.floor(timeSince / 1000));\n      return `上次備份: ${timeString}前`;\n    }\n\n    return '等待首次備份';\n  };\n\n  const getStatusColor = () => {\n    if (status.error) return 'text-red-500';\n    if (!status.enabled) return 'text-gray-500';\n    if (countdown > 0) return 'text-blue-500';\n    return 'text-green-500';\n  };\n\n  const sizeClasses = {\n    small: 'text-xs',\n    medium: 'text-sm',\n    large: 'text-base'\n  };\n\n  const health = AutoBackupService.checkBackupHealth();\n\n  return (\n    <div \n      className={`flex items-center space-x-2 ${sizeClasses[size]} ${getStatusColor()} ${className}`}\n      title={`備份狀態: ${health.message}`}\n    >\n      <div className=\"flex-shrink-0\">\n        {getStatusIcon()}\n      </div>\n      {showText && (\n        <span className=\"truncate\">\n          {getStatusText()}\n        </span>\n      )}\n      {status.backupCount > 0 && (\n        <span className=\"text-xs text-gray-400\">\n          ({status.backupCount})\n        </span>\n      )}\n    </div>\n  );\n};\n\nexport default AutoBackupIndicator;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ConfirmDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/CosmicBackground.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/CosmicButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/CosmicInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/CosmicNotification.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":33,"column":6,"nodeType":"ArrayExpression","endLine":33,"endColumn":16,"suggestions":[{"desc":"Update the dependencies array to be: [duration, handleClose]","fix":{"range":[723,733],"text":"[duration, handleClose]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\n\ninterface CosmicNotificationProps {\n  type: 'success' | 'error' | 'warning' | 'info' | 'magic';\n  title: string;\n  message?: string;\n  duration?: number;\n  onClose: () => void;\n  className?: string;\n}\n\nconst CosmicNotification: React.FC<CosmicNotificationProps> = ({\n  type,\n  title,\n  message,\n  duration = 5000,\n  onClose,\n  className = '',\n}) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLeaving, setIsLeaving] = useState(false);\n\n  useEffect(() => {\n    // 進入動畫\n    setTimeout(() => setIsVisible(true), 100);\n\n    // 自動關閉\n    const timer = setTimeout(() => {\n      handleClose();\n    }, duration);\n\n    return () => clearTimeout(timer);\n  }, [duration]);\n\n  const handleClose = () => {\n    setIsLeaving(true);\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const typeConfig = {\n    success: {\n      icon: '✨',\n      bgColor: 'bg-green-900/80',\n      borderColor: 'border-green-500',\n      textColor: 'text-green-400',\n      glowColor: 'shadow-green-500/20',\n    },\n    error: {\n      icon: '⚠️',\n      bgColor: 'bg-red-900/80',\n      borderColor: 'border-red-500',\n      textColor: 'text-red-400',\n      glowColor: 'shadow-red-500/20',\n    },\n    warning: {\n      icon: '🔔',\n      bgColor: 'bg-yellow-900/80',\n      borderColor: 'border-yellow-500',\n      textColor: 'text-yellow-400',\n      glowColor: 'shadow-yellow-500/20',\n    },\n    info: {\n      icon: 'ℹ️',\n      bgColor: 'bg-blue-900/80',\n      borderColor: 'border-blue-500',\n      textColor: 'text-blue-400',\n      glowColor: 'shadow-blue-500/20',\n    },\n    magic: {\n      icon: '🔮',\n      bgColor: 'bg-mystic-900/80',\n      borderColor: 'border-mystic-500',\n      textColor: 'text-mystic-400',\n      glowColor: 'shadow-mystic-500/20',\n    },\n  };\n\n  const config = typeConfig[type];\n\n  return (\n    <div\n      className={`\n        fixed top-4 right-4 z-50 max-w-sm w-full\n        ${config.bgColor} ${config.borderColor} ${config.glowColor}\n        backdrop-blur-sm border rounded-lg shadow-xl\n        transform transition-all duration-300 ease-out\n        ${isVisible && !isLeaving ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}\n        ${className}\n      `}\n    >\n      {/* 背景光效 */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/5 to-transparent animate-pulse\" />\n      \n      <div className=\"relative p-4\">\n        <div className=\"flex items-start space-x-3\">\n          {/* 圖標 */}\n          <div className=\"flex-shrink-0\">\n            <span className=\"text-xl animate-bounce\">{config.icon}</span>\n          </div>\n          \n          {/* 內容 */}\n          <div className=\"flex-1 min-w-0\">\n            <h4 className={`font-medium ${config.textColor} font-cosmic`}>\n              {title}\n            </h4>\n            {message && (\n              <p className=\"mt-1 text-sm text-gray-300\">\n                {message}\n              </p>\n            )}\n          </div>\n          \n          {/* 關閉按鈕 */}\n          <button\n            onClick={handleClose}\n            className=\"flex-shrink-0 text-gray-400 hover:text-white transition-colors\"\n          >\n            <span className=\"sr-only\">關閉</span>\n            <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n            </svg>\n          </button>\n        </div>\n        \n        {/* 進度條 */}\n        <div className=\"mt-3 w-full bg-cosmic-700 rounded-full h-1\">\n          <div \n            className={`h-1 rounded-full bg-gradient-to-r ${\n              type === 'success' ? 'from-green-500 to-green-600' :\n              type === 'error' ? 'from-red-500 to-red-600' :\n              type === 'warning' ? 'from-yellow-500 to-yellow-600' :\n              type === 'info' ? 'from-blue-500 to-blue-600' :\n              'from-mystic-500 to-mystic-600'\n            }`}\n            style={{\n              animation: `shrink ${duration}ms linear`,\n            }}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CosmicNotification;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ErrorFallback.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ErrorToast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/MagicCircle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Menu.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2255,2258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2255,2258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useRef, useEffect } from 'react';\n\ninterface MenuProps {\n  trigger: React.ReactNode;\n  children: React.ReactNode;\n  position?: 'bottom-left' | 'bottom-right' | 'top-left' | 'top-right';\n  className?: string;\n}\n\ninterface MenuItemProps {\n  children: React.ReactNode;\n  icon?: React.ReactNode;\n  onClick?: (e: React.MouseEvent) => void;\n  className?: string;\n  disabled?: boolean;\n}\n\nexport const Menu: React.FC<MenuProps> = ({ \n  trigger, \n  children, \n  position = 'bottom-left',\n  className = ''\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLDivElement>(null);\n\n  const toggleMenu = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsOpen(!isOpen);\n  };\n\n  const closeMenu = () => {\n    setIsOpen(false);\n  };\n\n  // 點擊外部關閉選單\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        menuRef.current && \n        !menuRef.current.contains(event.target as Node) &&\n        triggerRef.current && \n        !triggerRef.current.contains(event.target as Node)\n      ) {\n        setIsOpen(false);\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [isOpen]);\n\n  // 根據位置設置選單樣式\n  const getPositionClasses = () => {\n    switch (position) {\n      case 'bottom-right':\n        return 'right-0 top-full mt-1';\n      case 'top-left':\n        return 'left-0 bottom-full mb-1';\n      case 'top-right':\n        return 'right-0 bottom-full mb-1';\n      case 'bottom-left':\n      default:\n        return 'left-0 top-full mt-1';\n    }\n  };\n\n  return (\n    <div className=\"relative\">\n      <div ref={triggerRef} onClick={toggleMenu}>\n        {trigger}\n      </div>\n      \n      {isOpen && (\n        <div \n          ref={menuRef}\n          className={`absolute z-50 min-w-[180px] bg-cosmic-800 border border-cosmic-700 rounded-lg shadow-lg py-1 ${getPositionClasses()} ${className}`}\n        >\n          {React.Children.map(children, child => {\n            if (React.isValidElement(child)) {\n              return React.cloneElement(child as React.ReactElement<any>, {\n                closeMenu\n              });\n            }\n            return child;\n          })}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport const MenuItem: React.FC<MenuItemProps & { closeMenu?: () => void }> = ({ \n  children, \n  icon, \n  onClick, \n  className = '',\n  disabled = false,\n  closeMenu\n}) => {\n  const handleClick = (e: React.MouseEvent) => {\n    if (disabled) return;\n    \n    if (onClick) {\n      onClick(e);\n    }\n    \n    if (closeMenu) {\n      closeMenu();\n    }\n  };\n\n  return (\n    <div \n      className={`px-4 py-2 flex items-center text-sm cursor-pointer hover:bg-cosmic-700 transition-colors ${disabled ? 'opacity-50 cursor-not-allowed' : ''} ${className}`}\n      onClick={handleClick}\n    >\n      {icon && <span className=\"mr-2\">{icon}</span>}\n      {children}\n    </div>\n  );\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ModalContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/NotificationContainer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/NotificationSystem.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleClose'. Either include it or remove the dependency array.","line":45,"column":6,"nodeType":"ArrayExpression","endLine":45,"endColumn":29,"suggestions":[{"desc":"Update the dependencies array to be: [handleClose, notification.duration]","fix":{"range":[1298,1321],"text":"[handleClose, notification.duration]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState, store } from '../../store/store';\nimport { removeNotification, addNotification, clearNotifications } from '../../store/slices/notificationSlice';\n\nexport interface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message?: string;\n  duration?: number; // 毫秒，0 表示不自動消失\n  actions?: NotificationAction[];\n  timestamp: number;\n}\n\nexport interface NotificationAction {\n  label: string;\n  action: () => void;\n  style?: 'primary' | 'secondary' | 'danger';\n}\n\ninterface NotificationItemProps {\n  notification: Notification;\n  onClose: () => void;\n}\n\nconst NotificationItem: React.FC<NotificationItemProps> = ({ notification, onClose }) => {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isLeaving, setIsLeaving] = useState(false);\n\n  useEffect(() => {\n    // 進入動畫\n    const timer = setTimeout(() => setIsVisible(true), 50);\n    return () => clearTimeout(timer);\n  }, []);\n\n  useEffect(() => {\n    // 自動消失\n    if (notification.duration && notification.duration > 0) {\n      const timer = setTimeout(() => {\n        handleClose();\n      }, notification.duration);\n      return () => clearTimeout(timer);\n    }\n  }, [notification.duration]);\n\n  const handleClose = () => {\n    setIsLeaving(true);\n    setTimeout(() => {\n      onClose();\n    }, 300);\n  };\n\n  const getTypeStyles = (type: Notification['type']) => {\n    switch (type) {\n      case 'success':\n        return {\n          bg: 'bg-green-900/90',\n          border: 'border-green-500',\n          icon: '✅',\n          iconBg: 'bg-green-500'\n        };\n      case 'error':\n        return {\n          bg: 'bg-red-900/90',\n          border: 'border-red-500',\n          icon: '❌',\n          iconBg: 'bg-red-500'\n        };\n      case 'warning':\n        return {\n          bg: 'bg-yellow-900/90',\n          border: 'border-yellow-500',\n          icon: '⚠️',\n          iconBg: 'bg-yellow-500'\n        };\n      case 'info':\n        return {\n          bg: 'bg-blue-900/90',\n          border: 'border-blue-500',\n          icon: 'ℹ️',\n          iconBg: 'bg-blue-500'\n        };\n      default:\n        return {\n          bg: 'bg-gray-900/90',\n          border: 'border-gray-500',\n          icon: '📝',\n          iconBg: 'bg-gray-500'\n        };\n    }\n  };\n\n  const styles = getTypeStyles(notification.type);\n\n  return (\n    <div className={`\n      ${styles.bg} ${styles.border} border-l-4 \n      backdrop-blur-sm rounded-lg p-4 mb-3 \n      shadow-lg transform transition-all duration-300 ease-out\n      ${isVisible && !isLeaving ? 'translate-x-0 opacity-100' : 'translate-x-full opacity-0'}\n      ${isLeaving ? 'scale-95' : 'scale-100'}\n      hover:scale-[1.02] hover:shadow-xl\n      max-w-sm w-full\n    `}>\n      <div className=\"flex items-start space-x-3\">\n        {/* 圖標 */}\n        <div className={`${styles.iconBg} rounded-full p-1 flex-shrink-0`}>\n          <span className=\"text-white text-sm\">{styles.icon}</span>\n        </div>\n        \n        {/* 內容 */}\n        <div className=\"flex-1 min-w-0\">\n          <h4 className=\"font-semibold text-white text-sm\">\n            {notification.title}\n          </h4>\n          \n          {notification.message && (\n            <p className=\"text-gray-300 text-xs mt-1 leading-relaxed\">\n              {notification.message}\n            </p>\n          )}\n          \n          {/* 操作按鈕 */}\n          {notification.actions && notification.actions.length > 0 && (\n            <div className=\"flex space-x-2 mt-3\">\n              {notification.actions.map((action, index) => (\n                <button\n                  key={index}\n                  onClick={() => {\n                    action.action();\n                    handleClose();\n                  }}\n                  className={`\n                    px-3 py-1 rounded text-xs font-medium transition-colors\n                    ${action.style === 'primary' ? 'bg-gold-600 hover:bg-gold-700 text-white' :\n                      action.style === 'danger' ? 'bg-red-600 hover:bg-red-700 text-white' :\n                      'bg-gray-600 hover:bg-gray-700 text-white'}\n                  `}\n                >\n                  {action.label}\n                </button>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {/* 關閉按鈕 */}\n        <button\n          onClick={handleClose}\n          className=\"text-gray-400 hover:text-white transition-colors p-1 flex-shrink-0\"\n          title=\"關閉\"\n        >\n          <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\n          </svg>\n        </button>\n      </div>\n      \n      {/* 進度條（用於顯示自動消失倒計時） */}\n      {notification.duration && notification.duration > 0 && (\n        <div className=\"mt-3 w-full bg-gray-700 rounded-full h-1\">\n          <div \n            className=\"bg-white/30 h-1 rounded-full transition-all ease-linear\"\n            style={{ \n              animation: `shrink ${notification.duration}ms linear`,\n              width: '100%'\n            }}\n          ></div>\n        </div>\n      )}\n    </div>\n  );\n};\n\n// 通知容器組件\nexport const NotificationContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  const notifications = useSelector((state: RootState) => state.notification?.notifications || []);\n\n  const handleCloseNotification = (id: string) => {\n    dispatch(removeNotification(id));\n  };\n\n  if (notifications.length === 0) {\n    return null;\n  }\n\n  return (\n    <>\n      {/* CSS 動畫定義 */}\n      <style>{`\n        @keyframes shrink {\n          from { width: 100%; }\n          to { width: 0%; }\n        }\n      `}</style>\n      \n      <div className=\"fixed top-4 right-4 z-50 space-y-2\">\n        {notifications\n          .sort((a, b) => b.timestamp - a.timestamp)\n          .slice(0, 5) // 最多顯示5個通知\n          .map((notification) => (\n            <NotificationItem\n              key={notification.id}\n              notification={notification}\n              onClose={() => handleCloseNotification(notification.id)}\n            />\n          ))}\n      </div>\n    </>\n  );\n};\n\n// 通知工具函數\nexport class NotificationService {\n  static success(title: string, message?: string, duration: number = 4000) {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      duration\n    });\n  }\n\n  static error(title: string, message?: string, duration: number = 6000) {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      duration\n    });\n  }\n\n  static warning(title: string, message?: string, duration: number = 5000) {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      duration\n    });\n  }\n\n  static info(title: string, message?: string, duration: number = 4000) {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      duration\n    });\n  }\n\n  static show(notification: Omit<Notification, 'id' | 'timestamp'>) {\n    const fullNotification: Notification = {\n      ...notification,\n      id: `notification-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,\n      timestamp: Date.now()\n    };\n\n    store.dispatch(addNotification(fullNotification));\n    return fullNotification.id;\n  }\n\n  static remove(id: string) {\n    store.dispatch(removeNotification(id));\n  }\n\n  static clear() {\n    store.dispatch(clearNotifications());\n  }\n}\n\n// 快速通知 Hook\nexport const useNotification = () => {\n  return {\n    success: NotificationService.success,\n    error: NotificationService.error,\n    warning: NotificationService.warning,\n    info: NotificationService.info,\n    show: NotificationService.show,\n    remove: NotificationService.remove,\n    clear: NotificationService.clear\n  };\n};\n\nexport default NotificationContainer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ParticleEffect.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/Progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/ProgressIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/SaveStatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/SaveStatusPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/SimpleErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/StarField.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/UI/StatusIndicator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Update/UpdateManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/components/Update/UpdateSettings.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadSettings'. Either include it or remove the dependency array.","line":28,"column":6,"nodeType":"ArrayExpression","endLine":28,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadSettings]","fix":{"range":[812,814],"text":"[loadSettings]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { RefreshCw, Settings, Bell, Download, Shield } from 'lucide-react';\nimport api from '../../api';\n\ninterface UpdateSettings {\n  autoCheck: boolean;\n  autoDownload: boolean;\n  checkInterval: number; // 小時\n  notifyOnUpdate: boolean;\n  allowPrerelease: boolean;\n}\n\nconst UpdateSettings: React.FC = () => {\n  const [settings, setSettings] = useState<UpdateSettings>({\n    autoCheck: true,\n    autoDownload: false,\n    checkInterval: 24,\n    notifyOnUpdate: true,\n    allowPrerelease: false,\n  });\n  const [currentVersion, setCurrentVersion] = useState<string>('');\n  const [lastCheckTime, setLastCheckTime] = useState<string>('');\n  const [isChecking, setIsChecking] = useState(false);\n\n  useEffect(() => {\n    loadSettings();\n    getCurrentVersion();\n  }, []);\n\n  const loadSettings = async () => {\n    try {\n      const appSettings = await api.settings.getAll();\n      if (appSettings.update) {\n        setSettings({ ...settings, ...appSettings.update });\n      }\n      \n      // 獲取上次檢查時間\n      if (appSettings.lastUpdateCheck) {\n        setLastCheckTime(new Date(appSettings.lastUpdateCheck).toLocaleString('zh-TW'));\n      }\n    } catch (error) {\n      console.error('載入更新設置失敗:', error);\n    }\n  };\n\n  const getCurrentVersion = async () => {\n    try {\n      const version = await api.system.getAppVersion();\n      setCurrentVersion(version);\n    } catch (error) {\n      console.error('獲取版本失敗:', error);\n    }\n  };\n\n  const saveSettings = async (newSettings: UpdateSettings) => {\n    try {\n      // 保存更新設定\n      await api.settings.set('update', newSettings);\n      await api.settings.set('lastUpdateCheck', Date.now());\n      \n      setSettings(newSettings);\n      setLastCheckTime(new Date().toLocaleString('zh-TW'));\n    } catch (error) {\n      console.error('保存更新設置失敗:', error);\n    }\n  };\n\n  const handleSettingChange = (key: keyof UpdateSettings, value: boolean | number) => {\n    const newSettings = { ...settings, [key]: value };\n    saveSettings(newSettings);\n  };\n\n  const handleManualCheck = async () => {\n    setIsChecking(true);\n    try {\n      await api.updates.checkForUpdates();\n      setLastCheckTime(new Date().toLocaleString('zh-TW'));\n    } catch (error) {\n      console.error('手動檢查更新失敗:', error);\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const intervalOptions = [\n    { value: 1, label: '每小時' },\n    { value: 6, label: '每6小時' },\n    { value: 12, label: '每12小時' },\n    { value: 24, label: '每天' },\n    { value: 168, label: '每週' },\n    { value: 720, label: '每月' },\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* 當前版本信息 */}\n      <div className=\"bg-gray-50 rounded-lg p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-medium text-gray-900\">當前版本</h3>\n            <p className=\"text-sm text-gray-600\">Genesis Chronicle v{currentVersion}</p>\n            {lastCheckTime && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                上次檢查: {lastCheckTime}\n              </p>\n            )}\n          </div>\n          <button\n            onClick={handleManualCheck}\n            disabled={isChecking}\n            className=\"bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white px-4 py-2 rounded-lg flex items-center space-x-2 transition-colors\"\n          >\n            <RefreshCw className={`w-4 h-4 ${isChecking ? 'animate-spin' : ''}`} />\n            <span>{isChecking ? '檢查中...' : '立即檢查'}</span>\n          </button>\n        </div>\n      </div>\n\n      {/* 自動更新設置 */}\n      <div className=\"space-y-4\">\n        <h3 className=\"text-lg font-medium text-gray-900 flex items-center\">\n          <Settings className=\"w-5 h-5 mr-2\" />\n          自動更新設置\n        </h3>\n\n        {/* 自動檢查更新 */}\n        <div className=\"flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg\">\n          <div className=\"flex items-center\">\n            <RefreshCw className=\"w-5 h-5 text-blue-500 mr-3\" />\n            <div>\n              <h4 className=\"font-medium text-gray-900\">自動檢查更新</h4>\n              <p className=\"text-sm text-gray-600\">定期檢查是否有新版本可用</p>\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={settings.autoCheck}\n              onChange={(e) => handleSettingChange('autoCheck', e.target.checked)}\n              className=\"sr-only peer\"\n            />\n            <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n          </label>\n        </div>\n\n        {/* 檢查間隔 */}\n        {settings.autoCheck && (\n          <div className=\"flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg\">\n            <div>\n              <h4 className=\"font-medium text-gray-900\">檢查間隔</h4>\n              <p className=\"text-sm text-gray-600\">設置自動檢查更新的頻率</p>\n            </div>\n            <select\n              value={settings.checkInterval}\n              onChange={(e) => handleSettingChange('checkInterval', parseInt(e.target.value))}\n              className=\"border border-gray-300 rounded-lg px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              {intervalOptions.map((option) => (\n                <option key={option.value} value={option.value}>\n                  {option.label}\n                </option>\n              ))}\n            </select>\n          </div>\n        )}\n\n        {/* 自動下載更新 */}\n        <div className=\"flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Download className=\"w-5 h-5 text-green-500 mr-3\" />\n            <div>\n              <h4 className=\"font-medium text-gray-900\">自動下載更新</h4>\n              <p className=\"text-sm text-gray-600\">發現更新時自動下載（仍需手動安裝）</p>\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={settings.autoDownload}\n              onChange={(e) => handleSettingChange('autoDownload', e.target.checked)}\n              className=\"sr-only peer\"\n            />\n            <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n          </label>\n        </div>\n\n        {/* 更新通知 */}\n        <div className=\"flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Bell className=\"w-5 h-5 text-yellow-500 mr-3\" />\n            <div>\n              <h4 className=\"font-medium text-gray-900\">更新通知</h4>\n              <p className=\"text-sm text-gray-600\">發現更新時顯示通知</p>\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={settings.notifyOnUpdate}\n              onChange={(e) => handleSettingChange('notifyOnUpdate', e.target.checked)}\n              className=\"sr-only peer\"\n            />\n            <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n          </label>\n        </div>\n\n        {/* 預發布版本 */}\n        <div className=\"flex items-center justify-between p-4 bg-white border border-gray-200 rounded-lg\">\n          <div className=\"flex items-center\">\n            <Shield className=\"w-5 h-5 text-purple-500 mr-3\" />\n            <div>\n              <h4 className=\"font-medium text-gray-900\">預發布版本</h4>\n              <p className=\"text-sm text-gray-600\">接收 Beta 版本和預發布更新</p>\n            </div>\n          </div>\n          <label className=\"relative inline-flex items-center cursor-pointer\">\n            <input\n              type=\"checkbox\"\n              checked={settings.allowPrerelease}\n              onChange={(e) => handleSettingChange('allowPrerelease', e.target.checked)}\n              className=\"sr-only peer\"\n            />\n            <div className=\"w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600\"></div>\n          </label>\n        </div>\n      </div>\n\n      {/* 更新說明 */}\n      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n        <h4 className=\"font-medium text-blue-900 mb-2\">關於自動更新</h4>\n        <ul className=\"text-sm text-blue-800 space-y-1\">\n          <li>• 自動更新功能會在背景檢查新版本</li>\n          <li>• 即使啟用自動下載，仍需要您的確認才會安裝</li>\n          <li>• 安裝更新時應用程式會重新啟動</li>\n          <li>• 建議定期備份您的創作內容</li>\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateSettings;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/characterArchetypes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/defaultTemplates.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/faqData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/isekaiWorldElements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/templates/fantasyTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/templates/isekaiTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/templates/schoolTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/templates/scifiTemplate.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/data/tutorialSteps.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/redux.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/useAutoSave.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'currentChapter'. Either include it or remove the dependency array.","line":209,"column":6,"nodeType":"ArrayExpression","endLine":209,"endColumn":71,"suggestions":[{"desc":"Update the dependencies array to be: [currentChapter, currentChapter.content, currentChapter.title, triggerAutoSave]","fix":{"range":[5955,6020],"text":"[currentChapter, currentChapter.content, currentChapter.title, triggerAutoSave]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect, useRef, useCallback, useState } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { updateChapter, setSaving, setLastSaved } from '../store/slices/chaptersSlice';\nimport { addNotification } from '../store/slices/uiSlice';\nimport { useSettings } from './useSettings';\n\ninterface UseAutoSaveOptions {\n  delay?: number; // 延遲時間（毫秒）\n  enabled?: boolean; // 是否啟用自動儲存\n  onSave?: () => void; // 儲存成功回調\n  onError?: (error: Error) => void; // 儲存失敗回調\n}\n\ninterface AutoSaveStatus {\n  status: 'idle' | 'pending' | 'saving' | 'saved' | 'error';\n  lastSaved: Date | null;\n  nextSaveIn: number; // 下次儲存倒數（秒）\n  error: string | null;\n}\n\nexport const useAutoSave = (options: UseAutoSaveOptions = {}) => {\n  const { delay, enabled: optionsEnabled = true, onSave, onError } = options;\n  const dispatch = useAppDispatch();\n  const { settings } = useSettings();\n  const { currentChapter, saving, lastSaved } = useAppSelector(state => state.chapters);\n  \n  // 使用設定中的自動儲存配置\n  const autoSaveEnabled = optionsEnabled && settings.autoSave;\n  const autoSaveDelay = delay || settings.autoSaveInterval;\n  \n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const countdownRef = useRef<NodeJS.Timeout | null>(null);\n  const lastContentRef = useRef<string>('');\n  const lastTitleRef = useRef<string>('');\n  const hasChangesRef = useRef(false);\n  const saveAttemptRef = useRef(0);\n  \n  const [autoSaveStatus, setAutoSaveStatus] = useState<AutoSaveStatus>({\n    status: 'idle',\n    lastSaved: null,\n    nextSaveIn: 0,\n    error: null,\n  });\n\n  // 更新自動儲存狀態\n  const updateStatus = useCallback((status: Partial<AutoSaveStatus>) => {\n    setAutoSaveStatus(prev => ({ ...prev, ...status }));\n  }, []);\n\n  // 倒數計時器\n  const startCountdown = useCallback((seconds: number) => {\n    updateStatus({ nextSaveIn: seconds });\n    \n    const countdown = () => {\n      setAutoSaveStatus(prev => {\n        if (prev.nextSaveIn <= 1) {\n          return { ...prev, nextSaveIn: 0 };\n        }\n        return { ...prev, nextSaveIn: prev.nextSaveIn - 1 };\n      });\n    };\n    \n    countdownRef.current = setInterval(countdown, 1000);\n  }, [updateStatus]);\n\n  // 停止倒數計時器\n  const stopCountdown = useCallback(() => {\n    if (countdownRef.current) {\n      clearInterval(countdownRef.current);\n      countdownRef.current = null;\n    }\n    updateStatus({ nextSaveIn: 0 });\n  }, [updateStatus]);\n\n  // 手動儲存\n  const saveNow = useCallback(async (showNotification = true) => {\n    if (!currentChapter || saving) return false;\n\n    try {\n      updateStatus({ status: 'saving', error: null });\n      stopCountdown();\n      \n      dispatch(setSaving(true));\n      await dispatch(updateChapter(currentChapter)).unwrap();\n      \n      const now = new Date();\n      dispatch(setLastSaved(now));\n      hasChangesRef.current = false;\n      saveAttemptRef.current = 0;\n      \n      updateStatus({ \n        status: 'saved', \n        lastSaved: now,\n        error: null \n      });\n      \n      if (showNotification) {\n        dispatch(addNotification({\n          type: 'success',\n          title: '儲存成功',\n          message: '章節已儲存',\n          duration: 2000,\n        }));\n      }\n      \n      onSave?.();\n      return true;\n      \n    } catch (error) {\n      const errorMessage = error instanceof Error ? error.message : '儲存時發生未知錯誤';\n      console.error('儲存失敗:', error);\n      \n      saveAttemptRef.current += 1;\n      \n      updateStatus({ \n        status: 'error', \n        error: errorMessage \n      });\n      \n      if (showNotification) {\n        dispatch(addNotification({\n          type: 'error',\n          title: '儲存失敗',\n          message: `章節儲存失敗: ${errorMessage}`,\n          duration: 5000,\n        }));\n      }\n      \n      onError?.(error instanceof Error ? error : new Error(errorMessage));\n      \n      // 如果儲存失敗次數少於3次，嘗試重新儲存\n      if (saveAttemptRef.current < 3) {\n        setTimeout(() => {\n          if (hasChangesRef.current) {\n            saveNow(false);\n          }\n        }, 5000 * saveAttemptRef.current); // 遞增延遲\n      }\n      \n      return false;\n      \n    } finally {\n      dispatch(setSaving(false));\n    }\n  }, [currentChapter, saving, dispatch, updateStatus, stopCountdown, onSave, onError]);\n\n  // 檢查內容是否有變化\n  const checkForChanges = useCallback(() => {\n    if (!currentChapter) return false;\n    \n    const currentContent = JSON.stringify(currentChapter.content);\n    const currentTitle = currentChapter.title;\n    \n    const contentChanged = currentContent !== lastContentRef.current;\n    const titleChanged = currentTitle !== lastTitleRef.current;\n    const hasChanged = contentChanged || titleChanged;\n    \n    if (hasChanged) {\n      lastContentRef.current = currentContent;\n      lastTitleRef.current = currentTitle;\n      hasChangesRef.current = true;\n      \n      // 重置儲存嘗試次數\n      saveAttemptRef.current = 0;\n    }\n    \n    return hasChanged;\n  }, [currentChapter]);\n\n  // 觸發自動儲存\n  const triggerAutoSave = useCallback(() => {\n    if (!autoSaveEnabled || !currentChapter || saving) return;\n\n    // 清除之前的定時器\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    stopCountdown();\n\n    // 檢查是否有變化\n    if (checkForChanges()) {\n      updateStatus({ status: 'pending' });\n      \n      // 開始倒數\n      const delayInSeconds = Math.ceil(autoSaveDelay / 1000);\n      startCountdown(delayInSeconds);\n      \n      // 設置新的定時器\n      timeoutRef.current = setTimeout(() => {\n        if (hasChangesRef.current) {\n          saveNow(false); // 自動儲存不顯示通知\n        }\n      }, autoSaveDelay);\n    }\n  }, [autoSaveEnabled, currentChapter, saving, autoSaveDelay, checkForChanges, saveNow, updateStatus, startCountdown, stopCountdown]);\n\n  // 強制儲存（忽略變更檢查）\n  const forceSave = useCallback(async () => {\n    if (!currentChapter) return false;\n    hasChangesRef.current = true;\n    return await saveNow(true);\n  }, [currentChapter, saveNow]);\n\n  // 監聽章節內容變化\n  useEffect(() => {\n    if (currentChapter) {\n      triggerAutoSave();\n    }\n  }, [currentChapter?.content, currentChapter?.title, triggerAutoSave]);\n\n  // 監聽設定變化\n  useEffect(() => {\n    if (!autoSaveEnabled) {\n      // 如果自動儲存被禁用，清除定時器\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n      stopCountdown();\n      updateStatus({ status: 'idle', nextSaveIn: 0 });\n    }\n  }, [autoSaveEnabled, stopCountdown, updateStatus]);\n\n  // 組件卸載時清理定時器\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      stopCountdown();\n    };\n  }, [stopCountdown]);\n\n  // 頁面卸載前儲存\n  useEffect(() => {\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      if (hasChangesRef.current && currentChapter) {\n        event.preventDefault();\n        event.returnValue = '您有未儲存的變更，確定要離開嗎？';\n        \n        // 嘗試同步儲存\n        if (navigator.sendBeacon) {\n          try {\n            const data = JSON.stringify({\n              action: 'save',\n              chapter: {\n                ...currentChapter,\n                content: JSON.stringify(currentChapter.content),\n              }\n            });\n            navigator.sendBeacon('/api/emergency-save', data);\n          } catch (error) {\n            console.error('緊急儲存失敗:', error);\n          }\n        }\n        \n        return event.returnValue;\n      }\n    };\n\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden' && hasChangesRef.current) {\n        // 頁面隱藏時立即儲存\n        saveNow(false);\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    \n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [currentChapter, saveNow]);\n\n  // 監聽快捷鍵儲存\n  useEffect(() => {\n    const handleShortcutSave = () => {\n      forceSave();\n    };\n\n    document.addEventListener('shortcut:save', handleShortcutSave);\n    \n    return () => {\n      document.removeEventListener('shortcut:save', handleShortcutSave);\n    };\n  }, [forceSave]);\n\n  return {\n    saveNow: forceSave,\n    hasUnsavedChanges: hasChangesRef.current,\n    isSaving: saving,\n    autoSaveEnabled,\n    autoSaveStatus,\n    lastSaved: lastSaved || autoSaveStatus.lastSaved,\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/useErrorHandler.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[416,419],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[416,419],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[446,449],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[446,449],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1466,1469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1466,1469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3498,3501],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3498,3501],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5206,5209],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5206,5209],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5386,5389],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5386,5389],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react';\nimport { useAppDispatch } from './redux';\nimport { startProgress, updateProgress, completeProgress, failProgress } from '../store/slices/errorSlice';\nimport { ErrorHandler } from '../utils/errorUtils';\nimport { AppError } from '../types/error';\n\n// 錯誤處理 hook\nexport const useErrorHandler = () => {\n  const _dispatch = useAppDispatch();\n\n  const handleError = useCallback((error: any, context?: Record<string, any>) => {\n    if (error.code?.startsWith('AI_')) {\n      ErrorHandler.handleAIError(error, context);\n    } else if (error.code?.startsWith('DATABASE_')) {\n      ErrorHandler.handleDatabaseError(error, context);\n    } else if (error.code?.startsWith('NETWORK_')) {\n      ErrorHandler.handleApiError(error, context);\n    } else if (error.code?.startsWith('FILE_')) {\n      ErrorHandler.handleFileSystemError(error, context);\n    } else {\n      ErrorHandler.createError(\n        'UNKNOWN_ERROR',\n        '發生未知錯誤',\n        {\n          description: error.message || String(error),\n          severity: 'medium',\n          category: 'system',\n          context,\n          stack: error.stack\n        }\n      );\n    }\n  }, []);\n\n  const createError = useCallback((\n    code: string,\n    message: string,\n    options?: {\n      description?: string;\n      severity?: 'low' | 'medium' | 'high' | 'critical';\n      category?: 'network' | 'database' | 'ai' | 'file' | 'validation' | 'system' | 'user';\n      context?: Record<string, any>;\n    }\n  ) => {\n    ErrorHandler.createError(code, message, options);\n  }, []);\n\n  return {\n    handleError,\n    createError\n  };\n};\n\n// 進度處理 hook\nexport const useProgressHandler = () => {\n  const dispatch = useAppDispatch();\n\n  const startProgressIndicator = useCallback((\n    title: string,\n    options?: {\n      description?: string;\n      estimatedDuration?: number;\n      totalSteps?: number;\n    }\n  ) => {\n    const progressId = `progress-${Date.now()}-${Math.random().toString(36).substring(2, 9)}`;\n    \n    dispatch(startProgress({\n      title,\n      description: options?.description,\n      estimatedDuration: options?.estimatedDuration,\n      totalSteps: options?.totalSteps,\n      progress: 0\n    }));\n\n    return progressId;\n  }, [dispatch]);\n\n  const updateProgressIndicator = useCallback((\n    id: string,\n    progress: number,\n    currentStep?: string,\n    completedSteps?: number\n  ) => {\n    dispatch(updateProgress({\n      id,\n      progress: Math.max(0, Math.min(100, progress)),\n      currentStep,\n      completedSteps\n    }));\n  }, [dispatch]);\n\n  const completeProgressIndicator = useCallback((id: string) => {\n    dispatch(completeProgress(id));\n  }, [dispatch]);\n\n  const failProgressIndicator = useCallback((id: string, error: AppError) => {\n    dispatch(failProgress({ id, error }));\n  }, [dispatch]);\n\n  return {\n    startProgressIndicator,\n    updateProgressIndicator,\n    completeProgressIndicator,\n    failProgressIndicator\n  };\n};\n\n// 異步操作 hook（結合錯誤處理和進度指示）\nexport const useAsyncOperation = () => {\n  const { handleError } = useErrorHandler();\n  const { \n    startProgressIndicator, \n    updateProgressIndicator, \n    completeProgressIndicator, \n    failProgressIndicator \n  } = useProgressHandler();\n\n  const executeWithProgress = useCallback(async <T>(\n    operation: (updateProgress: (progress: number, step?: string) => void) => Promise<T>,\n    options: {\n      title: string;\n      description?: string;\n      estimatedDuration?: number;\n      totalSteps?: number;\n      onError?: (error: any) => void;\n    }\n  ): Promise<T> => {\n    const progressId = startProgressIndicator(options.title, {\n      description: options.description,\n      estimatedDuration: options.estimatedDuration,\n      totalSteps: options.totalSteps\n    });\n\n    try {\n      const updateProgress = (progress: number, step?: string) => {\n        updateProgressIndicator(progressId, progress, step);\n      };\n\n      const result = await operation(updateProgress);\n      completeProgressIndicator(progressId);\n      return result;\n    } catch (error) {\n      const appError: AppError = {\n        id: `error-${Date.now()}`,\n        code: 'ASYNC_OPERATION_FAILED',\n        message: '異步操作失敗',\n        description: error instanceof Error ? error.message : String(error),\n        severity: 'medium',\n        category: 'system',\n        timestamp: new Date(),\n        context: { operationTitle: options.title },\n        stack: error instanceof Error ? error.stack : undefined\n      };\n\n      failProgressIndicator(progressId, appError);\n      \n      if (options.onError) {\n        options.onError(error);\n      } else {\n        handleError(error, { operationTitle: options.title });\n      }\n      \n      throw error;\n    }\n  }, [\n    handleError,\n    startProgressIndicator,\n    updateProgressIndicator,\n    completeProgressIndicator,\n    failProgressIndicator\n  ]);\n\n  return {\n    executeWithProgress\n  };\n};\n\n// 重試操作 hook\nexport const useRetryOperation = () => {\n  const { handleError } = useErrorHandler();\n\n  const retryWithBackoff = useCallback(async <T>(\n    operation: () => Promise<T>,\n    options: {\n      maxRetries?: number;\n      baseDelay?: number;\n      backoffFactor?: number;\n      onRetry?: (attempt: number, error: any) => void;\n    } = {}\n  ): Promise<T> => {\n    const {\n      maxRetries = 3,\n      baseDelay = 1000,\n      backoffFactor = 2,\n      onRetry\n    } = options;\n\n    let lastError: any;\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation();\n      } catch (error) {\n        lastError = error;\n        \n        if (attempt === maxRetries) {\n          break;\n        }\n\n        if (onRetry) {\n          onRetry(attempt + 1, error);\n        }\n\n        const delay = baseDelay * Math.pow(backoffFactor, attempt);\n        await new Promise(resolve => setTimeout(resolve, delay));\n      }\n    }\n\n    handleError(lastError, { \n      maxRetries, \n      finalAttempt: true,\n      operationType: 'retry'\n    });\n    throw lastError;\n  }, [handleError]);\n\n  return {\n    retryWithBackoff\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/useI18n.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/useSettings.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[867,870],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[867,870],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'settings'. Either include it or remove the dependency array.","line":157,"column":6,"nodeType":"ArrayExpression","endLine":157,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: [settings, settings.shortcuts]","fix":{"range":[4259,4279],"text":"[settings, settings.shortcuts]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from './redux';\nimport { loadSettings, markSettingsSaved } from '../store/slices/settingsSlice';\nimport { SettingsService, SettingsWatcher } from '../services/settingsService';\n\n/**\n * 設定管理 Hook\n * 處理設定的載入、儲存和監聽\n */\nexport const useSettings = () => {\n  const dispatch = useAppDispatch();\n  const { settings, hasUnsavedChanges, isLoading } = useAppSelector(state => state.settings);\n\n  // 初始化設定\n  useEffect(() => {\n    const initializeSettings = async () => {\n      try {\n        const userSettings = await SettingsService.loadSettings();\n        dispatch(loadSettings(userSettings));\n      } catch (error) {\n        console.error('初始化設定失敗:', error);\n      }\n    };\n\n    initializeSettings();\n  }, [dispatch]);\n\n  // 監聽設定變更\n  useEffect(() => {\n    const handleSettingsChange = (newSettings: any) => {\n      // 可以在這裡處理設定變更的副作用\n      console.log('設定已變更:', newSettings);\n    };\n\n    SettingsWatcher.addListener(handleSettingsChange);\n\n    return () => {\n      SettingsWatcher.removeListener(handleSettingsChange);\n    };\n  }, []);\n\n  // 自動儲存設定\n  useEffect(() => {\n    if (hasUnsavedChanges) {\n      const saveTimer = setTimeout(async () => {\n        try {\n          await SettingsService.saveSettings(settings);\n          dispatch(markSettingsSaved());\n          SettingsWatcher.notifyListeners(settings);\n        } catch (error) {\n          console.error('自動儲存設定失敗:', error);\n        }\n      }, 2000); // 2 秒後自動儲存\n\n      return () => clearTimeout(saveTimer);\n    }\n  }, [settings, hasUnsavedChanges, dispatch]);\n\n  return {\n    settings,\n    hasUnsavedChanges,\n    isLoading,\n  };\n};\n\n/**\n * 設定應用 Hook\n * 將設定應用到應用程式的各個部分\n */\nexport const useSettingsApplication = () => {\n  const { settings } = useSettings();\n\n  // 應用主題設定\n  useEffect(() => {\n    if (settings.editor.theme) {\n      document.documentElement.setAttribute('data-theme', settings.editor.theme);\n    }\n  }, [settings.editor.theme]);\n\n  // 應用字體設定\n  useEffect(() => {\n    if (settings.editor.fontFamily) {\n      document.documentElement.style.setProperty('--editor-font-family', settings.editor.fontFamily);\n    }\n    if (settings.editor.fontSize) {\n      document.documentElement.style.setProperty('--editor-font-size', `${settings.editor.fontSize}px`);\n    }\n    if (settings.editor.lineHeight) {\n      document.documentElement.style.setProperty('--editor-line-height', settings.editor.lineHeight.toString());\n    }\n  }, [settings.editor.fontFamily, settings.editor.fontSize, settings.editor.lineHeight]);\n\n  // 應用 UI 設定\n  useEffect(() => {\n    if (settings.ui.sidebarWidth) {\n      document.documentElement.style.setProperty('--sidebar-width', `${settings.ui.sidebarWidth}px`);\n    }\n    \n    // 動畫設定\n    if (!settings.ui.animationsEnabled) {\n      document.documentElement.style.setProperty('--animation-duration', '0s');\n    } else {\n      document.documentElement.style.removeProperty('--animation-duration');\n    }\n  }, [settings.ui.sidebarWidth, settings.ui.animationsEnabled]);\n\n  // 應用語言設定\n  useEffect(() => {\n    if (settings.language) {\n      document.documentElement.setAttribute('lang', settings.language);\n    }\n  }, [settings.language]);\n\n  return settings;\n};\n\n/**\n * 快捷鍵 Hook\n * 處理全域快捷鍵\n */\nexport const useShortcuts = () => {\n  const { settings } = useSettings();\n\n  useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      const { shortcuts } = settings;\n      \n      // 構建當前按鍵組合\n      const modifiers = [];\n      if (event.ctrlKey) modifiers.push('Ctrl');\n      if (event.altKey) modifiers.push('Alt');\n      if (event.shiftKey) modifiers.push('Shift');\n      if (event.metaKey) modifiers.push('Meta');\n      \n      const key = event.key;\n      const combination = [...modifiers, key].join('+');\n      \n      // 查找匹配的快捷鍵\n      const shortcutAction = Object.entries(shortcuts).find(([_, shortcut]) => \n        shortcut === combination\n      );\n      \n      if (shortcutAction) {\n        event.preventDefault();\n        const [action] = shortcutAction;\n        \n        // 觸發對應的動作\n        handleShortcutAction(action);\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [settings.shortcuts]);\n\n  const handleShortcutAction = (action: string) => {\n    switch (action) {\n      case 'save':\n        // 觸發儲存動作\n        document.dispatchEvent(new CustomEvent('shortcut:save'));\n        break;\n      case 'newProject':\n        document.dispatchEvent(new CustomEvent('shortcut:newProject'));\n        break;\n      case 'openProject':\n        document.dispatchEvent(new CustomEvent('shortcut:openProject'));\n        break;\n      case 'aiContinue':\n        document.dispatchEvent(new CustomEvent('shortcut:aiContinue'));\n        break;\n      case 'toggleSidebar':\n        document.dispatchEvent(new CustomEvent('shortcut:toggleSidebar'));\n        break;\n      case 'toggleFullscreen':\n        document.dispatchEvent(new CustomEvent('shortcut:toggleFullscreen'));\n        break;\n      case 'find':\n        document.dispatchEvent(new CustomEvent('shortcut:find'));\n        break;\n      case 'replace':\n        document.dispatchEvent(new CustomEvent('shortcut:replace'));\n        break;\n      case 'undo':\n        document.dispatchEvent(new CustomEvent('shortcut:undo'));\n        break;\n      case 'redo':\n        document.dispatchEvent(new CustomEvent('shortcut:redo'));\n        break;\n      default:\n        console.log('未知的快捷鍵動作:', action);\n    }\n  };\n};\n\n/**\n * 自動儲存 Hook\n * 根據設定管理自動儲存功能\n */\nexport const useAutoSave = (saveCallback: () => void, hasChanges: boolean) => {\n  const { settings } = useSettings();\n\n  useEffect(() => {\n    if (settings.autoSave && hasChanges) {\n      const timer = setTimeout(() => {\n        saveCallback();\n      }, settings.autoSaveInterval);\n\n      return () => clearTimeout(timer);\n    }\n  }, [settings.autoSave, settings.autoSaveInterval, hasChanges, saveCallback]);\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/hooks/useTemplateApplication.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3714,3717],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3714,3717],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from 'react';\nimport { useAppDispatch } from './redux';\nimport { createProject } from '../store/slices/projectsSlice';\nimport { NovelTemplate } from '../types/template';\nimport api from '../api';\n\nexport interface TemplateApplicationOptions {\n  projectName: string;\n  projectDescription?: string;\n  applyWorldSetting: boolean;\n  createCharacters: boolean;\n  selectedArchetypes: string[]; // 選中的角色原型 ID\n}\n\nexport const useTemplateApplication = () => {\n  const dispatch = useAppDispatch();\n  const [isApplying, setIsApplying] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const applyTemplateToProject = async (\n    template: NovelTemplate,\n    options: TemplateApplicationOptions\n  ) => {\n    setIsApplying(true);\n    setError(null);\n\n    try {\n      // 準備專案數據 - 符合 Project 接口\n      const projectData = {\n        name: options.projectName,\n        type: template.type as 'isekai' | 'school' | 'scifi' | 'fantasy', // 添加 type 字段\n        description: options.projectDescription || template.description,\n        settings: {\n          // 只保留 Project 接口支援的屬性\n          aiModel: 'llama3.2', // 預設模型\n          aiParams: {\n            temperature: 0.7,\n            topP: 0.9,\n            maxTokens: 400\n          }\n        },\n        // 將模板資訊儲存為額外屬性（如果需要的話）\n        templateMetadata: {\n          templateId: template.id,\n          templateName: template.name,\n          worldSetting: options.applyWorldSetting ? template.worldSetting : undefined,\n          writingGuidelines: template.writingGuidelines,\n          aiPromptTemplate: template.aiPromptTemplate\n        }\n      };\n\n      // 創建專案\n      const result = await dispatch(createProject(projectData)).unwrap();\n      const projectId = result.id; // 從返回的 project 對象中獲取 id\n\n      // 如果選擇創建角色，則創建選中的角色原型\n      if (options.createCharacters && options.selectedArchetypes.length > 0) {\n        for (const archetypeIndex of options.selectedArchetypes) {\n          const archetype = template.characterArchetypes[parseInt(archetypeIndex)];\n          if (archetype) {\n            try {\n              await api.characters.create({\n                projectId: projectId,\n                name: archetype.name,\n                description: archetype.description,\n                attributes: JSON.stringify({\n                  personality: archetype.personality,\n                  appearance: archetype.appearance || '',\n                  background: archetype.background || '',\n                  age: archetype.suggestedAge ? Math.round((archetype.suggestedAge.min + archetype.suggestedAge.max) / 2) : undefined,\n                  gender: archetype.suggestedGender?.[0] || '未設定',\n                  archetype: archetype.name\n                }),\n                // avatarUrl 屬性已移除\n              });\n            } catch (charError) {\n              console.warn('創建角色失敗:', charError);\n            }\n          }\n        }\n      }\n\n      // 如果有範例內容，創建第一章\n      if (template.sampleContent?.opening) {\n        try {\n          await api.chapters.create({\n            projectId: projectId,\n            title: '第一章：開始的故事',\n            content: template.sampleContent.opening,\n            orderIndex: 1\n          });\n        } catch (chapterError) {\n          console.warn('創建範例章節失敗:', chapterError);\n        }\n      }\n\n      return {\n        success: true,\n        projectId,\n        message: `成功應用「${template.name}」模板創建專案`\n      };\n\n    } catch (err) {\n      let errorMessage = '應用模板失敗';\n      \n      if (err instanceof Error) {\n        errorMessage = err.message;\n      } else if (typeof err === 'string') {\n        errorMessage = err;\n      } else if (err && typeof err === 'object' && 'message' in err) {\n        errorMessage = (err as any).message;\n      }\n      \n      setError(errorMessage);\n      return {\n        success: false,\n        message: errorMessage\n      };\n    } finally {\n      setIsApplying(false);\n    }\n  };\n\n  const getTemplatePreview = (template: NovelTemplate) => {\n    return {\n      name: template.name,\n      description: template.description,\n      type: template.type,\n      characterCount: template.characterArchetypes.length,\n      hasWorldSetting: !!template.worldSetting,\n      hasSampleContent: !!template.sampleContent?.opening,\n      themes: template.writingGuidelines.themes,\n      style: template.writingGuidelines.style\n    };\n  };\n\n  return {\n    applyTemplateToProject,\n    getTemplatePreview,\n    isApplying,\n    error,\n    clearError: () => setError(null)\n  };\n};\n\nexport default useTemplateApplication;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/i18n/index.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3232,3235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3232,3235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3251,3254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3251,3254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 國際化系統\nimport { translationLoader } from './translations';\n\nexport type Language = 'zh-TW' | 'zh-CN' | 'en' | 'ja';\n\nclass I18nService {\n  private currentLanguage: Language = 'zh-TW';\n  private listeners: Array<(language: Language) => void> = [];\n  private isInitialized = false;\n\n  async initialize() {\n    if (this.isInitialized) return;\n    \n    try {\n      // 預載入所有翻譯檔案\n      await translationLoader.preloadAllTranslations();\n      this.isInitialized = true;\n      console.log('I18n system initialized successfully');\n    } catch (_error) {\n      console.error('Failed to initialize i18n system:', _error);\n      // 即使失敗也標記為已初始化，避免重複嘗試\n      this.isInitialized = true;\n    }\n  }\n\n  async setLanguage(language: Language) {\n    this.currentLanguage = language;\n    \n    // 確保該語言的翻譯已載入\n    try {\n      await translationLoader.loadTranslation(language);\n    } catch (_error) {\n      console.warn(`Failed to load translation for ${language}, keeping current language`);\n    }\n    \n    this.listeners.forEach(listener => listener(language));\n  }\n\n  getLanguage() {\n    return this.currentLanguage;\n  }\n\n  async translate(key: string, params?: Record<string, string>): Promise<string> {\n    try {\n      // 確保 i18n 系統已初始化\n      if (!this.isInitialized) {\n        await this.initialize();\n      }\n\n      // 載入當前語言的翻譯\n      const currentTranslation = await translationLoader.loadTranslation(this.currentLanguage);\n      const value = this.getValueByKey(currentTranslation, key);\n      \n      if (typeof value === 'string') {\n        return this.interpolateParams(value, params);\n      }\n\n      // 如果當前語言找不到，回退到繁體中文\n      if (this.currentLanguage !== 'zh-TW') {\n        const fallbackTranslation = await translationLoader.loadTranslation('zh-TW');\n        const fallbackValue = this.getValueByKey(fallbackTranslation, key);\n        \n        if (typeof fallbackValue === 'string') {\n          console.warn(`Translation missing for ${key} in ${this.currentLanguage}, using zh-TW`);\n          return this.interpolateParams(fallbackValue, params);\n        }\n      }\n\n      // 都找不到時返回 key 本身\n      console.warn(`找不到翻譯: ${key}`);\n      return key;\n    } catch (_error) {\n      console.error(`Translation failed for key ${key}:`, _error);\n      return key;\n    }\n  }\n\n  // 同步版本的翻譯函數（使用已載入的翻譯）\n  translateSync(key: string, params?: Record<string, string>): string {\n    const currentTranslation = translationLoader.getLoadedTranslation(this.currentLanguage);\n    if (!currentTranslation) {\n      console.warn(`Translation not loaded for ${this.currentLanguage}, returning key`);\n      return key;\n    }\n\n    const value = this.getValueByKey(currentTranslation, key);\n    if (typeof value === 'string') {\n      return this.interpolateParams(value, params);\n    }\n\n    // 回退到繁體中文\n    if (this.currentLanguage !== 'zh-TW') {\n      const fallbackTranslation = translationLoader.getLoadedTranslation('zh-TW');\n      if (fallbackTranslation) {\n        const fallbackValue = this.getValueByKey(fallbackTranslation, key);\n        if (typeof fallbackValue === 'string') {\n          return this.interpolateParams(fallbackValue, params);\n        }\n      }\n    }\n\n    console.warn(`找不到翻譯: ${key}`);\n    return key;\n  }\n\n  private getValueByKey(translation: any, key: string): any {\n    const keys = key.split('.');\n    let value = translation;\n    \n    for (const k of keys) {\n      if (value && typeof value === 'object') {\n        value = value[k];\n      } else {\n        return undefined;\n      }\n    }\n    \n    return value;\n  }\n\n  private interpolateParams(text: string, params?: Record<string, string>): string {\n    if (!params) return text;\n    \n    let result = text;\n    Object.entries(params).forEach(([paramKey, paramValue]) => {\n      result = result.replace(new RegExp(`{{${paramKey}}}`, 'g'), paramValue);\n    });\n    \n    return result;\n  }\n\n  addLanguageChangeListener(listener: (language: Language) => void) {\n    this.listeners.push(listener);\n  }\n\n  removeLanguageChangeListener(listener: (language: Language) => void) {\n    const index = this.listeners.indexOf(listener);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n}\n\nexport const i18n = new I18nService();\n\n// 非同步翻譯函數\nexport const t = async (key: string, params?: Record<string, string>) => i18n.translate(key, params);\n\n// 同步翻譯函數（使用已載入的翻譯）\nexport const tSync = (key: string, params?: Record<string, string>) => i18n.translateSync(key, params);","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/i18n/translations.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[125,128],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[125,128],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[155,158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[155,158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[213,216],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[213,216],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[252,255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[252,255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[313,316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[313,316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1094,1097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1094,1097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2240,2243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2240,2243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":84,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":84,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2398,2401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2398,2401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2462,2465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2462,2465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2639,2642],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2639,2642],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2747,2750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2747,2750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2777,2780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2777,2780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2986,2989],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2986,2989],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3016,3019],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3016,3019],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Language } from './index';\n\n// 動態載入翻譯檔案的類別\nclass TranslationLoader {\n  private loadedTranslations: Record<Language, any> = {} as Record<Language, any>;\n  private loadingPromises: Record<Language, Promise<any>> = {} as Record<Language, Promise<any>>;\n\n  async loadTranslation(language: Language): Promise<any> {\n    // 如果已經載入過，直接返回\n    if (this.loadedTranslations[language]) {\n      return this.loadedTranslations[language];\n    }\n\n    // 如果正在載入中，返回載入中的 Promise\n    if (this.loadingPromises[language] !== undefined) {\n      return this.loadingPromises[language];\n    }\n\n    // 開始載入翻譯檔案\n    this.loadingPromises[language] = this.doLoadTranslation(language);\n    \n    try {\n      const translation = await this.loadingPromises[language];\n      this.loadedTranslations[language] = translation;\n      return translation;\n    } catch (error) {\n      console.error(`Failed to load translation for ${language}:`, error);\n      // 載入失敗時清除 Promise，下次可以重新嘗試\n      delete this.loadingPromises[language];\n      throw error;\n    }\n  }\n\n  private async doLoadTranslation(language: Language): Promise<any> {\n    try {\n      // 動態匯入對應的 JSON 檔案\n      const module = await import(`./locales/${language}.json`);\n      return module.default || module;\n    } catch (error) {\n      console.error(`Failed to import translation file for ${language}:`, error);\n      \n      // 回退到預設的繁體中文\n      if (language !== 'zh-TW') {\n        console.warn(`Falling back to zh-TW for ${language}`);\n        return this.loadTranslation('zh-TW');\n      }\n      \n      // 如果連繁體中文都載入失敗，返回基本的翻譯\n      return {\n        common: {\n          loading: '載入中...',\n          error: '錯誤',\n          success: '成功'\n        },\n        app: {\n          title: '創世紀元',\n          subtitle: '異世界創作神器'\n        }\n      };\n    }\n  }\n\n  // 預載入所有語言的翻譯檔案\n  async preloadAllTranslations(): Promise<void> {\n    const languages: Language[] = ['zh-TW', 'zh-CN', 'en', 'ja'];\n    \n    try {\n      await Promise.all(\n        languages.map(lang => this.loadTranslation(lang))\n      );\n      console.log('All translations preloaded successfully');\n    } catch (error) {\n      console.warn('Some translations failed to preload:', error);\n    }\n  }\n\n  // 取得已載入的翻譯\n  getLoadedTranslation(language: Language): any | null {\n    return this.loadedTranslations[language] || null;\n  }\n\n  // 清除快取\n  clearCache(): void {\n    this.loadedTranslations = {} as Record<Language, any>;\n    this.loadingPromises = {} as Record<Language, Promise<any>>;\n  }\n}\n\n// 建立全域的翻譯載入器實例\nexport const translationLoader = new TranslationLoader();\n\n// 為了向後相容，匯出一個函數來取得翻譯\nexport const getTranslations = async (): Promise<Record<Language, any>> => {\n  const languages: Language[] = ['zh-TW', 'zh-CN', 'en', 'ja'];\n  const result: Record<Language, any> = {} as Record<Language, any>;\n  \n  for (const lang of languages) {\n    result[lang] = await translationLoader.loadTranslation(lang);\n  }\n  \n  return result;\n};\n\n// 舊的靜態匯出（為了向後相容，但建議使用動態載入）\nexport const translations: Record<Language, any> = {} as Record<Language, any>;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/main-stable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1421,1424],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1421,1424],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1783,1786],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1783,1786],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport { store } from './store/store';\nimport { useAppDispatch } from './hooks/redux';\nimport { checkOllamaService, fetchModelsInfo } from './store/slices/aiSlice';\nimport { fetchProjects } from './store/slices/projectsSlice';\nimport Layout from './components/Layout/Layout';\nimport Dashboard from './pages/Dashboard/Dashboard';\nimport CharacterManager from './pages/CharacterManager/CharacterManager';\nimport Settings from './pages/Settings/Settings';\nimport DatabaseMaintenanceSimple from './pages/DatabaseMaintenance/DatabaseMaintenanceSimple';\nimport SimpleProjectEditor from './pages/ProjectEditor/SimpleProjectEditor';\nimport Statistics from './pages/Statistics/Statistics';\nimport ModalContainer from './components/UI/ModalContainer';\nimport { NotificationContainer } from './components/UI/NotificationSystem';\nimport SimpleErrorBoundary from './components/UI/SimpleErrorBoundary';\nimport ProgressContainer from './components/Progress/ProgressContainer';\nimport { i18n } from './i18n';\nimport './index.css';\n\n// 🛡️ 超早期錯誤攔截器 - 在任何其他代碼運行之前設置\n(() => {\n  const originalConsoleError = console.error;\n  const originalConsoleWarn = console.warn;\n  \n  // 重寫 console.error 來過濾 Tauri 錯誤\n  console.error = (...args: any[]) => {\n    const errorString = args.join(' ');\n    if (errorString.includes('callbackId') || \n        errorString.includes('undefined is not an object') ||\n        errorString.includes('evaluating')) {\n      console.warn('🛡️  [已攔截] Tauri 錯誤:', ...args);\n      return;\n    }\n    originalConsoleError.apply(console, args);\n  };\n  \n  console.warn = (...args: any[]) => {\n    const warnString = args.join(' ');\n    if (warnString.includes('callbackId') || \n        warnString.includes('undefined is not an object')) {\n      return; // 完全靜默這些警告\n    }\n    originalConsoleWarn.apply(console, args);\n  };\n  \n  // 設置最早期的錯誤攔截\n  const earlyErrorHandler = (event: ErrorEvent) => {\n    const errorMessage = event.error?.message || event.message || '';\n    if (errorMessage.includes('callbackId') || \n        errorMessage.includes('undefined is not an object') ||\n        errorMessage.includes('evaluating')) {\n      console.warn('🛡️  [超早期攔截] Tauri 錯誤已被攔截');\n      event.preventDefault();\n      event.stopPropagation();\n      event.stopImmediatePropagation();\n      return false;\n    }\n  };\n  \n  const earlyPromiseHandler = (event: PromiseRejectionEvent) => {\n    const errorMessage = event.reason instanceof Error ? event.reason.message : \n                        typeof event.reason === 'string' ? event.reason : '';\n    if (errorMessage.includes('callbackId') || \n        errorMessage.includes('undefined is not an object') ||\n        errorMessage.includes('evaluating')) {\n      console.warn('🛡️  [超早期攔截] Tauri Promise 拒絕已被攔截');\n      event.preventDefault();\n      event.stopPropagation();\n      event.stopImmediatePropagation();\n      return false;\n    }\n  };\n  \n  window.addEventListener('error', earlyErrorHandler, true);\n  window.addEventListener('unhandledrejection', earlyPromiseHandler, true);\n  \n  console.log('🛡️  超早期錯誤攔截器已啟用');\n})();\n\n\n// 簡化的應用程式組件\nconst SimpleApp: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [initError, setInitError] = useState<string | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const initApp = async () => {\n      try {\n        console.log('🚀 開始應用程式初始化...');\n        \n        // 初始化 i18n 系統\n        console.log('🌐 初始化國際化系統...');\n        try {\n          await i18n.initialize();\n          console.log('✅ 國際化系統初始化完成');\n        } catch (error) {\n          console.warn('⚠️  國際化系統初始化失敗，使用預設語言:', error);\n        }\n        \n        // 最小延遲確保所有系統就緒\n        await new Promise(resolve => setTimeout(resolve, 500));\n        \n        // 隱藏載入畫面\n        const loadingElement = document.getElementById('loading');\n        if (loadingElement) {\n          loadingElement.style.display = 'none';\n        }\n        \n        setIsLoading(false);\n        \n        // 背景載入資料（不阻塞 UI）\n        setTimeout(async () => {\n          try {\n            console.log('📂 載入專案資料...');\n            await dispatch(fetchProjects()).unwrap();\n            console.log('✅ 專案資料載入完成');\n          } catch (error) {\n            console.warn('⚠️  專案資料載入失敗:', error);\n          }\n        }, 100);\n        \n        // 背景初始化 AI 服務（不阻塞 UI）\n        setTimeout(async () => {\n          try {\n            console.log('🤖 檢查 AI 服務...');\n            const isConnected = await dispatch(checkOllamaService()).unwrap();\n            if (isConnected) {\n              console.log('✅ AI 服務可用，載入模型資訊...');\n              await dispatch(fetchModelsInfo()).unwrap();\n              console.log('✅ AI 模型資訊載入完成');\n            } else {\n              console.log('ℹ️  AI 服務暫不可用');\n            }\n          } catch (error) {\n            console.warn('⚠️  AI 服務初始化失敗:', error);\n          }\n        }, 1000);\n        \n      } catch (error) {\n        const errorMessage = error instanceof Error ? error.message : String(error);\n        console.error('❌ 應用程式初始化失敗:', error);\n        setInitError(errorMessage);\n        setIsLoading(false);\n      }\n    };\n\n    initApp();\n  }, [dispatch]);\n\n  if (isLoading) {\n    return null; // 讓 HTML 載入畫面繼續顯示\n  }\n\n  // 如果有嚴重的初始化錯誤，顯示錯誤畫面\n  if (initError) {\n    return (\n      <div className=\"min-h-screen bg-cosmic-950 text-white flex items-center justify-center\">\n        <div className=\"text-center p-8\">\n          <div className=\"mb-6\">\n            <svg className=\"w-16 h-16 text-red-400 mx-auto mb-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L4.268 18.5c-.77.833.192 2.5 1.732 2.5z\" />\n            </svg>\n          </div>\n          <h1 className=\"text-2xl font-bold text-red-400 mb-4\">應用程式初始化失敗</h1>\n          <p className=\"text-gray-300 mb-6\">{initError}</p>\n          <div className=\"space-y-3\">\n            <button\n              onClick={() => window.location.reload()}\n              className=\"w-full px-6 py-3 bg-gold-500 text-black rounded-lg hover:bg-gold-600 transition-colors font-medium\"\n            >\n              重新載入應用程式\n            </button>\n            <button\n              onClick={() => window.location.reload()}\n              className=\"w-full px-6 py-3 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition-colors font-medium\"\n            >\n              強制重新載入\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <SimpleErrorBoundary context=\"主應用程式\">\n      <div className=\"relative\">\n        <Router\n          future={{\n            v7_startTransition: true,\n            v7_relativeSplatPath: true,\n          }}\n        >\n          <div className=\"min-h-screen bg-cosmic-950 text-white\">\n            <SimpleErrorBoundary context=\"路由系統\">\n              <Routes>\n                <Route path=\"/\" element={\n                  <SimpleErrorBoundary context=\"儀表板\">\n                    <Layout>\n                      <Dashboard />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"/settings\" element={\n                  <SimpleErrorBoundary context=\"設定頁面\">\n                    <Layout>\n                      <Settings />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"/database-maintenance\" element={\n                  <SimpleErrorBoundary context=\"資料庫維護\">\n                    <Layout>\n                      <DatabaseMaintenanceSimple />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"/characters/:projectId\" element={\n                  <SimpleErrorBoundary context=\"角色管理\">\n                    <Layout>\n                      <CharacterManager />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"/project/:id\" element={\n                  <SimpleErrorBoundary context=\"專案編輯器\">\n                    <Layout>\n                      <SimpleProjectEditor />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"/statistics\" element={\n                  <SimpleErrorBoundary context=\"統計資訊\">\n                    <Layout>\n                      <Statistics />\n                    </Layout>\n                  </SimpleErrorBoundary>\n                } />\n                <Route path=\"*\" element={\n                  <div className=\"flex items-center justify-center h-screen\">\n                    <div className=\"text-center\">\n                      <h2 className=\"text-xl text-gold-400 mb-4\">頁面不存在</h2>\n                      <p className=\"text-gray-300\">路徑：{window.location.pathname}</p>\n                      <button \n                        onClick={() => window.history.back()} \n                        className=\"mt-4 px-4 py-2 bg-gold-500 text-black rounded hover:bg-gold-600\"\n                      >\n                        返回\n                      </button>\n                    </div>\n                  </div>\n                } />\n              </Routes>\n            </SimpleErrorBoundary>\n          </div>\n          \n          {/* 模態框容器 */}\n          <SimpleErrorBoundary context=\"模態框系統\">\n            <ModalContainer />\n          </SimpleErrorBoundary>\n          \n          {/* 通知系統 */}\n          <SimpleErrorBoundary context=\"通知系統\">\n            <NotificationContainer />\n          </SimpleErrorBoundary>\n          \n          {/* 進度指示器容器 */}\n          <SimpleErrorBoundary context=\"進度指示器系統\">\n            <ProgressContainer />\n          </SimpleErrorBoundary>\n        </Router>\n      </div>\n    </SimpleErrorBoundary>\n  );\n};\n\n// 增強的全域錯誤處理 - 與安全系統整合\nwindow.addEventListener('error', (event) => {\n  // 檢查是否是 Tauri 相關錯誤 - 立即攔截\n  const errorMessage = event.error?.message || '';\n  const isTauriError = errorMessage.includes('callbackId') || \n                      errorMessage.includes('undefined is not an object') ||\n                      errorMessage.includes('__TAURI') ||\n                      errorMessage.includes('Tauri') ||\n                      errorMessage.includes('evaluating');\n  \n  if (isTauriError) {\n    console.warn('🛡️  攔截 Tauri 相關錯誤，防止顯示到控制台');\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    console.warn('全域錯誤處理器-已攔截:', event.error);\n    return false;\n  }\n  \n  console.error('🚨 全域錯誤:', event.error);\n  \n  // 記錄錯誤\n  if (event.error) {\n    console.error('全域錯誤處理器:', event.error);\n  }\n  \n  event.preventDefault();\n}, true); // 使用捕獲階段\n\nwindow.addEventListener('unhandledrejection', (event) => {\n  // 檢查是否是 Tauri 相關錯誤 - 立即攔截\n  const errorMessage = event.reason instanceof Error ? event.reason.message : \n                      typeof event.reason === 'string' ? event.reason : '';\n  \n  const isTauriError = errorMessage.includes('callbackId') || \n                      errorMessage.includes('undefined is not an object') ||\n                      errorMessage.includes('Tauri') ||\n                      errorMessage.includes('__TAURI') ||\n                      errorMessage.includes('evaluating');\n  \n  if (isTauriError) {\n    console.warn('🛡️  攔截 Tauri 相關 Promise 拒絕，防止顯示到控制台');\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    console.warn('Promise拒絕處理器-已攔截:', errorMessage);\n    return false;\n  }\n  \n  console.error('🚨 未處理的 Promise 拒絕:', event.reason);\n  \n  // 記錄錯誤\n  const safeErrorMessage = event.reason instanceof Error ? event.reason.message : \n                          typeof event.reason === 'string' ? event.reason : \n                          'Unknown promise rejection';\n  console.error('Promise拒絕處理器:', safeErrorMessage);\n  \n  event.preventDefault();\n}, true); // 使用捕獲階段\n\n// 渲染應用程式\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\nroot.render(\n  <Provider store={store}>\n    <SimpleApp />\n  </Provider>\n);\n\nexport default SimpleApp;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/AITest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/CharacterManager/CharacterManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1152,1155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1152,1155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadCharacters'. Either include it or remove the dependency array.","line":82,"column":6,"nodeType":"ArrayExpression","endLine":82,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [loadCharacters, projectId]","fix":{"range":[2643,2654],"text":"[loadCharacters, projectId]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Character, CharacterFormData } from '../../types/character';\nimport { \n  CharacterList, \n  CharacterModal, \n  CharacterDetailModal,\n  RelationshipVisualization\n} from '../../components/Characters';\nimport TutorialOverlay, { useTutorial } from '../../components/Tutorial/TutorialOverlay';\nimport { characterTutorial } from '../../data/tutorialSteps';\nimport { api } from '../../api';\n\nconst CharacterManager: React.FC = () => {\n  const { projectId } = useParams<{ projectId: string }>();\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [isEditModalOpen, setIsEditModalOpen] = useState(false);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);\n  const [projectType, setProjectType] = useState<string>('');\n  const [allCharacters, setAllCharacters] = useState<Character[]>([]);\n  const [showRelationshipView, setShowRelationshipView] = useState(false);\n  const [consistencyIssues, setConsistencyIssues] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  \n  // 教學系統\n  const {\n    isActive: isTutorialActive,\n    currentStep,\n    currentTutorialId,\n    setCurrentStep,\n    startTutorial: _startTutorial,\n    completeTutorial,\n    skipTutorial,\n    isTutorialCompleted: _isTutorialCompleted\n  } = useTutorial();\n\n  // 載入角色列表\n  const loadCharacters = async () => {\n    if (!projectId) return;\n    \n    try {\n      setLoading(true);\n      setError(null);\n      const characters = await api.characters.getByProjectId(projectId);\n      setAllCharacters(characters);\n      \n      // 檢查關係一致性\n      // 注意：checkRelationshipConsistency API 不存在，暫時跳過\n      // const issues = await api.characters.checkRelationshipConsistency(projectId);\n      // setConsistencyIssues(issues);\n    } catch (error) {\n      console.error('載入角色列表失敗:', error);\n      setError('載入角色列表失敗，請稍後再試');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 載入專案資訊和角色列表\n  useEffect(() => {\n    const loadProjectData = async () => {\n      if (projectId) {\n        try {\n          // 載入專案資訊\n          const project = await api.projects.getById(projectId);\n          if (project) {\n            setProjectType(project.type);\n          }\n          \n          // 載入角色列表\n          await loadCharacters();\n        } catch (error) {\n          console.error('載入專案資料失敗:', error);\n          setError('載入專案資料失敗，請稍後再試');\n        }\n      }\n    };\n    \n    loadProjectData();\n  }, [projectId]);\n\n  if (!projectId) {\n    return (\n      <div className=\"h-full flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"text-6xl mb-6\">❌</div>\n          <h2 className=\"text-2xl font-bold text-red-600 mb-4\">錯誤</h2>\n          <p className=\"text-gray-600\">無效的專案 ID</p>\n        </div>\n      </div>\n    );\n  }\n\n  const handleCreateCharacter = () => {\n    setSelectedCharacter(null);\n    setIsCreateModalOpen(true);\n  };\n\n  const handleEditCharacter = (character: Character) => {\n    setSelectedCharacter(character);\n    // 如果是從詳情模態框打開編輯，先關閉詳情模態框\n    if (isDetailModalOpen) {\n      setIsDetailModalOpen(false);\n    }\n    setIsEditModalOpen(true);\n  };\n\n  const handleViewCharacter = (character: Character) => {\n    setSelectedCharacter(character);\n    setIsDetailModalOpen(true);\n  };\n\n  const handleDeleteCharacter = (character: Character) => {\n    setSelectedCharacter(character);\n    // 刪除邏輯在 CharacterList 組件中處理\n  };\n\n  const handleSaveCharacter = async (formData: CharacterFormData) => {\n    try {\n      console.log('handleSaveCharacter called with formData:', formData);\n      console.log('formData.relationships:', formData.relationships);\n      \n      if (selectedCharacter) {\n        // 更新現有角色\n        const updateData = {\n          id: selectedCharacter.id,\n          name: formData.name,\n          description: formData.background || '', // 使用 background 作為 description\n          attributes: JSON.stringify({\n            archetype: formData.archetype,\n            age: formData.age,\n            gender: formData.gender,\n            appearance: formData.appearance,\n            personality: formData.personality,\n            background: formData.background,\n          }),\n          // avatarUrl 屬性已移除\n        };\n        \n        await api.characters.update(updateData);\n        \n        // 更新關係 - 始終清除現有關係，然後保存新關係\n        if (formData.relationships !== undefined) {\n          console.log('Updating relationships for character:', selectedCharacter.id);\n          console.log('Relationships to save:', formData.relationships);\n          \n          // 先清除現有關係 - 臨時使用直接 SQL 查詢的方式\n          try {\n            if (typeof api.characters.clearRelationships === 'function') {\n              await api.characters.clearRelationships(selectedCharacter.id);\n            } else {\n              console.log('clearRelationships API not available, using alternative method');\n              // 如果 clearRelationships API 不可用，先獲取現有關係然後逐一刪除\n              const currentCharacter = await api.characters.getById(selectedCharacter.id);\n              if (currentCharacter && currentCharacter.relationships) {\n                for (const rel of currentCharacter.relationships) {\n                  if (rel.id && typeof api.characters.deleteRelationship === 'function') {\n                    await api.characters.deleteRelationship(rel.id);\n                  }\n                }\n              }\n            }\n            console.log('Cleared existing relationships');\n          } catch (error) {\n            console.warn('Failed to clear existing relationships:', error);\n          }\n          \n          // 保存新關係（如果有的話）\n          if (formData.relationships.length > 0) {\n            for (const relationship of formData.relationships) {\n              console.log('Creating relationship:', relationship);\n              try {\n                await api.characters.createRelationship({\n                  fromCharacterId: selectedCharacter.id,\n                  toCharacterId: relationship.targetId,\n                  relationshipType: relationship.type,\n                  description: relationship.description,\n                });\n              } catch (error) {\n                console.error('Failed to create relationship:', relationship, error);\n              }\n            }\n            console.log('Finished saving relationships');\n          } else {\n            console.log('No relationships to save (empty array)');\n          }\n        } else {\n          console.log('Relationships field is undefined - skipping relationship update');\n        }\n      } else {\n        // 創建新角色\n        const characterData = {\n          projectId,\n          name: formData.name,\n          description: formData.background || '', // 使用 background 作為 description\n          attributes: JSON.stringify({\n            archetype: formData.archetype,\n            age: formData.age,\n            gender: formData.gender,\n            appearance: formData.appearance,\n            personality: formData.personality,\n            background: formData.background,\n          }),\n          // avatarUrl 屬性已移除\n        };\n        \n        console.log('Creating character with data:', characterData);\n        console.log('ProjectId:', projectId);\n        \n        const characterId = await api.characters.create(characterData);\n        console.log('Character created with ID:', characterId);\n        \n        // 如果有關係資料，創建關係\n        if (formData.relationships && formData.relationships.length > 0) {\n          for (const relationship of formData.relationships) {\n            await api.characters.createRelationship({\n              fromCharacterId: characterId,\n              toCharacterId: relationship.targetId,\n              relationshipType: relationship.type,\n              description: relationship.description,\n            });\n          }\n        }\n      }\n      \n      // 重新載入角色列表\n      await loadCharacters();\n      \n      // 重新檢查關係一致性\n      // 注意：checkRelationshipConsistency API 不存在，這裡暫時註解掉\n      // TODO: 實作 checkRelationshipConsistency API\n      // const issues = await api.characters.checkRelationshipConsistency(projectId);\n      // setConsistencyIssues(issues);\n      setConsistencyIssues([]);\n      \n      // 關閉模態框\n      setIsCreateModalOpen(false);\n      setIsEditModalOpen(false);\n      setSelectedCharacter(null);\n    } catch (error) {\n      console.error('儲存角色失敗:', error);\n      throw error;\n    }\n  };\n\n  const handleCloseModals = () => {\n    setIsCreateModalOpen(false);\n    setIsEditModalOpen(false);\n    setIsDetailModalOpen(false);\n    setSelectedCharacter(null);\n  };\n\n  const handleCharacterClickInVisualization = (character: Character) => {\n    setSelectedCharacter(character);\n    setIsDetailModalOpen(true);\n  };\n\n  return (\n    <div className=\"h-full bg-cosmic-950 text-white flex flex-col\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 flex-1 flex flex-col min-h-0\">\n        {/* 視圖切換按鈕 */}\n        <div className=\"mb-6 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => setShowRelationshipView(false)}\n              className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${\n                !showRelationshipView\n                  ? 'bg-gold-500 text-cosmic-950'\n                  : 'bg-cosmic-800 text-gray-300 border border-cosmic-700 hover:bg-cosmic-700'\n              }`}\n              data-tutorial=\"character-list\"\n            >\n              角色列表\n            </button>\n            <button\n              onClick={() => setShowRelationshipView(true)}\n              className={`px-4 py-2 text-sm font-medium rounded-lg transition-colors ${\n                showRelationshipView\n                  ? 'bg-gold-500 text-cosmic-950'\n                  : 'bg-cosmic-800 text-gray-300 border border-cosmic-700 hover:bg-cosmic-700'\n              }`}\n              data-tutorial=\"character-relationships\"\n            >\n              關係圖\n            </button>\n          </div>\n          \n          {/* 一致性問題提示 */}\n          {consistencyIssues.length > 0 && (\n            <div className=\"flex items-center space-x-2 text-gold-400\">\n              <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n              </svg>\n              <span className=\"text-sm font-medium\">\n                {consistencyIssues.length} 個關係一致性問題\n              </span>\n            </div>\n          )}\n        </div>\n\n        {/* 內容區域 */}\n        {showRelationshipView ? (\n          <div className=\"space-y-6\">\n            <RelationshipVisualization\n              characters={allCharacters}\n              onCharacterClick={handleCharacterClickInVisualization}\n              selectedCharacterId={selectedCharacter?.id}\n            />\n            \n            {/* 一致性問題列表 */}\n            {consistencyIssues.length > 0 && (\n              <div className=\"card\">\n                <h3 className=\"text-lg font-medium text-gold-400 mb-4\">關係一致性問題</h3>\n                <div className=\"space-y-3\">\n                  {consistencyIssues.map((issue, index) => (\n                    <div\n                      key={index}\n                      className={`p-3 rounded-lg border-l-4 ${\n                        issue.severity === 'warning'\n                          ? 'bg-cosmic-800/50 border-gold-500'\n                          : 'bg-cosmic-800/50 border-red-500'\n                      }`}\n                    >\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          {issue.severity === 'warning' ? (\n                            <svg className=\"w-5 h-5 text-gold-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.732-.833-2.5 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n                            </svg>\n                          ) : (\n                            <svg className=\"w-5 h-5 text-red-400\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\n                            </svg>\n                          )}\n                        </div>\n                        <div className=\"ml-3\">\n                          <p className={`text-sm ${\n                            issue.severity === 'warning' ? 'text-gold-300' : 'text-red-300'\n                          }`}>\n                            {issue.message}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        ) : (\n          <div data-tutorial=\"create-character-btn\" className=\"flex-1 min-h-0\">\n            <CharacterList\n              _projectId={projectId}\n              characters={allCharacters}\n              loading={loading}\n              error={error}\n              onCreateCharacter={handleCreateCharacter}\n              onEditCharacter={handleEditCharacter}\n              _onDeleteCharacter={handleDeleteCharacter}\n              onViewCharacter={handleViewCharacter}\n              onReload={loadCharacters}\n            />\n          </div>\n        )}\n      </div>\n\n      {/* 創建角色模態框 */}\n      <div data-tutorial=\"character-details\">\n        <CharacterModal\n          isOpen={isCreateModalOpen}\n          onClose={handleCloseModals}\n          onSave={handleSaveCharacter}\n          projectId={projectId}\n          projectType={projectType}\n          allCharacters={allCharacters}\n        />\n      </div>\n\n      {/* 編輯角色模態框 */}\n      <CharacterModal\n        isOpen={isEditModalOpen}\n        onClose={handleCloseModals}\n        onSave={handleSaveCharacter}\n        character={selectedCharacter}\n        projectId={projectId}\n        projectType={projectType}\n        allCharacters={allCharacters}\n      />\n\n      {/* 角色詳情模態框 */}\n      <CharacterDetailModal\n        isOpen={isDetailModalOpen}\n        onClose={handleCloseModals}\n        character={selectedCharacter}\n        onEdit={handleEditCharacter}\n        _onDelete={handleDeleteCharacter}\n        allCharacters={allCharacters}\n      />\n\n      {/* 角色管理教學覆蓋層 */}\n      <TutorialOverlay\n        steps={characterTutorial}\n        isActive={isTutorialActive && currentTutorialId === 'character'}\n        currentStepIndex={currentStep}\n        onStepChange={setCurrentStep}\n        onComplete={() => completeTutorial('character')}\n        onSkip={() => skipTutorial('character')}\n      />\n    </div>\n  );\n};\n\nexport default CharacterManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Dashboard/AIStatus.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleRefreshConnection'. Either include it or remove the dependency array.","line":57,"column":6,"nodeType":"ArrayExpression","endLine":57,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [handleRefreshConnection]","fix":{"range":[1610,1612],"text":"[handleRefreshConnection]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect } from 'react';\nimport { useAppSelector, useAppDispatch } from '../../hooks/redux';\nimport { checkOllamaService, fetchServiceStatus, fetchModelsInfo, fetchAvailableModels } from '../../store/slices/aiSlice';\n\nconst AIStatus: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { isOllamaConnected, availableModels, currentModel } = useAppSelector(state => state.ai);\n\n\n  const handleRefreshConnection = async () => {\n    console.log('重新檢測 AI 服務...');\n    try {\n      // 檢查服務狀態\n      const serviceResult = await dispatch(checkOllamaService());\n      console.log('服務檢查結果:', serviceResult);\n      \n      // 獲取詳細狀態\n      await dispatch(fetchServiceStatus());\n      \n      // 如果連接成功，獲取模型信息\n      const checkResult = serviceResult.payload;\n      if (checkResult) {\n        console.log('服務已連接，獲取模型信息...');\n        \n        // 延遲獲取模型，避免並發問題\n        setTimeout(async () => {\n          try {\n            await dispatch(fetchModelsInfo());\n            await dispatch(fetchAvailableModels());\n          } catch (modelError) {\n            console.error('獲取模型信息失敗:', modelError);\n          }\n        }, 500);\n      } else {\n        console.log('服務未連接');\n      }\n    } catch (error) {\n      console.error('重新檢測失敗:', error);\n    }\n  };\n\n  // 初始化 AI 狀態檢查\n  useEffect(() => {\n    const initAIStatus = async () => {\n      try {\n        console.log('AIStatus 組件初始化...');\n        // 延遲執行防止競狀態\n        setTimeout(() => {\n          handleRefreshConnection();\n        }, 1000);\n      } catch (error) {\n        console.error('AIStatus 初始化失敗:', error);\n      }\n    };\n    \n    initAIStatus();\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h2 className=\"text-xl font-cosmic text-gold-500\">AI 引擎狀態</h2>\n        <button\n          onClick={handleRefreshConnection}\n          className=\"btn-secondary text-sm px-4 py-2\"\n        >\n          🔄 重新檢測\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        {/* 連接狀態 */}\n        <div className=\"text-center\">\n          <div className={`w-16 h-16 rounded-full mx-auto mb-3 flex items-center justify-center text-2xl ${\n            isOllamaConnected \n              ? 'bg-green-500/20 text-green-400' \n              : 'bg-red-500/20 text-red-400'\n          }`}>\n            {isOllamaConnected ? '✅' : '❌'}\n          </div>\n          <h3 className=\"font-medium mb-1\">Ollama 服務</h3>\n          <p className={`text-sm ${\n            isOllamaConnected ? 'text-green-400' : 'text-red-400'\n          }`}>\n            {isOllamaConnected ? '已連接' : '未連接'}\n          </p>\n        </div>\n\n        {/* 可用模型 */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 rounded-full bg-blue-500/20 text-blue-400 mx-auto mb-3 flex items-center justify-center text-2xl\">\n            🤖\n          </div>\n          <h3 className=\"font-medium mb-1\">可用模型</h3>\n          <p className=\"text-sm text-gray-400\">\n            {availableModels.length} 個模型\n          </p>\n        </div>\n\n        {/* 當前模型 */}\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 rounded-full bg-purple-500/20 text-purple-400 mx-auto mb-3 flex items-center justify-center text-2xl\">\n            ⚡\n          </div>\n          <h3 className=\"font-medium mb-1\">當前模型</h3>\n          <p className=\"text-sm text-gray-400 truncate\">\n            {currentModel || '未選擇'}\n          </p>\n        </div>\n      </div>\n\n      {/* 詳細資訊 */}\n      {isOllamaConnected && availableModels.length > 0 && (\n        <div className=\"mt-6 pt-6 border-t border-cosmic-700\">\n          <h4 className=\"text-sm font-medium text-gray-300 mb-3\">可用模型列表</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n            {availableModels.map((model) => (\n              <div\n                key={model}\n                className={`px-3 py-2 rounded-lg text-sm ${\n                  model === currentModel\n                    ? 'bg-gold-500/20 text-gold-400 border border-gold-500/30'\n                    : 'bg-cosmic-800 text-gray-300'\n                }`}\n              >\n                {model}\n                {model === currentModel && (\n                  <span className=\"ml-2 text-xs\">（當前）</span>\n                )}\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* 未連接時的幫助資訊 */}\n      {!isOllamaConnected && (\n        <div className=\"mt-6 pt-6 border-t border-cosmic-700\">\n          <div className=\"bg-yellow-500/10 border border-yellow-500/30 rounded-lg p-4\">\n            <h4 className=\"text-yellow-400 font-medium mb-2\">🔧 需要安裝 Ollama</h4>\n            <p className=\"text-sm text-gray-300 mb-3\">\n              創世紀元需要 Ollama 來提供本地 AI 功能。請按照以下步驟安裝：\n            </p>\n            <ol className=\"text-sm text-gray-400 space-y-1 list-decimal list-inside\">\n              <li>前往 <span className=\"text-gold-400\">ollama.ai</span> 下載 Ollama</li>\n              <li>安裝完成後，在終端機執行 <code className=\"bg-cosmic-800 px-2 py-1 rounded\">ollama serve</code></li>\n              <li>下載中文模型：<code className=\"bg-cosmic-800 px-2 py-1 rounded\">ollama pull llama3.2</code></li>\n              <li>點擊上方的「重新檢測」按鈕</li>\n            </ol>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AIStatus;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Dashboard/Dashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Dashboard/ProjectCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Dashboard/ProjectGrid.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Dashboard/QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/DatabaseMaintenance/DatabaseMaintenance.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1632,1635],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1632,1635],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../../components/UI/Card';\nimport { Button } from '../../components/UI/Button';\nimport { Badge } from '../../components/UI/Badge';\nimport { Progress } from '../../components/UI/Progress';\nimport { Alert, AlertDescription } from '../../components/UI/Alert';\nimport api from '../../api';\nimport { \n  Database, \n  CheckCircle, \n  AlertTriangle, \n  XCircle, \n  RefreshCw, \n  Download, \n  Upload,\n  BarChart3,\n  Settings,\n  FileText\n} from 'lucide-react';\n\ninterface DatabaseIssue {\n  type: 'integrity' | 'orphan' | 'corruption' | 'constraint' | 'performance';\n  severity: 'low' | 'medium' | 'high' | 'critical';\n  table: string;\n  description: string;\n  suggestion: string;\n  autoFixable: boolean;\n}\n\ninterface DatabaseStatistics {\n  totalProjects: number;\n  totalChapters: number;\n  totalCharacters: number;\n  totalTemplates: number;\n  databaseSize: number;\n  lastVacuum: string | null;\n  fragmentationLevel: number;\n}\n\ninterface DatabaseCheckResult {\n  isHealthy: boolean;\n  issues: DatabaseIssue[];\n  statistics: DatabaseStatistics;\n  timestamp: string;\n}\n\nconst DatabaseMaintenance: React.FC = () => {\n  const [checkResult, setCheckResult] = useState<DatabaseCheckResult | null>(null);\n  const [isChecking, setIsChecking] = useState(false);\n  const [isRepairing, setIsRepairing] = useState(false);\n  const [isOptimizing, setIsOptimizing] = useState(false);\n  const [isExporting, setIsExporting] = useState(false);\n  const [isImporting, setIsImporting] = useState(false);\n  const [repairResult, setRepairResult] = useState<any>(null);\n  const [errorReport, setErrorReport] = useState<string>('');\n\n  useEffect(() => {\n    // 頁面載入時自動執行健康檢查\n    performHealthCheck();\n  }, []);\n\n  const performHealthCheck = async () => {\n    setIsChecking(true);\n    try {\n      const result = await api.database.healthCheck();\n      setCheckResult(result);\n      setRepairResult(null);\n    } catch (error) {\n      console.error('健康檢查失敗:', error);\n    } finally {\n      setIsChecking(false);\n    }\n  };\n\n  const performAutoRepair = async () => {\n    if (!checkResult || !checkResult.issues.length) return;\n\n    setIsRepairing(true);\n    try {\n      // autoRepair 方法不存在，使用 runMaintenance 代替\n      const result = await api.database.runMaintenance();\n      setRepairResult(result);\n      \n      // 修復後重新檢查\n      if (result.success) {\n        await performHealthCheck();\n      }\n    } catch (error) {\n      console.error('自動修復失敗:', error);\n    } finally {\n      setIsRepairing(false);\n    }\n  };\n\n  const optimizeDatabase = async () => {\n    setIsOptimizing(true);\n    try {\n      // optimize 方法不存在，使用 runMaintenance 代替\n      const result = await api.database.runMaintenance();\n      if (result.success) {\n        // 優化後重新檢查\n        await performHealthCheck();\n      }\n    } catch (error) {\n      console.error('資料庫優化失敗:', error);\n    } finally {\n      setIsOptimizing(false);\n    }\n  };\n\n  const exportDatabase = async () => {\n    setIsExporting(true);\n    try {\n      // export 方法不存在，使用 getStats 代替獲取資料庫資訊\n      const result = await api.database.getStats();\n      if (result.success) {\n        // 顯示成功訊息\n      }\n    } catch (error) {\n      console.error('匯出資料庫失敗:', error);\n    } finally {\n      setIsExporting(false);\n    }\n  };\n\n  const importDatabase = async () => {\n    setIsImporting(true);\n    try {\n      // import 方法不存在，使用 restore 代替\n      await api.database.restore('backup.db');\n      // 匯入後重新檢查\n      await performHealthCheck();\n    } catch (error) {\n      console.error('匯入資料庫失敗:', error);\n    } finally {\n      setIsImporting(false);\n    }\n  };\n\n  const generateReport = async () => {\n    if (!checkResult) return;\n\n    try {\n      // generateReport 方法不存在，使用 getStats 代替\n      const report = await api.database.getStats();\n      setErrorReport(report);\n    } catch (error) {\n      console.error('生成報告失敗:', error);\n    }\n  };\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical': return 'bg-red-500';\n      case 'high': return 'bg-orange-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'low': return 'bg-blue-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical': return <XCircle className=\"w-4 h-4\" />;\n      case 'high': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'medium': return <AlertTriangle className=\"w-4 h-4\" />;\n      case 'low': return <CheckCircle className=\"w-4 h-4\" />;\n      default: return <CheckCircle className=\"w-4 h-4\" />;\n    }\n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3\">\n          <Database className=\"w-8 h-8 text-blue-400\" />\n          <div>\n            <h1 className=\"text-2xl font-bold text-white\">資料庫維護</h1>\n            <p className=\"text-gray-400\">檢查和維護資料庫健康狀態</p>\n          </div>\n        </div>\n        \n        <div className=\"flex space-x-2\">\n          <Button\n            onClick={performHealthCheck}\n            disabled={isChecking}\n            className=\"bg-blue-600 hover:bg-blue-700\"\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${isChecking ? 'animate-spin' : ''}`} />\n            {isChecking ? '檢查中...' : '重新檢查'}\n          </Button>\n        </div>\n      </div>\n\n      {/* 健康狀態概覽 */}\n      {checkResult && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              {checkResult.isHealthy ? (\n                <CheckCircle className=\"w-5 h-5 text-green-400\" />\n              ) : (\n                <AlertTriangle className=\"w-5 h-5 text-yellow-400\" />\n              )}\n              <span className=\"text-white\">\n                資料庫狀態: {checkResult.isHealthy ? '健康' : '需要注意'}\n              </span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {checkResult.statistics ? (\n              <>\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-blue-400\">\n                      {checkResult.statistics.totalProjects || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">專案</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-green-400\">\n                      {checkResult.statistics.totalChapters || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">章節</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-purple-400\">\n                      {checkResult.statistics.totalCharacters || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">角色</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-orange-400\">\n                      {formatBytes(checkResult.statistics.databaseSize || 0)}\n                    </div>\n                    <div className=\"text-sm text-gray-400\">資料庫大小</div>\n                  </div>\n                </div>\n                \n                <div className=\"mt-4\">\n                  <div className=\"flex justify-between text-sm text-gray-400 mb-1\">\n                    <span>碎片化程度</span>\n                    <span>{(checkResult.statistics.fragmentationLevel || 0).toFixed(1)}%</span>\n                  </div>\n                  <Progress \n                    value={checkResult.statistics.fragmentationLevel || 0} \n                    className=\"h-2\"\n                  />\n                </div>\n                \n                <div className=\"mt-2 text-sm text-gray-400\">\n                  上次整理: {checkResult.statistics.lastVacuum ? \n                    new Date(checkResult.statistics.lastVacuum).toLocaleString('zh-TW') : \n                    '未知'\n                  }\n                </div>\n              </>\n            ) : (\n              <div className=\"text-center py-8 text-gray-400\">\n                <Database className=\"w-12 h-12 mx-auto mb-4 opacity-50\" />\n                <p>無法載入資料庫統計資訊</p>\n                <p className=\"text-sm mt-2\">請檢查資料庫連接狀態</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 問題列表 */}\n      {checkResult && checkResult.issues.length > 0 && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span className=\"text-white\">發現的問題 ({checkResult.issues.length})</span>\n              <div className=\"flex space-x-2\">\n                <Button\n                  onClick={performAutoRepair}\n                  disabled={isRepairing || !checkResult.issues.some(issue => issue.autoFixable)}\n                  className=\"bg-green-600 hover:bg-green-700\"\n                  size=\"sm\"\n                >\n                  <Settings className={`w-4 h-4 mr-2 ${isRepairing ? 'animate-spin' : ''}`} />\n                  {isRepairing ? '修復中...' : '自動修復'}\n                </Button>\n                <Button\n                  onClick={generateReport}\n                  className=\"bg-blue-600 hover:bg-blue-700\"\n                  size=\"sm\"\n                >\n                  <FileText className=\"w-4 h-4 mr-2\" />\n                  生成報告\n                </Button>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {checkResult.issues.map((issue, index) => (\n                <div key={index} className=\"flex items-start space-x-3 p-3 bg-gray-700 rounded-lg\">\n                  <div className=\"flex-shrink-0\">\n                    {getSeverityIcon(issue.severity)}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-1\">\n                      <Badge className={`${getSeverityColor(issue.severity)} text-white`}>\n                        {issue.severity}\n                      </Badge>\n                      <Badge variant=\"outline\" className=\"text-gray-300\">\n                        {issue.table}\n                      </Badge>\n                      {issue.autoFixable && (\n                        <Badge className=\"bg-green-600 text-white\">\n                          可自動修復\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"text-white mb-1\">{issue.description}</div>\n                    <div className=\"text-sm text-gray-400\">{issue.suggestion}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* 修復結果 */}\n      {repairResult && (\n        <Alert className={repairResult.success ? 'border-green-500' : 'border-red-500'}>\n          <AlertDescription className=\"text-white\">\n            {repairResult.message}\n            {repairResult.fixedIssues.length > 0 && (\n              <div className=\"mt-2\">\n                已修復 {repairResult.fixedIssues.length} 個問題\n              </div>\n            )}\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* 操作按鈕 */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Button\n          onClick={optimizeDatabase}\n          disabled={isOptimizing}\n          className=\"bg-purple-600 hover:bg-purple-700 h-16\"\n        >\n          <div className=\"text-center\">\n            <BarChart3 className={`w-6 h-6 mx-auto mb-1 ${isOptimizing ? 'animate-pulse' : ''}`} />\n            <div>{isOptimizing ? '優化中...' : '優化資料庫'}</div>\n          </div>\n        </Button>\n        \n        <Button\n          onClick={exportDatabase}\n          disabled={isExporting}\n          className=\"bg-blue-600 hover:bg-blue-700 h-16\"\n        >\n          <div className=\"text-center\">\n            <Download className={`w-6 h-6 mx-auto mb-1 ${isExporting ? 'animate-bounce' : ''}`} />\n            <div>{isExporting ? '匯出中...' : '匯出備份'}</div>\n          </div>\n        </Button>\n        \n        <Button\n          onClick={importDatabase}\n          disabled={isImporting}\n          className=\"bg-orange-600 hover:bg-orange-700 h-16\"\n        >\n          <div className=\"text-center\">\n            <Upload className={`w-6 h-6 mx-auto mb-1 ${isImporting ? 'animate-bounce' : ''}`} />\n            <div>{isImporting ? '匯入中...' : '匯入備份'}</div>\n          </div>\n        </Button>\n        \n        <Button\n          onClick={() => api.database.runMaintenance()}\n          className=\"bg-green-600 hover:bg-green-700 h-16\"\n        >\n          <div className=\"text-center\">\n            <RefreshCw className=\"w-6 h-6 mx-auto mb-1\" />\n            <div>整理資料庫</div>\n          </div>\n        </Button>\n      </div>\n\n      {/* 錯誤報告 */}\n      {errorReport && (\n        <Card className=\"bg-gray-800 border-gray-700\">\n          <CardHeader>\n            <CardTitle className=\"text-white\">詳細報告</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <pre className=\"text-sm text-gray-300 whitespace-pre-wrap bg-gray-900 p-4 rounded-lg overflow-auto max-h-96\">\n              {errorReport}\n            </pre>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default DatabaseMaintenance;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/DatabaseMaintenance/DatabaseMaintenanceSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/DatabaseTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/ProjectEditor/ProjectEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/ProjectEditor/SimpleProjectEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/Settings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/SettingsDebug.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/SettingsMain.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadUserSettings'. Either include it or remove the dependency array.","line":35,"column":6,"nodeType":"ArrayExpression","endLine":35,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadUserSettings]","fix":{"range":[1086,1088],"text":"[loadUserSettings]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'handleSaveSettings'. Either include it or remove the dependency array.","line":50,"column":6,"nodeType":"ArrayExpression","endLine":50,"endColumn":35,"suggestions":[{"desc":"Update the dependencies array to be: [handleSaveSettings, hasUnsavedChanges, isSaving]","fix":{"range":[1493,1522],"text":"[handleSaveSettings, hasUnsavedChanges, isSaving]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useAppDispatch, useAppSelector } from '../../hooks/redux';\nimport { SettingsTab } from './types';\nimport { useSettingsActions } from './hooks/useSettingsActions';\nimport SettingsSidebar from './components/SettingsSidebar';\nimport SettingsLoadingView from './components/SettingsLoadingView';\nimport UpdateSettings from '../../components/Update/UpdateSettings';\nimport {\n  GeneralSettings,\n  AISettings,\n  EditorSettings,\n  UISettings,\n  BackupSettings,\n  PrivacySettings,\n  ShortcutsSettings,\n  DatabaseMaintenanceSettings,\n} from './tabs';\n\nconst SettingsMain: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { settings, hasUnsavedChanges, isLoading } = useAppSelector(state => state.settings);\n  const [activeTab, setActiveTab] = useState<SettingsTab>('general');\n  const [isSaving, setIsSaving] = useState(false);\n  \n  const {\n    loadUserSettings,\n    saveSettings,\n    resetAllSettings,\n    exportSettings,\n    importSettings,\n  } = useSettingsActions();\n\n  useEffect(() => {\n    loadUserSettings();\n  }, []);\n\n  // 鍵盤快捷鍵支持\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if ((e.ctrlKey || e.metaKey) && e.key === 's') {\n        e.preventDefault();\n        if (hasUnsavedChanges && !isSaving) {\n          handleSaveSettings();\n        }\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [hasUnsavedChanges, isSaving]);\n\n  const handleSaveSettings = async () => {\n    setIsSaving(true);\n    try {\n      await saveSettings(settings);\n    } finally {\n      setIsSaving(false);\n    }\n  };\n\n  const renderTabContent = () => {\n    const commonProps = { settings, dispatch };\n    \n    switch (activeTab) {\n      case 'general':\n        return <GeneralSettings {...commonProps} />;\n      case 'ai':\n        return <AISettings {...commonProps} />;\n      case 'editor':\n        return <EditorSettings {...commonProps} />;\n      case 'ui':\n        return <UISettings {...commonProps} />;\n      case 'backup':\n        return <BackupSettings {...commonProps} />;\n      case 'database':\n        return <DatabaseMaintenanceSettings />;\n      case 'update':\n        return <UpdateSettings />;\n      case 'privacy':\n        return <PrivacySettings {...commonProps} />;\n      case 'shortcuts':\n        return <ShortcutsSettings {...commonProps} />;\n      default:\n        return <GeneralSettings {...commonProps} />;\n    }\n  };\n\n  if (isLoading) {\n    return <SettingsLoadingView />;\n  }\n\n  return (\n    <div className=\"h-full flex bg-cosmic-900\">\n      <SettingsSidebar\n        activeTab={activeTab}\n        onTabChange={setActiveTab}\n        hasUnsavedChanges={hasUnsavedChanges}\n        isSaving={isSaving}\n        onSave={handleSaveSettings}\n        onExport={exportSettings}\n        onImport={importSettings}\n        onReset={resetAllSettings}\n      />\n\n      <div className=\"flex-1 overflow-y-auto\">\n        <div className=\"p-8\">\n          {renderTabContent()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SettingsMain;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/SettingsSimple.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/components/SettingsLoadingView.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/components/SettingsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/hooks/useSettingsActions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/AISettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/BackupSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/DatabaseMaintenanceSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/EditorSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":87,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":90,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { updateEditorSettings, resetEditorSettings } from '../../../store/slices/settingsSlice';\nimport { SettingsComponentProps } from '../types';\n\nconst EditorSettings: React.FC<SettingsComponentProps> = ({ settings, dispatch }) => (\n  <div className=\"space-y-6\">\n    <div className=\"flex items-center justify-between\">\n      <h2 className=\"text-2xl font-cosmic text-gold-500\">編輯器設定</h2>\n      <button\n        onClick={() => dispatch(resetEditorSettings())}\n        className=\"btn-secondary text-sm\"\n      >\n        重置編輯器設定\n      </button>\n    </div>\n    \n    <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n      <h3 className=\"text-lg font-medium text-gold-400 mb-4\">外觀</h3>\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n        <div>\n          <label className=\"block text-gray-300 mb-2\">主題</label>\n          <select\n            value={settings.editor.theme}\n            onChange={(e) => dispatch(updateEditorSettings({ theme: e.target.value as any }))}\n            className=\"w-full bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n          >\n            <option value=\"cosmic\">宇宙深藍</option>\n            <option value=\"light\">純淨白色</option>\n            <option value=\"dark\">經典黑色</option>\n            <option value=\"sepia\">復古棕褐</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-gray-300 mb-2\">字體</label>\n          <select\n            value={settings.editor.fontFamily}\n            onChange={(e) => dispatch(updateEditorSettings({ fontFamily: e.target.value }))}\n            className=\"w-full bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n          >\n            <option value='\"Noto Sans TC\", sans-serif'>思源黑體</option>\n            <option value='\"Noto Serif TC\", serif'>思源宋體</option>\n            <option value='Inter, sans-serif'>Inter</option>\n            <option value='Georgia, serif'>Georgia</option>\n            <option value='\"JetBrains Mono\", monospace'>JetBrains Mono</option>\n          </select>\n        </div>\n        \n        <div>\n          <label className=\"block text-gray-300 mb-2\">字體大小</label>\n          <input\n            type=\"number\"\n            value={settings.editor.fontSize}\n            onChange={(e) => dispatch(updateEditorSettings({ fontSize: parseInt(e.target.value) }))}\n            min=\"12\"\n            max=\"32\"\n            className=\"w-full bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n          />\n        </div>\n        \n        <div>\n          <label className=\"block text-gray-300 mb-2\">行高</label>\n          <input\n            type=\"number\"\n            value={settings.editor.lineHeight}\n            onChange={(e) => dispatch(updateEditorSettings({ lineHeight: parseFloat(e.target.value) }))}\n            min=\"1.0\"\n            max=\"3.0\"\n            step=\"0.1\"\n            className=\"w-full bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n          />\n        </div>\n      </div>\n    </div>\n    \n    <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n      <h3 className=\"text-lg font-medium text-gold-400 mb-4\">編輯器行為</h3>\n      <div className=\"space-y-4\">\n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"showLineNumbers\"\n            checked={settings.editor.showLineNumbers}\n            onChange={(e) => dispatch(updateEditorSettings({ showLineNumbers: e.target.checked }))}\n            className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n          />\n          <label htmlFor=\"showLineNumbers\" className=\"text-gray-300\">顯示行號</label>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"wordWrap\"\n            checked={settings.editor.wordWrap}\n            onChange={(e) => dispatch(updateEditorSettings({ wordWrap: e.target.checked }))}\n            className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n          />\n          <label htmlFor=\"wordWrap\" className=\"text-gray-300\">自動換行</label>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"spellCheck\"\n            checked={settings.editor.spellCheck}\n            onChange={(e) => dispatch(updateEditorSettings({ spellCheck: e.target.checked }))}\n            className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n          />\n          <label htmlFor=\"spellCheck\" className=\"text-gray-300\">拼字檢查</label>\n        </div>\n        \n        <div className=\"flex items-center\">\n          <input\n            type=\"checkbox\"\n            id=\"enableVimMode\"\n            checked={settings.editor.enableVimMode}\n            onChange={(e) => dispatch(updateEditorSettings({ enableVimMode: e.target.checked }))}\n            className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n          />\n          <label htmlFor=\"enableVimMode\" className=\"text-gray-300\">Vim 模式</label>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default EditorSettings;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/GeneralSettings.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":86,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":89,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[974,977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[974,977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { updateSettings } from '../../../store/slices/settingsSlice';\nimport { SettingsComponentProps } from '../types';\nimport { useI18n } from '../../../hooks/useI18n';\n\nconst GeneralSettings: React.FC<SettingsComponentProps> = ({ settings, dispatch }) => {\n  const { t } = useI18n();\n  \n  return (\n    <div className=\"space-y-6\">\n      <h2 className=\"text-2xl font-cosmic text-gold-500 mb-6\">{t('settings.general.title')}</h2>\n      \n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gold-400 mb-4\">{t('settings.general.languageAndRegion')}</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <div>\n            <label className=\"block text-gray-300 mb-2\">{t('settings.general.language')}</label>\n            <select\n              value={settings.language}\n              onChange={(e) => dispatch(updateSettings({ language: e.target.value as any }))}\n              className=\"w-full bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n            >\n              <option value=\"zh-TW\">繁體中文</option>\n              <option value=\"zh-CN\">简体中文</option>\n              <option value=\"en\">English</option>\n              <option value=\"ja\">日本語</option>\n            </select>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"bg-cosmic-800 border border-cosmic-700 rounded-lg p-6\">\n        <h3 className=\"text-lg font-medium text-gold-400 mb-4\">{t('settings.general.autoSaveSection')}</h3>\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center\">\n            <input\n              type=\"checkbox\"\n              id=\"autoSave\"\n              checked={settings.autoSave}\n              onChange={(e) => dispatch(updateSettings({ autoSave: e.target.checked }))}\n              className=\"mr-3 w-4 h-4 text-gold-500 bg-cosmic-700 border-cosmic-600 rounded focus:ring-gold-500\"\n            />\n            <label htmlFor=\"autoSave\" className=\"text-gray-300\">{t('settings.general.autoSave')}</label>\n          </div>\n          \n          {settings.autoSave && (\n            <div>\n              <label className=\"block text-gray-300 mb-2\">{t('settings.general.autoSaveInterval')}</label>\n              <input\n                type=\"number\"\n                value={settings.autoSaveInterval / 1000}\n                onChange={(e) => dispatch(updateSettings({ autoSaveInterval: parseInt(e.target.value) * 1000 }))}\n                min=\"1\"\n                max=\"300\"\n                className=\"w-32 bg-cosmic-700 border border-cosmic-600 rounded-lg px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-gold-500\"\n              />\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GeneralSettings;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/PrivacySettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/ShortcutsSettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/UISettings.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/tabs/index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Settings/types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppSettings } from '../../store/slices/settingsSlice';\n\nexport type SettingsTab = 'general' | 'ai' | 'editor' | 'ui' | 'backup' | 'database' | 'update' | 'privacy' | 'shortcuts';\n\nexport interface SettingsTabConfig {\n  id: string;\n  name: string;\n  icon: string;\n}\n\nexport interface SettingsComponentProps {\n  settings: AppSettings;\n  dispatch: any;\n}\n\nexport interface SettingsState {\n  activeTab: SettingsTab;\n  isSaving: boolean;\n}\n\nexport const SETTINGS_TABS: SettingsTabConfig[] = [\n  { id: 'general', name: '一般設定', icon: '⚙️' },\n  { id: 'ai', name: 'AI 設定', icon: '🤖' },\n  { id: 'editor', name: '編輯器', icon: '📝' },\n  { id: 'ui', name: '界面', icon: '🎨' },\n  { id: 'backup', name: '備份', icon: '💾' },\n  { id: 'database', name: '資料庫維護', icon: '🗄️' },\n  { id: 'update', name: '自動更新', icon: '🔄' },\n  { id: 'privacy', name: '隱私', icon: '🔒' },\n  { id: 'shortcuts', name: '快捷鍵', icon: '⌨️' },\n];\n\nexport const SHORTCUT_LABELS: { [key: string]: string } = {\n  save: '儲存',\n  newProject: '新建專案',\n  openProject: '開啟專案',\n  aiContinue: 'AI 續寫',\n  toggleSidebar: '切換側邊欄',\n  toggleFullscreen: '全螢幕',\n  find: '尋找',\n  replace: '取代',\n  undo: '復原',\n  redo: '重做',\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/Statistics/Statistics.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2394,2397],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2394,2397],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport StatisticsService, { \n  ProjectStatistics, \n  OverallStatistics, \n  MonthlyStats \n} from '../../services/statisticsService';\n\nconst Statistics: React.FC = () => {\n  const navigate = useNavigate();\n  const [activeTab, setActiveTab] = useState<'overview' | 'projects' | 'trends'>('overview');\n  const [loading, setLoading] = useState(true);\n  const [overallStats, setOverallStats] = useState<OverallStatistics | null>(null);\n  const [projectStats, setProjectStats] = useState<ProjectStatistics[]>([]);\n  const [monthlyStats, setMonthlyStats] = useState<MonthlyStats[]>([]);\n\n  useEffect(() => {\n    loadStatistics();\n  }, []);\n\n  const loadStatistics = async () => {\n    setLoading(true);\n    try {\n      const [overall, projects, monthly] = await Promise.all([\n        StatisticsService.getOverallStatistics(),\n        StatisticsService.getProjectStatistics(),\n        StatisticsService.getMonthlyStatistics()\n      ]);\n\n      setOverallStats(overall);\n      setProjectStats(projects);\n      setMonthlyStats(monthly);\n    } catch (error) {\n      console.error('載入統計數據失敗:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"p-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-gold-500\"></div>\n          <span className=\"ml-2 text-gray-300\">載入統計數據中...</span>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-8\">\n      {/* 標題和導航 */}\n      <div className=\"flex items-center justify-between mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-cosmic text-gold-400 mb-2\">📊 創作統計</h1>\n          <p className=\"text-gray-300\">追蹤您的創作進度和成就</p>\n        </div>\n        <button\n          onClick={() => navigate('/')}\n          className=\"btn-secondary\"\n        >\n          返回首頁\n        </button>\n      </div>\n\n      {/* 標籤導航 */}\n      <div className=\"mb-8\">\n        <nav className=\"flex space-x-8\">\n          {[\n            { id: 'overview', label: '總覽', icon: '📈' },\n            { id: 'projects', label: '專案統計', icon: '📚' },\n            { id: 'trends', label: '趨勢分析', icon: '📊' }\n          ].map((tab) => (\n            <button\n              key={tab.id}\n              onClick={() => setActiveTab(tab.id as any)}\n              className={`flex items-center space-x-2 pb-4 border-b-2 font-medium transition-colors ${\n                activeTab === tab.id\n                  ? 'border-gold-500 text-gold-400'\n                  : 'border-transparent text-gray-400 hover:text-gray-300'\n              }`}\n            >\n              <span>{tab.icon}</span>\n              <span>{tab.label}</span>\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      {/* 總覽標籤 */}\n      {activeTab === 'overview' && overallStats && (\n        <div className=\"space-y-8\">\n          {/* 核心統計卡片 */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"card text-center\">\n              <div className=\"text-3xl font-bold text-gold-500 mb-2\">\n                {overallStats.totalProjects}\n              </div>\n              <div className=\"text-gray-400\">創作專案</div>\n            </div>\n            \n            <div className=\"card text-center\">\n              <div className=\"text-3xl font-bold text-cyan-400 mb-2\">\n                {overallStats.totalChapters}\n              </div>\n              <div className=\"text-gray-400\">完成章節</div>\n            </div>\n            \n            <div className=\"card text-center\">\n              <div className=\"text-3xl font-bold text-purple-400 mb-2\">\n                {StatisticsService.formatNumber(overallStats.totalWords)}\n              </div>\n              <div className=\"text-gray-400\">總字數</div>\n            </div>\n            \n            <div className=\"card text-center\">\n              <div className=\"text-3xl font-bold text-green-400 mb-2\">\n                {overallStats.totalCharacters}\n              </div>\n              <div className=\"text-gray-400\">創建角色</div>\n            </div>\n          </div>\n\n          {/* 創作亮點 */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"card\">\n              <h3 className=\"text-xl font-cosmic text-gold-400 mb-4\">🏆 創作亮點</h3>\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-300\">平均每日字數</span>\n                  <span className=\"text-gold-400 font-bold\">\n                    {StatisticsService.formatNumber(overallStats.averageWordsPerDay)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-300\">總寫作時間</span>\n                  <span className=\"text-cyan-400 font-bold\">\n                    {StatisticsService.formatTime(overallStats.totalWritingTime)}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-gray-300\">最高產的一天</span>\n                  <span className=\"text-purple-400 font-bold\">\n                    {overallStats.mostProductiveDay || '尚無數據'}\n                  </span>\n                </div>\n                \n                {overallStats.longestChapter.wordCount > 0 && (\n                  <div className=\"pt-4 border-t border-cosmic-700\">\n                    <div className=\"text-gray-300 mb-2\">📖 最長章節</div>\n                    <div className=\"text-sm\">\n                      <div className=\"text-white font-medium\">\n                        {overallStats.longestChapter.title}\n                      </div>\n                      <div className=\"text-gray-400\">\n                        《{overallStats.longestChapter.projectName}》 · {StatisticsService.formatNumber(overallStats.longestChapter.wordCount)} 字\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* 最近活動 */}\n            <div className=\"card\">\n              <h3 className=\"text-xl font-cosmic text-gold-400 mb-4\">⚡ 最近活動</h3>\n              <div className=\"space-y-3 max-h-80 overflow-y-auto\">\n                {overallStats.recentActivity.length > 0 ? (\n                  overallStats.recentActivity.map((session, index) => (\n                    <div key={index} className=\"flex justify-between items-center py-2 border-b border-cosmic-800 last:border-b-0\">\n                      <div>\n                        <div className=\"text-white text-sm\">{session.date}</div>\n                        <div className=\"text-gray-400 text-xs\">\n                          {session.chaptersWorked} 章節 · {StatisticsService.formatTime(session.timeSpent)}\n                        </div>\n                      </div>\n                      <div className=\"text-gold-400 font-bold\">\n                        +{StatisticsService.formatNumber(session.wordsWritten)}\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <div className=\"text-4xl mb-2\">📝</div>\n                    <div>還沒有寫作記錄</div>\n                    <div className=\"text-sm\">開始創作來記錄您的進度！</div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* 專案統計標籤 */}\n      {activeTab === 'projects' && (\n        <div className=\"space-y-6\">\n          {projectStats.length > 0 ? (\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {projectStats.map((project) => (\n                <div key={project.id} className=\"card\">\n                  <div className=\"flex justify-between items-start mb-4\">\n                    <div>\n                      <h3 className=\"text-lg font-cosmic text-white mb-1\">\n                        {project.name}\n                      </h3>\n                      <div className=\"text-sm text-gray-400\">\n                        建立於 {project.createdAt.toLocaleDateString('zh-TW')}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <div className=\"text-sm text-gray-400\">完成度</div>\n                      <div className=\"text-lg font-bold text-gold-400\">\n                        {project.completionPercentage}%\n                      </div>\n                    </div>\n                  </div>\n                  \n                  {/* 進度條 */}\n                  <div className=\"w-full bg-cosmic-900 rounded-full h-2 mb-4\">\n                    <div \n                      className=\"bg-gradient-to-r from-gold-500 to-gold-400 h-2 rounded-full transition-all duration-300\"\n                      style={{ width: `${project.completionPercentage}%` }}\n                    ></div>\n                  </div>\n                  \n                  {/* 統計數據 */}\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-cyan-400\">\n                        {project.totalChapters}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">章節</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-purple-400\">\n                        {StatisticsService.formatNumber(project.totalWords)}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">字數</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-green-400\">\n                        {project.charactersCount}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">角色</div>\n                    </div>\n                    \n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-orange-400\">\n                        {StatisticsService.formatNumber(project.averageWordsPerChapter)}\n                      </div>\n                      <div className=\"text-xs text-gray-400\">平均字數</div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"mt-4 pt-4 border-t border-cosmic-700 text-xs text-gray-500\">\n                    最後更新：{project.lastUpdated.toLocaleDateString('zh-TW')}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-16\">\n              <div className=\"text-6xl mb-4\">📚</div>\n              <h3 className=\"text-xl text-gray-300 mb-2\">還沒有專案</h3>\n              <p className=\"text-gray-500 mb-6\">建立您的第一個創作專案來查看統計數據</p>\n              <button\n                onClick={() => navigate('/')}\n                className=\"btn-primary\"\n              >\n                開始創作\n              </button>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* 趨勢分析標籤 */}\n      {activeTab === 'trends' && (\n        <div className=\"space-y-8\">\n          {/* 月度趨勢 */}\n          <div className=\"card\">\n            <h3 className=\"text-xl font-cosmic text-gold-400 mb-6\">📈 月度創作趨勢</h3>\n            <div className=\"space-y-4\">\n              {monthlyStats.map((month, index) => (\n                <div key={index} className=\"flex items-center justify-between py-3 border-b border-cosmic-800 last:border-b-0\">\n                  <div className=\"flex-1\">\n                    <div className=\"text-white font-medium\">{month.month}</div>\n                    <div className=\"text-sm text-gray-400\">\n                      {month.chaptersCompleted} 章節 · {StatisticsService.formatTime(month.timeSpent)}\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex-1 mx-4\">\n                    <div className=\"w-full bg-cosmic-900 rounded-full h-2\">\n                      <div \n                        className=\"bg-gradient-to-r from-cyan-500 to-purple-500 h-2 rounded-full\"\n                        style={{ \n                          width: `${Math.min((month.wordsWritten / 20000) * 100, 100)}%` \n                        }}\n                      ></div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-right\">\n                    <div className=\"text-lg font-bold text-cyan-400\">\n                      {StatisticsService.formatNumber(month.wordsWritten)}\n                    </div>\n                    <div className=\"text-xs text-gray-400\">字</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* 創作建議 */}\n          <div className=\"card\">\n            <h3 className=\"text-xl font-cosmic text-gold-400 mb-4\">💡 創作建議</h3>\n            <div className=\"space-y-4\">\n              <div className=\"bg-blue-500/10 border border-blue-500/30 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <span className=\"text-blue-400 mr-2\">🎯</span>\n                  <span className=\"font-medium text-blue-400\">每日目標</span>\n                </div>\n                <p className=\"text-sm text-gray-300\">\n                  建議每天寫作 500-1000 字，保持創作習慣。持續的小進步比偶爾的大突破更有效。\n                </p>\n              </div>\n              \n              <div className=\"bg-green-500/10 border border-green-500/30 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <span className=\"text-green-400 mr-2\">📚</span>\n                  <span className=\"font-medium text-green-400\">章節規劃</span>\n                </div>\n                <p className=\"text-sm text-gray-300\">\n                  每章保持 2000-4000 字的長度，有助於讀者閱讀和情節發展的節奏控制。\n                </p>\n              </div>\n              \n              <div className=\"bg-purple-500/10 border border-purple-500/30 rounded-lg p-4\">\n                <div className=\"flex items-center mb-2\">\n                  <span className=\"text-purple-400 mr-2\">⚡</span>\n                  <span className=\"font-medium text-purple-400\">效率提升</span>\n                </div>\n                <p className=\"text-sm text-gray-300\">\n                  使用 AI 續寫功能來克服寫作瓶頸，但記得保持您的獨特風格和創意。\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/pages/TauriTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/autoBackupService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/backupService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[621,624],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[621,624],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7698,7701],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7698,7701],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Project } from '../store/slices/projectsSlice';\nimport { Chapter } from '../store/slices/chaptersSlice';\nimport { Character } from '../store/slices/charactersSlice';\nimport { AppSettings } from '../store/slices/settingsSlice';\nimport api from '../api';\n\n// 備份資料結構\nexport interface BackupData {\n  version: string;\n  timestamp: Date;\n  metadata: {\n    appVersion: string;\n    platform: string;\n    totalProjects: number;\n    totalChapters: number;\n    totalCharacters: number;\n  };\n  data: {\n    projects: Project[];\n    chapters: Chapter[];\n    characters: Character[];\n    settings: AppSettings;\n    templates?: any[];\n  };\n}\n\n// 備份檔案資訊\nexport interface BackupFileInfo {\n  id: string;\n  filename: string;\n  path: string;\n  size: number;\n  timestamp: Date;\n  version: string;\n  metadata: BackupData['metadata'];\n}\n\n// 備份驗證結果\nexport interface BackupValidationResult {\n  isValid: boolean;\n  version: string;\n  errors: string[];\n  warnings: string[];\n  metadata?: BackupData['metadata'];\n}\n\n// 還原選項\nexport interface RestoreOptions {\n  includeProjects: boolean;\n  includeChapters: boolean;\n  includeCharacters: boolean;\n  includeSettings: boolean;\n  includeTemplates: boolean;\n  overwriteExisting: boolean;\n  selectedProjectIds?: string[];\n}\n\nclass BackupServiceClass {\n  private readonly BACKUP_VERSION = '1.0.0';\n  private readonly BACKUP_FILE_EXTENSION = '.gcbackup';\n\n  /**\n   * 創建完整備份\n   */\n  async createFullBackup(): Promise<string> {\n    try {\n      // 獲取所有資料\n      const [projects, allChapters, allCharacters, settings] = await Promise.all([\n        api.projects.getAll(),\n        this.getAllChapters(),\n        this.getAllCharacters(),\n        api.settings.getAll()\n      ]);\n\n      // 構建備份資料\n      const backupData: BackupData = {\n        version: this.BACKUP_VERSION,\n        timestamp: new Date(),\n        metadata: {\n          appVersion: await api.system.getAppVersion(),\n          platform: navigator.platform,\n          totalProjects: projects.length,\n          totalChapters: allChapters.length,\n          totalCharacters: allCharacters.length,\n        },\n        data: {\n          projects,\n          chapters: allChapters,\n          characters: allCharacters,\n          settings: settings || {},\n        }\n      };\n\n      // 生成備份檔案\n      const filename = this.generateBackupFilename();\n      const backupJson = JSON.stringify(backupData, null, 2);\n      \n      // 下載備份檔案\n      this.downloadBackupFile(backupJson, filename);\n      \n      return filename;\n    } catch (error) {\n      console.error('創建備份失敗:', error);\n      throw new Error(`備份創建失敗: ${error instanceof Error ? error.message : '未知錯誤'}`);\n    }\n  }\n\n  /**\n   * 創建專案備份\n   */\n  async createProjectBackup(projectId: string): Promise<string> {\n    try {\n      // 獲取專案相關資料\n      const [project, chapters, characters, settings] = await Promise.all([\n        api.projects.getById(projectId),\n        api.chapters.getByProjectId(projectId),\n        api.characters.getByProjectId(projectId),\n        api.settings.getAll()\n      ]);\n\n      if (!project) {\n        throw new Error('專案不存在');\n      }\n\n      // 構建專案備份資料\n      const backupData: BackupData = {\n        version: this.BACKUP_VERSION,\n        timestamp: new Date(),\n        metadata: {\n          appVersion: await api.system.getAppVersion(),\n          platform: navigator.platform,\n          totalProjects: 1,\n          totalChapters: chapters.length,\n          totalCharacters: characters.length,\n        },\n        data: {\n          projects: [project],\n          chapters,\n          characters,\n          settings: settings || {},\n        }\n      };\n\n      // 生成備份檔案\n      const filename = this.generateBackupFilename(project.name);\n      const backupJson = JSON.stringify(backupData, null, 2);\n      \n      // 下載備份檔案\n      this.downloadBackupFile(backupJson, filename);\n      \n      return filename;\n    } catch (error) {\n      console.error('創建專案備份失敗:', error);\n      throw new Error(`專案備份創建失敗: ${error instanceof Error ? error.message : '未知錯誤'}`);\n    }\n  }\n\n  /**\n   * 驗證備份檔案\n   */\n  async validateBackup(file: File): Promise<BackupValidationResult> {\n    try {\n      const content = await this.readFileContent(file);\n      const backupData = JSON.parse(content) as BackupData;\n      \n      const errors: string[] = [];\n      const warnings: string[] = [];\n\n      // 檢查基本結構\n      if (!backupData.version) {\n        errors.push('缺少版本資訊');\n      }\n\n      if (!backupData.timestamp) {\n        errors.push('缺少時間戳記');\n      }\n\n      if (!backupData.data) {\n        errors.push('缺少資料內容');\n      }\n\n      // 檢查版本相容性\n      if (backupData.version !== this.BACKUP_VERSION) {\n        warnings.push(`備份版本 (${backupData.version}) 與當前版本 (${this.BACKUP_VERSION}) 不同`);\n      }\n\n      // 檢查資料完整性\n      if (backupData.data) {\n        if (!Array.isArray(backupData.data.projects)) {\n          errors.push('專案資料格式錯誤');\n        }\n\n        if (!Array.isArray(backupData.data.chapters)) {\n          errors.push('章節資料格式錯誤');\n        }\n\n        if (!Array.isArray(backupData.data.characters)) {\n          errors.push('角色資料格式錯誤');\n        }\n\n        // 檢查資料關聯性\n        if (backupData.data.projects && backupData.data.chapters) {\n          const projectIds = new Set(backupData.data.projects.map(p => p.id));\n          const orphanChapters = backupData.data.chapters.filter(c => !projectIds.has(c.projectId));\n          if (orphanChapters.length > 0) {\n            warnings.push(`發現 ${orphanChapters.length} 個孤立章節`);\n          }\n        }\n\n        if (backupData.data.projects && backupData.data.characters) {\n          const projectIds = new Set(backupData.data.projects.map(p => p.id));\n          const orphanCharacters = backupData.data.characters.filter(c => !projectIds.has(c.projectId));\n          if (orphanCharacters.length > 0) {\n            warnings.push(`發現 ${orphanCharacters.length} 個孤立角色`);\n          }\n        }\n      }\n\n      return {\n        isValid: errors.length === 0,\n        version: backupData.version || 'unknown',\n        errors,\n        warnings,\n        metadata: backupData.metadata\n      };\n\n    } catch (error) {\n      return {\n        isValid: false,\n        version: 'unknown',\n        errors: [`檔案解析失敗: ${error instanceof Error ? error.message : '未知錯誤'}`],\n        warnings: []\n      };\n    }\n  }\n\n  /**\n   * 還原備份\n   */\n  async restoreBackup(file: File, options: RestoreOptions): Promise<void> {\n    try {\n      // 先驗證備份\n      const validation = await this.validateBackup(file);\n      if (!validation.isValid) {\n        throw new Error(`備份檔案無效: ${validation.errors.join(', ')}`);\n      }\n\n      const content = await this.readFileContent(file);\n      const backupData = JSON.parse(content) as BackupData;\n\n      // 執行還原操作\n      await this.performRestore(backupData, options);\n\n    } catch (error) {\n      console.error('還原備份失敗:', error);\n      throw new Error(`備份還原失敗: ${error instanceof Error ? error.message : '未知錯誤'}`);\n    }\n  }\n\n  /**\n   * 獲取備份預覽資訊\n   */\n  async getBackupPreview(file: File): Promise<BackupData['metadata'] & { \n    projects: Array<{ id: string; name: string; type: string }>;\n    dataSize: number;\n  }> {\n    try {\n      const content = await this.readFileContent(file);\n      const backupData = JSON.parse(content) as BackupData;\n\n      return {\n        ...backupData.metadata,\n        projects: backupData.data.projects.map(p => ({\n          id: p.id,\n          name: p.name,\n          type: p.type\n        })),\n        dataSize: content.length\n      };\n    } catch (error) {\n      throw new Error(`無法讀取備份預覽: ${error instanceof Error ? error.message : '未知錯誤'}`);\n    }\n  }\n\n  /**\n   * 執行還原操作\n   */\n  private async performRestore(backupData: BackupData, options: RestoreOptions): Promise<void> {\n    const operations: Promise<any>[] = [];\n\n    // 還原設定\n    if (options.includeSettings && backupData.data.settings) {\n      // 將設定物件轉換為多個 set 操作\n      const settings = backupData.data.settings;\n      for (const [key, value] of Object.entries(settings)) {\n        operations.push(api.settings.set(key, value));\n      }\n    }\n\n    // 還原專案\n    if (options.includeProjects && backupData.data.projects) {\n      const projectsToRestore = options.selectedProjectIds\n        ? backupData.data.projects.filter(p => options.selectedProjectIds!.includes(p.id))\n        : backupData.data.projects;\n\n      for (const project of projectsToRestore) {\n        if (options.overwriteExisting) {\n          operations.push(\n            api.projects.update(project).catch(() =>\n              api.projects.create(project)\n            )\n          );\n        } else {\n          // 檢查專案是否已存在\n          const existing = await api.projects.getById(project.id);\n          if (!existing) {\n            operations.push(api.projects.create(project));\n          }\n        }\n      }\n    }\n\n    // 還原章節\n    if (options.includeChapters && backupData.data.chapters) {\n      const projectIds = options.selectedProjectIds || \n        backupData.data.projects.map(p => p.id);\n\n      const chaptersToRestore = backupData.data.chapters.filter(c => \n        projectIds.includes(c.projectId)\n      );\n\n      for (const chapter of chaptersToRestore) {\n        if (options.overwriteExisting) {\n          operations.push(\n            api.chapters.update(chapter).catch(() =>\n              api.chapters.create(chapter)\n            )\n          );\n        } else {\n          const existing = await api.chapters.getById(chapter.id);\n          if (!existing) {\n            operations.push(api.chapters.create(chapter));\n          }\n        }\n      }\n    }\n\n    // 還原角色\n    if (options.includeCharacters && backupData.data.characters) {\n      const projectIds = options.selectedProjectIds || \n        backupData.data.projects.map(p => p.id);\n\n      const charactersToRestore = backupData.data.characters.filter(c => \n        projectIds.includes(c.projectId)\n      );\n\n      for (const character of charactersToRestore) {\n        if (options.overwriteExisting) {\n          operations.push(\n            api.characters.update(character).catch(() =>\n              api.characters.create(character)\n            )\n          );\n        } else {\n          const existing = await api.characters.getById(character.id);\n          if (!existing) {\n            operations.push(api.characters.create(character));\n          }\n        }\n      }\n    }\n\n    // 執行所有操作\n    await Promise.all(operations);\n  }\n\n  /**\n   * 獲取所有章節\n   */\n  private async getAllChapters(): Promise<Chapter[]> {\n    const projects = await api.projects.getAll();\n    const allChapters: Chapter[] = [];\n\n    for (const project of projects) {\n      const chapters = await api.chapters.getByProjectId(project.id);\n      allChapters.push(...chapters);\n    }\n\n    return allChapters;\n  }\n\n  /**\n   * 獲取所有角色\n   */\n  private async getAllCharacters(): Promise<Character[]> {\n    const projects = await api.projects.getAll();\n    const allCharacters: Character[] = [];\n\n    for (const project of projects) {\n      const characters = await api.characters.getByProjectId(project.id);\n      allCharacters.push(...characters);\n    }\n\n    return allCharacters;\n  }\n\n  /**\n   * 生成備份檔案名稱\n   */\n  private generateBackupFilename(projectName?: string): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const prefix = projectName ? `${projectName}-` : 'full-';\n    return `genesis-chronicle-${prefix}backup-${timestamp}${this.BACKUP_FILE_EXTENSION}`;\n  }\n\n  /**\n   * 下載備份檔案\n   */\n  private downloadBackupFile(content: string, filename: string): void {\n    const blob = new Blob([content], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    \n    const a = document.createElement('a');\n    a.href = url;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    \n    URL.revokeObjectURL(url);\n  }\n\n  /**\n   * 讀取檔案內容\n   */\n  private readFileContent(file: File): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => resolve(e.target?.result as string);\n      reader.onerror = () => reject(new Error('檔案讀取失敗'));\n      reader.readAsText(file);\n    });\n  }\n\n  /**\n   * 格式化檔案大小\n   */\n  formatFileSize(bytes: number): string {\n    if (bytes === 0) return '0 Bytes';\n    \n    const k = 1024;\n    const sizes = ['Bytes', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  }\n\n  /**\n   * 格式化時間\n   */\n  formatTimestamp(timestamp: Date): string {\n    return new Date(timestamp).toLocaleString('zh-TW', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    });\n  }\n}\n\n// 單例模式\nexport const BackupService = new BackupServiceClass();\n\nexport default BackupService;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/saveManager.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[315,318],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[315,318],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1117,1120],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1117,1120],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4586,4589],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4586,4589],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":199,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":199,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4834,4837],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4834,4837],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Chapter } from '../store/slices/chaptersSlice';\nimport { Character } from '../store/slices/charactersSlice';\nimport { Project } from '../store/slices/projectsSlice';\nimport api from '../api';\n\nexport interface SaveOperation {\n  id: string;\n  type: 'chapter' | 'character' | 'project' | 'settings';\n  data: any;\n  timestamp: Date;\n  status: 'pending' | 'saving' | 'saved' | 'error';\n  retryCount: number;\n  error?: string;\n}\n\nexport interface SaveManagerOptions {\n  maxRetries: number;\n  retryDelay: number;\n  batchSize: number;\n  enableBatching: boolean;\n}\n\nclass SaveManagerClass {\n  private operations: Map<string, SaveOperation> = new Map();\n  private saveQueue: string[] = [];\n  private isProcessing = false;\n  private options: SaveManagerOptions;\n  private listeners: Array<(operations: SaveOperation[]) => void> = [];\n\n  constructor(options: Partial<SaveManagerOptions> = {}) {\n    this.options = {\n      maxRetries: 3,\n      retryDelay: 1000,\n      batchSize: 5,\n      enableBatching: true,\n      ...options\n    };\n  }\n\n  /**\n   * 添加儲存操作到佇列\n   */\n  addSaveOperation(type: SaveOperation['type'], data: any): string {\n    const id = `${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    \n    const operation: SaveOperation = {\n      id,\n      type,\n      data,\n      timestamp: new Date(),\n      status: 'pending',\n      retryCount: 0\n    };\n\n    this.operations.set(id, operation);\n    this.saveQueue.push(id);\n    \n    this.notifyListeners();\n    this.processQueue();\n    \n    return id;\n  }\n\n  /**\n   * 處理儲存佇列\n   */\n  private async processQueue(): Promise<void> {\n    if (this.isProcessing || this.saveQueue.length === 0) {\n      return;\n    }\n\n    this.isProcessing = true;\n\n    try {\n      if (this.options.enableBatching) {\n        await this.processBatch();\n      } else {\n        await this.processSingle();\n      }\n    } catch (error) {\n      console.error('處理儲存佇列時發生錯誤:', error);\n    } finally {\n      this.isProcessing = false;\n      \n      // 如果還有待處理的操作，繼續處理\n      if (this.saveQueue.length > 0) {\n        setTimeout(() => this.processQueue(), 100);\n      }\n    }\n  }\n\n  /**\n   * 批次處理儲存操作\n   */\n  private async processBatch(): Promise<void> {\n    const batchIds = this.saveQueue.splice(0, this.options.batchSize);\n    const batch = batchIds.map(id => this.operations.get(id)!).filter(Boolean);\n\n    // 按類型分組\n    const groupedOperations = batch.reduce((groups, op) => {\n      if (!groups[op.type]) {\n        groups[op.type] = [];\n      }\n      groups[op.type].push(op);\n      return groups;\n    }, {} as Record<string, SaveOperation[]>);\n\n    // 並行處理不同類型的操作\n    const promises = Object.entries(groupedOperations).map(([type, operations]) =>\n      this.processByType(type as SaveOperation['type'], operations)\n    );\n\n    await Promise.allSettled(promises);\n  }\n\n  /**\n   * 單個處理儲存操作\n   */\n  private async processSingle(): Promise<void> {\n    const operationId = this.saveQueue.shift();\n    if (!operationId) return;\n\n    const operation = this.operations.get(operationId);\n    if (!operation) return;\n\n    await this.processByType(operation.type, [operation]);\n  }\n\n  /**\n   * 按類型處理儲存操作\n   */\n  private async processByType(type: SaveOperation['type'], operations: SaveOperation[]): Promise<void> {\n    for (const operation of operations) {\n      try {\n        this.updateOperationStatus(operation.id, 'saving');\n        \n        switch (type) {\n          case 'chapter':\n            await this.saveChapter(operation.data as Chapter);\n            break;\n          case 'character':\n            await this.saveCharacter(operation.data as Character);\n            break;\n          case 'project':\n            await this.saveProject(operation.data as Project);\n            break;\n          case 'settings':\n            await this.saveSettings(operation.data);\n            break;\n          default:\n            throw new Error(`未知的儲存類型: ${type}`);\n        }\n\n        this.updateOperationStatus(operation.id, 'saved');\n        \n      } catch (error) {\n        await this.handleSaveError(operation, error);\n      }\n    }\n  }\n\n  /**\n   * 儲存章節\n   */\n  private async saveChapter(chapter: Chapter): Promise<void> {\n    await api.chapters.update({\n      ...chapter,\n      content: JSON.stringify(chapter.content)\n    });\n  }\n\n  /**\n   * 儲存角色\n   */\n  private async saveCharacter(character: Character): Promise<void> {\n    await api.characters.update(character);\n  }\n\n  /**\n   * 儲存專案\n   */\n  private async saveProject(project: Project): Promise<void> {\n    await api.projects.update(project);\n  }\n\n  /**\n   * 儲存設定\n   */\n  private async saveSettings(settings: any): Promise<void> {\n    // 將設定物件轉換為多個 set 操作\n    for (const [key, value] of Object.entries(settings)) {\n      await api.settings.set(key, value);\n    }\n  }\n\n  /**\n   * 處理儲存錯誤\n   */\n  private async handleSaveError(operation: SaveOperation, error: any): Promise<void> {\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    \n    operation.retryCount += 1;\n    operation.error = errorMessage;\n\n    if (operation.retryCount < this.options.maxRetries) {\n      // 重試\n      operation.status = 'pending';\n      this.saveQueue.push(operation.id);\n      \n      // 延遲重試\n      await new Promise(resolve => \n        setTimeout(resolve, this.options.retryDelay * operation.retryCount)\n      );\n    } else {\n      // 達到最大重試次數，標記為錯誤\n      this.updateOperationStatus(operation.id, 'error', errorMessage);\n    }\n  }\n\n  /**\n   * 更新操作狀態\n   */\n  private updateOperationStatus(\n    id: string, \n    status: SaveOperation['status'], \n    error?: string\n  ): void {\n    const operation = this.operations.get(id);\n    if (operation) {\n      operation.status = status;\n      if (error) {\n        operation.error = error;\n      }\n      this.notifyListeners();\n    }\n  }\n\n  /**\n   * 獲取所有操作\n   */\n  getOperations(): SaveOperation[] {\n    return Array.from(this.operations.values());\n  }\n\n  /**\n   * 獲取待處理的操作\n   */\n  getPendingOperations(): SaveOperation[] {\n    return this.getOperations().filter(op => \n      op.status === 'pending' || op.status === 'saving'\n    );\n  }\n\n  /**\n   * 獲取失敗的操作\n   */\n  getFailedOperations(): SaveOperation[] {\n    return this.getOperations().filter(op => op.status === 'error');\n  }\n\n  /**\n   * 重試失敗的操作\n   */\n  retryFailedOperations(): void {\n    const failedOperations = this.getFailedOperations();\n    \n    failedOperations.forEach(operation => {\n      operation.status = 'pending';\n      operation.retryCount = 0;\n      operation.error = undefined;\n      this.saveQueue.push(operation.id);\n    });\n\n    this.notifyListeners();\n    this.processQueue();\n  }\n\n  /**\n   * 清除已完成的操作\n   */\n  clearCompletedOperations(): void {\n    const completedIds: string[] = [];\n    \n    this.operations.forEach((operation, id) => {\n      if (operation.status === 'saved') {\n        completedIds.push(id);\n      }\n    });\n\n    completedIds.forEach(id => this.operations.delete(id));\n    this.notifyListeners();\n  }\n\n  /**\n   * 強制儲存所有待處理的操作\n   */\n  async forceSaveAll(): Promise<void> {\n    const pendingOperations = this.getPendingOperations();\n    \n    for (const operation of pendingOperations) {\n      try {\n        await this.processByType(operation.type, [operation]);\n      } catch (error) {\n        console.error(`強制儲存操作 ${operation.id} 失敗:`, error);\n      }\n    }\n  }\n\n  /**\n   * 添加狀態監聽器\n   */\n  addListener(callback: (operations: SaveOperation[]) => void): void {\n    this.listeners.push(callback);\n  }\n\n  /**\n   * 移除狀態監聽器\n   */\n  removeListener(callback: (operations: SaveOperation[]) => void): void {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * 通知所有監聽器\n   */\n  private notifyListeners(): void {\n    const operations = this.getOperations();\n    this.listeners.forEach(callback => {\n      try {\n        callback(operations);\n      } catch (error) {\n        console.error('儲存管理器監聽器執行失敗:', error);\n      }\n    });\n  }\n\n  /**\n   * 獲取儲存統計\n   */\n  getStatistics() {\n    const operations = this.getOperations();\n    \n    return {\n      total: operations.length,\n      pending: operations.filter(op => op.status === 'pending').length,\n      saving: operations.filter(op => op.status === 'saving').length,\n      saved: operations.filter(op => op.status === 'saved').length,\n      error: operations.filter(op => op.status === 'error').length,\n      queueLength: this.saveQueue.length,\n      isProcessing: this.isProcessing\n    };\n  }\n}\n\n// 單例模式\nexport const SaveManager = new SaveManagerClass();\n\n// 導出類型和實例\nexport default SaveManager;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/settingsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":144,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":144,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3672,3675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3672,3675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4442,4445],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4442,4445],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":89,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":92,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4665,4668],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4665,4668],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":228,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":228,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6123,6126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6123,6126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { AppSettings, DEFAULT_SETTINGS } from '../store/slices/settingsSlice';\nimport { api } from '../api';\n\nconst SETTINGS_KEY = 'genesis-chronicle-settings';\n\nexport class SettingsService {\n  /**\n   * 載入設定\n   */\n  static async loadSettings(): Promise<AppSettings> {\n    try {\n      // 首先嘗試從後端 API 載入（統一設定來源）\n      try {\n        const backendSettings = await api.settings.getAll();\n        if (backendSettings && Object.keys(backendSettings).length > 0) {\n          console.log('從後端載入設定:', backendSettings);\n          const mergedSettings = this.mergeWithDefaults(backendSettings);\n          \n          // 同時更新 localStorage 作為快取\n          localStorage.setItem(SETTINGS_KEY, JSON.stringify(mergedSettings));\n          \n          return mergedSettings;\n        }\n      } catch (error) {\n        console.warn('從後端載入設定失敗，回退到 localStorage:', error);\n      }\n\n      // 回退到 localStorage\n      const stored = localStorage.getItem(SETTINGS_KEY);\n      if (stored) {\n        const parsed = JSON.parse(stored);\n        // 合併預設設定以確保新增的設定項目有預設值\n        const mergedSettings = this.mergeWithDefaults(parsed);\n        \n        // 嘗試將 localStorage 設定同步到後端\n        try {\n          for (const [key, value] of Object.entries(mergedSettings)) {\n            await api.settings.set(key, value);\n          }\n          console.log('成功將 localStorage 設定同步到後端');\n        } catch (error) {\n          console.warn('同步設定到後端失敗:', error);\n        }\n        \n        return mergedSettings;\n      }\n      \n      // 如果都沒有設定，初始化預設設定到後端\n      try {\n        for (const [key, value] of Object.entries(DEFAULT_SETTINGS)) {\n          await api.settings.set(key, value);\n        }\n        console.log('初始化預設設定到後端');\n      } catch (error) {\n        console.warn('初始化預設設定到後端失敗:', error);\n      }\n      \n      return DEFAULT_SETTINGS;\n    } catch (error) {\n      console.error('載入設定失敗:', error);\n      return DEFAULT_SETTINGS;\n    }\n  }\n  \n  /**\n   * 儲存設定\n   */\n  static async saveSettings(settings: AppSettings): Promise<void> {\n    try {\n      localStorage.setItem(SETTINGS_KEY, JSON.stringify(settings));\n      \n      // 儲存設定變更歷史\n      this.saveSettingsHistory(settings);\n      \n      // 同時通知主程序更新設定\n      try {\n        // 將設定逐一儲存到統一的設定系統\n        // 對於複雜物件，需要序列化儲存\n        for (const [key, value] of Object.entries(settings)) {\n          await api.settings.set(key, value);\n        }\n      } catch (error) {\n        console.warn('同步設定到後端失敗:', error);\n      }\n      \n      // 通知監聽器\n      SettingsWatcher.notifyListeners(settings);\n    } catch (error) {\n      console.error('儲存設定失敗:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 重置設定\n   */\n  static async resetSettings(): Promise<void> {\n    try {\n      localStorage.removeItem(SETTINGS_KEY);\n      \n      // 通知主程序重置設定\n      try {\n        await api.settings.reset();\n      } catch (error) {\n        console.warn('重置後端設定失敗:', error);\n      }\n    } catch (error) {\n      console.error('重置設定失敗:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 匯出設定\n   */\n  static async exportSettings(): Promise<string> {\n    try {\n      const settings = await this.loadSettings();\n      return JSON.stringify(settings, null, 2);\n    } catch (error) {\n      console.error('匯出設定失敗:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 匯入設定\n   */\n  static async importSettings(settingsJson: string): Promise<AppSettings> {\n    try {\n      const settings = JSON.parse(settingsJson);\n      const mergedSettings = this.mergeWithDefaults(settings);\n      await this.saveSettings(mergedSettings);\n      return mergedSettings;\n    } catch (error) {\n      console.error('匯入設定失敗:', error);\n      throw error;\n    }\n  }\n  \n  /**\n   * 驗證設定格式\n   */\n  static validateSettings(settings: any): boolean {\n    try {\n      // 基本結構檢查\n      if (!settings || typeof settings !== 'object') {\n        return false;\n      }\n      \n      // 檢查必要的頂層屬性\n      const requiredKeys = ['language', 'autoSave', 'ai', 'editor', 'ui', 'backup', 'privacy', 'shortcuts'];\n      for (const key of requiredKeys) {\n        if (!(key in settings)) {\n          return false;\n        }\n      }\n      \n      // 檢查 AI 設定\n      if (!settings.ai || typeof settings.ai !== 'object') {\n        return false;\n      }\n      \n      // 檢查編輯器設定\n      if (!settings.editor || typeof settings.editor !== 'object') {\n        return false;\n      }\n      \n      return true;\n    } catch (_error) {\n      return false;\n    }\n  }\n  \n  /**\n   * 合併設定與預設值\n   */\n  private static mergeWithDefaults(settings: any): AppSettings {\n    const merged = { ...DEFAULT_SETTINGS };\n    \n    if (settings && typeof settings === 'object') {\n      // 一般設定\n      if (typeof settings.language === 'string') merged.language = settings.language as any;\n      if (typeof settings.autoSave === 'boolean') merged.autoSave = settings.autoSave;\n      if (typeof settings.autoSaveInterval === 'number') merged.autoSaveInterval = settings.autoSaveInterval;\n      \n      // AI 設定\n      if (settings.ai && typeof settings.ai === 'object') {\n        merged.ai = { ...merged.ai, ...settings.ai };\n      }\n      \n      // 編輯器設定\n      if (settings.editor && typeof settings.editor === 'object') {\n        merged.editor = { ...merged.editor, ...settings.editor };\n      }\n      \n      // UI 設定\n      if (settings.ui && typeof settings.ui === 'object') {\n        merged.ui = { ...merged.ui, ...settings.ui };\n      }\n      \n      // 備份設定\n      if (settings.backup && typeof settings.backup === 'object') {\n        merged.backup = { ...merged.backup, ...settings.backup };\n      }\n      \n      // 隱私設定\n      if (settings.privacy && typeof settings.privacy === 'object') {\n        merged.privacy = { ...merged.privacy, ...settings.privacy };\n      }\n      \n      // 快捷鍵設定\n      if (settings.shortcuts && typeof settings.shortcuts === 'object') {\n        merged.shortcuts = { ...merged.shortcuts, ...settings.shortcuts };\n      }\n    }\n    \n    return merged;\n  }\n  \n  /**\n   * 獲取設定變更歷史\n   */\n  static getSettingsHistory(): Array<{ timestamp: Date; settings: AppSettings }> {\n    try {\n      const history = localStorage.getItem(`${SETTINGS_KEY}-history`);\n      if (history) {\n        return JSON.parse(history).map((item: any) => ({\n          ...item,\n          timestamp: new Date(item.timestamp)\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('獲取設定歷史失敗:', error);\n      return [];\n    }\n  }\n  \n  /**\n   * 儲存設定變更歷史\n   */\n  static saveSettingsHistory(settings: AppSettings): void {\n    try {\n      const history = this.getSettingsHistory();\n      history.unshift({\n        timestamp: new Date(),\n        settings: { ...settings }\n      });\n      \n      // 只保留最近 10 次變更\n      const trimmedHistory = history.slice(0, 10);\n      \n      localStorage.setItem(`${SETTINGS_KEY}-history`, JSON.stringify(trimmedHistory));\n    } catch (error) {\n      console.error('儲存設定歷史失敗:', error);\n    }\n  }\n}\n\n// 設定變更監聽器\nexport class SettingsWatcher {\n  private static listeners: Array<(settings: AppSettings) => void> = [];\n  \n  static addListener(callback: (settings: AppSettings) => void): void {\n    this.listeners.push(callback);\n  }\n  \n  static removeListener(callback: (settings: AppSettings) => void): void {\n    const index = this.listeners.indexOf(callback);\n    if (index > -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n  \n  static notifyListeners(settings: AppSettings): void {\n    this.listeners.forEach(callback => {\n      try {\n        callback(settings);\n      } catch (error) {\n        console.error('設定監聽器執行失敗:', error);\n      }\n    });\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/statisticsService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/templateCharacterService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/services/templateService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":298,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":298,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7319,7322],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7319,7322],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":389,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":389,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10188,10191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10188,10191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 模板管理服務\nimport { NovelTemplate, TemplateType, TemplateApplicationResult, TemplateValidationError } from '../types/template';\nimport { defaultTemplates } from '../data/defaultTemplates';\nimport { api } from '../api';\n\nexport class TemplateService {\n  private templates: Map<string, NovelTemplate> = new Map();\n\n  constructor() {\n    this.initializeDefaultTemplates();\n  }\n\n  /**\n   * 初始化預設模板\n   */\n  private initializeDefaultTemplates(): void {\n    defaultTemplates.forEach(template => {\n      this.templates.set(template.id, template);\n    });\n  }\n\n  /**\n   * 獲取所有模板\n   */\n  getAllTemplates(): NovelTemplate[] {\n    return Array.from(this.templates.values());\n  }\n\n  /**\n   * 根據類型獲取模板\n   */\n  getTemplatesByType(type: TemplateType): NovelTemplate[] {\n    return this.getAllTemplates().filter(template => template.type === type);\n  }\n\n  /**\n   * 根據 ID 獲取模板\n   */\n  getTemplateById(id: string): NovelTemplate | null {\n    return this.templates.get(id) || null;\n  }\n\n  /**\n   * 獲取預設模板\n   */\n  getDefaultTemplates(): NovelTemplate[] {\n    return this.getAllTemplates().filter(template => !template.isCustom);\n  }\n\n  /**\n   * 獲取自定義模板\n   */\n  getCustomTemplates(): NovelTemplate[] {\n    return this.getAllTemplates().filter(template => template.isCustom);\n  }\n\n  /**\n   * 獲取啟用的模板\n   */\n  getActiveTemplates(): NovelTemplate[] {\n    return this.getAllTemplates().filter(template => template.isActive !== false);\n  }\n\n  /**\n   * 驗證模板資料\n   */\n  validateTemplate(template: Partial<NovelTemplate>): TemplateValidationError[] {\n    const errors: TemplateValidationError[] = [];\n\n    // 基本欄位驗證\n    if (!template.name || template.name.trim().length === 0) {\n      errors.push({\n        field: 'name',\n        message: '模板名稱不能為空',\n        severity: 'error'\n      });\n    }\n\n    if (!template.type) {\n      errors.push({\n        field: 'type',\n        message: '必須選擇模板類型',\n        severity: 'error'\n      });\n    }\n\n    if (!template.description || template.description.trim().length === 0) {\n      errors.push({\n        field: 'description',\n        message: '模板描述不能為空',\n        severity: 'error'\n      });\n    }\n\n    // 世界觀設定驗證\n    if (!template.worldSetting) {\n      errors.push({\n        field: 'worldSetting',\n        message: '世界觀設定不能為空',\n        severity: 'error'\n      });\n    } else {\n      if (!template.worldSetting.era) {\n        errors.push({\n          field: 'worldSetting.era',\n          message: '時代背景不能為空',\n          severity: 'error'\n        });\n      }\n\n      if (!template.worldSetting.technology) {\n        errors.push({\n          field: 'worldSetting.technology',\n          message: '科技水平不能為空',\n          severity: 'error'\n        });\n      }\n\n      if (!template.worldSetting.society) {\n        errors.push({\n          field: 'worldSetting.society',\n          message: '社會結構不能為空',\n          severity: 'error'\n        });\n      }\n\n      if (!template.worldSetting.specialElements || template.worldSetting.specialElements.length === 0) {\n        errors.push({\n          field: 'worldSetting.specialElements',\n          message: '特殊元素至少需要一個',\n          severity: 'warning'\n        });\n      }\n    }\n\n    // 角色原型驗證\n    if (!template.characterArchetypes || template.characterArchetypes.length === 0) {\n      errors.push({\n        field: 'characterArchetypes',\n        message: '至少需要一個角色原型',\n        severity: 'warning'\n      });\n    } else {\n      template.characterArchetypes.forEach((archetype, index) => {\n        if (!archetype.name) {\n          errors.push({\n            field: `characterArchetypes[${index}].name`,\n            message: `角色原型 ${index + 1} 的名稱不能為空`,\n            severity: 'error'\n          });\n        }\n\n        if (!archetype.personality) {\n          errors.push({\n            field: `characterArchetypes[${index}].personality`,\n            message: `角色原型 ${index + 1} 的性格描述不能為空`,\n            severity: 'error'\n          });\n        }\n      });\n    }\n\n    // 劇情框架驗證\n    if (!template.plotFramework || template.plotFramework.length === 0) {\n      errors.push({\n        field: 'plotFramework',\n        message: '至少需要一個劇情階段',\n        severity: 'warning'\n      });\n    }\n\n    // 寫作指導驗證\n    if (!template.writingGuidelines) {\n      errors.push({\n        field: 'writingGuidelines',\n        message: '寫作指導不能為空',\n        severity: 'warning'\n      });\n    }\n\n    return errors;\n  }\n\n  /**\n   * 創建自定義模板\n   */\n  createCustomTemplate(templateData: Omit<NovelTemplate, 'id' | 'createdAt' | 'updatedAt'>): string {\n    const errors = this.validateTemplate(templateData);\n    const criticalErrors = errors.filter(error => error.severity === 'error');\n    \n    if (criticalErrors.length > 0) {\n      throw new Error(`模板驗證失敗: ${criticalErrors.map(e => e.message).join(', ')}`);\n    }\n\n    const templateId = `custom-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\n    const template: NovelTemplate = {\n      ...templateData,\n      id: templateId,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      isCustom: true,\n      isActive: true\n    };\n\n    this.templates.set(templateId, template);\n    return templateId;\n  }\n\n  /**\n   * 更新模板\n   */\n  updateTemplate(id: string, updates: Partial<NovelTemplate>): boolean {\n    const existingTemplate = this.templates.get(id);\n    if (!existingTemplate) {\n      return false;\n    }\n\n    // 不允許修改預設模板的核心屬性\n    if (!existingTemplate.isCustom) {\n      const allowedUpdates = ['isActive', 'customSettings'];\n      const updateKeys = Object.keys(updates);\n      const invalidUpdates = updateKeys.filter(key => !allowedUpdates.includes(key));\n      \n      if (invalidUpdates.length > 0) {\n        throw new Error(`不能修改預設模板的以下屬性: ${invalidUpdates.join(', ')}`);\n      }\n    }\n\n    const updatedTemplate = {\n      ...existingTemplate,\n      ...updates,\n      updatedAt: new Date()\n    };\n\n    const errors = this.validateTemplate(updatedTemplate);\n    const criticalErrors = errors.filter(error => error.severity === 'error');\n    \n    if (criticalErrors.length > 0) {\n      throw new Error(`模板驗證失敗: ${criticalErrors.map(e => e.message).join(', ')}`);\n    }\n\n    this.templates.set(id, updatedTemplate);\n    return true;\n  }\n\n  /**\n   * 刪除自定義模板\n   */\n  deleteTemplate(id: string): boolean {\n    const template = this.templates.get(id);\n    if (!template) {\n      return false;\n    }\n\n    if (!template.isCustom) {\n      throw new Error('不能刪除預設模板');\n    }\n\n    return this.templates.delete(id);\n  }\n\n  /**\n   * 複製模板\n   */\n  cloneTemplate(id: string, newName?: string): string {\n    const originalTemplate = this.templates.get(id);\n    if (!originalTemplate) {\n      throw new Error('找不到要複製的模板');\n    }\n\n    const { id: _originalId, createdAt: _createdAt, updatedAt: _updatedAt, ...clonedTemplate } = {\n      ...originalTemplate,\n      name: newName || `${originalTemplate.name} (副本)`,\n      isCustom: true\n    };\n\n    return this.createCustomTemplate(clonedTemplate);\n  }\n\n  /**\n   * 應用模板到專案\n   */\n  async applyTemplateToProject(\n    templateId: string, \n    projectId: string,\n    options?: {\n      createCharacters?: boolean;\n      selectedArchetypes?: string[];\n      updateProjectSettings?: boolean;\n    }\n  ): Promise<TemplateApplicationResult> {\n    const template = this.templates.get(templateId);\n    if (!template) {\n      return {\n        success: false,\n        message: '找不到指定的模板',\n        appliedSettings: {\n          worldSetting: {} as any,\n          createdCharacters: [],\n          projectSettings: {}\n        }\n      };\n    }\n\n    try {\n      const results: TemplateApplicationResult = {\n        success: true,\n        message: `成功應用模板「${template.name}」`,\n        appliedSettings: {\n          worldSetting: template.worldSetting,\n          createdCharacters: [],\n          projectSettings: {}\n        }\n      };\n\n      // 1. 更新專案設定\n      if (options?.updateProjectSettings !== false) {\n        const projectSettings = {\n          templateId: template.id,\n          templateType: template.type,\n          templateName: template.name,\n          worldSetting: template.worldSetting,\n          writingGuidelines: template.writingGuidelines,\n          aiPromptTemplate: template.aiPromptTemplate,\n          appliedAt: new Date().toISOString()\n        };\n\n        try {\n          // 更新專案設定\n          await api.projects.update({\n            id: projectId,\n            settings: {\n              ...projectSettings,\n              template: template\n            }\n          });\n\n          results.appliedSettings.projectSettings = projectSettings;\n        } catch (error) {\n          console.error('更新專案設定失敗:', error);\n          results.errors = results.errors || [];\n          results.errors.push('更新專案設定失敗');\n        }\n      }\n\n      // 2. 創建角色（如果需要）\n      if (options?.createCharacters !== false) {\n        try {\n          const { templateCharacterService } = await import('./templateCharacterService');\n          const characterResult = await templateCharacterService.createCharactersFromTemplate(\n            template,\n            projectId,\n            options?.selectedArchetypes\n          );\n\n          if (characterResult.success) {\n            results.appliedSettings.createdCharacters = characterResult.createdCharacters.map(c => c.id);\n            \n            // 建立角色關係\n            if (characterResult.createdCharacters.length > 1) {\n              await templateCharacterService.establishCharacterRelationships(\n                characterResult.createdCharacters,\n                template\n              );\n            }\n          } else {\n            results.errors = results.errors || [];\n            results.errors.push(...characterResult.errors);\n          }\n        } catch (error) {\n          console.error('創建角色失敗:', error);\n          results.errors = results.errors || [];\n          results.errors.push(`創建角色失敗: ${error instanceof Error ? error.message : '未知錯誤'}`);\n        }\n      }\n\n      // 3. 檢查是否有錯誤\n      if (results.errors && results.errors.length > 0) {\n        results.success = false;\n        results.message = `模板應用部分成功，但有 ${results.errors.length} 個錯誤`;\n      }\n\n      return results;\n    } catch (error) {\n      return {\n        success: false,\n        message: `應用模板失敗: ${error instanceof Error ? error.message : '未知錯誤'}`,\n        appliedSettings: {\n          worldSetting: {} as any,\n          createdCharacters: [],\n          projectSettings: {}\n        },\n        errors: [error instanceof Error ? error.message : '未知錯誤']\n      };\n    }\n  }\n\n  /**\n   * 搜索模板\n   */\n  searchTemplates(query: string): NovelTemplate[] {\n    if (!query.trim()) {\n      return this.getAllTemplates();\n    }\n\n    const searchTerm = query.toLowerCase();\n    return this.getAllTemplates().filter(template =>\n      template.name.toLowerCase().includes(searchTerm) ||\n      template.description.toLowerCase().includes(searchTerm) ||\n      template.worldSetting.era.toLowerCase().includes(searchTerm) ||\n      template.worldSetting.specialElements.some(element => \n        element.toLowerCase().includes(searchTerm)\n      )\n    );\n  }\n\n  /**\n   * 獲取模板統計資訊\n   */\n  getTemplateStats() {\n    const allTemplates = this.getAllTemplates();\n    const stats = {\n      total: allTemplates.length,\n      byType: {} as Record<TemplateType, number>,\n      custom: this.getCustomTemplates().length,\n      active: this.getActiveTemplates().length\n    };\n\n    // 統計各類型模板數量\n    allTemplates.forEach(template => {\n      stats.byType[template.type] = (stats.byType[template.type] || 0) + 1;\n    });\n\n    return stats;\n  }\n\n  /**\n   * 導出模板\n   */\n  exportTemplate(id: string): string {\n    const template = this.templates.get(id);\n    if (!template) {\n      throw new Error('找不到要導出的模板');\n    }\n\n    return JSON.stringify(template, null, 2);\n  }\n\n  /**\n   * 導入模板\n   */\n  importTemplate(templateJson: string): string {\n    try {\n      const templateData = JSON.parse(templateJson) as NovelTemplate;\n      \n      // 移除 ID 和時間戳，讓系統重新生成\n      const { id: _id, createdAt: _createdAt, updatedAt: _updatedAt, ...importData } = templateData;\n      \n      return this.createCustomTemplate(importData);\n    } catch (error) {\n      throw new Error(`導入模板失敗: ${error instanceof Error ? error.message : '無效的 JSON 格式'}`);\n    }\n  }\n}\n\n// 創建單例實例\nexport const templateService = new TemplateService();","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/aiHistorySlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[300,303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[300,303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { api } from '../../api';\n\n// AI 歷史記錄類型定義\nexport interface AIGenerationHistory {\n  id: string;\n  projectId: string;\n  chapterId: string;\n  model: string;\n  prompt: string;\n  generatedText: string;\n  parameters?: any;\n  languagePurity?: number;\n  tokenCount?: number;\n  generationTimeMs?: number;\n  selected: boolean;\n  position?: number;\n  createdAt: Date;\n}\n\n// AI 歷史記錄狀態\nexport interface AIHistoryState {\n  histories: AIGenerationHistory[];\n  currentProjectHistories: AIGenerationHistory[];\n  selectedHistory: AIGenerationHistory | null;\n  isLoading: boolean;\n  error: string | null;\n  totalCount: number;\n  pagination: {\n    page: number;\n    pageSize: number;\n  };\n}\n\n// 初始狀態\nconst initialState: AIHistoryState = {\n  histories: [],\n  currentProjectHistories: [],\n  selectedHistory: null,\n  isLoading: false,\n  error: null,\n  totalCount: 0,\n  pagination: {\n    page: 1,\n    pageSize: 20,\n  },\n};\n\n// 異步 thunks\nexport const createAIHistory = createAsyncThunk(\n  'aiHistory/create',\n  async (history: Omit<AIGenerationHistory, 'id' | 'createdAt' | 'selected'>) => {\n    const result = await api.aiHistory.create(history);\n    return result;\n  }\n);\n\nexport const queryAIHistory = createAsyncThunk(\n  'aiHistory/query',\n  async (params: {\n    projectId?: string;\n    chapterId?: string;\n    selectedOnly?: boolean;\n    limit?: number;\n    offset?: number;\n  }) => {\n    const results = await api.aiHistory.query(params);\n    return results;\n  }\n);\n\nexport const markHistorySelected = createAsyncThunk(\n  'aiHistory/markSelected',\n  async ({ historyId, projectId }: { historyId: string; projectId: string }) => {\n    await api.aiHistory.markSelected(historyId, projectId);\n    return { historyId, projectId };\n  }\n);\n\nexport const deleteAIHistory = createAsyncThunk(\n  'aiHistory/delete',\n  async (historyId: string) => {\n    await api.aiHistory.delete(historyId);\n    return historyId;\n  }\n);\n\nexport const cleanupAIHistory = createAsyncThunk(\n  'aiHistory/cleanup',\n  async ({ projectId, keepCount }: { projectId: string; keepCount: number }) => {\n    const deletedCount = await api.aiHistory.cleanup(projectId, keepCount);\n    return { projectId, deletedCount };\n  }\n);\n\n// Slice\nconst aiHistorySlice = createSlice({\n  name: 'aiHistory',\n  initialState,\n  reducers: {\n    setCurrentProjectHistories: (state, action: PayloadAction<AIGenerationHistory[]>) => {\n      state.currentProjectHistories = action.payload;\n    },\n    setSelectedHistory: (state, action: PayloadAction<AIGenerationHistory | null>) => {\n      state.selectedHistory = action.payload;\n    },\n    setPagination: (state, action: PayloadAction<{ page?: number; pageSize?: number }>) => {\n      if (action.payload.page !== undefined) {\n        state.pagination.page = action.payload.page;\n      }\n      if (action.payload.pageSize !== undefined) {\n        state.pagination.pageSize = action.payload.pageSize;\n      }\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    // 創建歷史記錄\n    builder\n      .addCase(createAIHistory.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(createAIHistory.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.histories.unshift(action.payload);\n        if (action.payload.projectId === state.currentProjectHistories[0]?.projectId) {\n          state.currentProjectHistories.unshift(action.payload);\n        }\n      })\n      .addCase(createAIHistory.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || '創建 AI 歷史記錄失敗';\n      });\n\n    // 查詢歷史記錄\n    builder\n      .addCase(queryAIHistory.pending, (state) => {\n        state.isLoading = true;\n        state.error = null;\n      })\n      .addCase(queryAIHistory.fulfilled, (state, action) => {\n        state.isLoading = false;\n        state.histories = action.payload;\n        state.totalCount = action.payload.length;\n      })\n      .addCase(queryAIHistory.rejected, (state, action) => {\n        state.isLoading = false;\n        state.error = action.error.message || '查詢 AI 歷史記錄失敗';\n      });\n\n    // 標記選擇\n    builder\n      .addCase(markHistorySelected.pending, (state) => {\n        state.error = null;\n      })\n      .addCase(markHistorySelected.fulfilled, (state, action) => {\n        const { historyId, projectId } = action.payload;\n        // 更新所有該專案的歷史記錄\n        state.histories.forEach((history) => {\n          if (history.projectId === projectId) {\n            history.selected = history.id === historyId;\n          }\n        });\n        state.currentProjectHistories.forEach((history) => {\n          if (history.projectId === projectId) {\n            history.selected = history.id === historyId;\n          }\n        });\n        // 更新選中的歷史記錄\n        const selected = state.histories.find((h) => h.id === historyId);\n        if (selected) {\n          state.selectedHistory = selected;\n        }\n      })\n      .addCase(markHistorySelected.rejected, (state, action) => {\n        state.error = action.error.message || '標記歷史記錄失敗';\n      });\n\n    // 刪除歷史記錄\n    builder\n      .addCase(deleteAIHistory.pending, (state) => {\n        state.error = null;\n      })\n      .addCase(deleteAIHistory.fulfilled, (state, action) => {\n        const historyId = action.payload;\n        state.histories = state.histories.filter((h) => h.id !== historyId);\n        state.currentProjectHistories = state.currentProjectHistories.filter(\n          (h) => h.id !== historyId\n        );\n        if (state.selectedHistory?.id === historyId) {\n          state.selectedHistory = null;\n        }\n      })\n      .addCase(deleteAIHistory.rejected, (state, action) => {\n        state.error = action.error.message || '刪除歷史記錄失敗';\n      });\n\n    // 清理歷史記錄\n    builder\n      .addCase(cleanupAIHistory.pending, (state) => {\n        state.error = null;\n      })\n      .addCase(cleanupAIHistory.fulfilled, (state, _action) => {\n        // 清理完成後，可能需要重新查詢\n        state.error = null;\n      })\n      .addCase(cleanupAIHistory.rejected, (state, action) => {\n        state.error = action.error.message || '清理歷史記錄失敗';\n      });\n  },\n});\n\n// 導出 actions 和 reducer\nexport const {\n  setCurrentProjectHistories,\n  setSelectedHistory,\n  setPagination,\n  clearError,\n} = aiHistorySlice.actions;\n\nexport default aiHistorySlice.reducer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/aiSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7362,7365],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7362,7365],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { api } from '../../api';\n\ninterface AIState {\n  isOllamaConnected: boolean;\n  serviceStatus: {\n    service: {\n      available: boolean;\n      version?: string;\n      error?: string;\n    };\n    models: {\n      count: number;\n      list: string[];\n    };\n    lastChecked?: Date;\n  } | null;\n  availableModels: string[];\n  modelsInfo: {\n    success: boolean;\n    models: Array<{\n      name: string;\n      size: number;\n      modified_at: string;\n    }>;\n    error?: string;\n  } | null;\n  currentModel: string | null;\n  generating: boolean;\n  error: string | null;\n  generationHistory: GenerationResult[];\n}\n\ninterface GenerationResult {\n  id: string;\n  prompt: string;\n  result: string;\n  model: string;\n  timestamp: Date;\n  params: AIParameters;\n}\n\ninterface AIParameters {\n  temperature: number;\n  topP: number;\n  maxTokens: number;\n}\n\nconst initialState: AIState = {\n  isOllamaConnected: false,\n  serviceStatus: null,\n  availableModels: [],\n  modelsInfo: null,\n  currentModel: null,\n  generating: false,\n  error: null,\n  generationHistory: [],\n};\n\n// 異步 thunks\nexport const checkOllamaService = createAsyncThunk(\n  'ai/checkOllamaService',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('Redux: 檢查 Ollama 服務...');\n      console.log('Redux: API 對象:', api);\n      console.log('Redux: AI API:', api.ai);\n      \n      const isConnected = await api.ai.checkOllamaService();\n      console.log('Redux: Ollama 服務結果:', isConnected);\n      return isConnected;\n    } catch (error) {\n      console.error('Redux: 檢查 Ollama 服務失敗:', error);\n      console.error('Redux: 錯誤詳情:', {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      return rejectWithValue(false);\n    }\n  }\n);\n\n// 延遲初始化 AI 服務（背景執行，不阻塞 UI）\nexport const initializeAIServiceLazy = createAsyncThunk(\n  'ai/initializeAIServiceLazy',\n  async (_, { dispatch }) => {\n    try {\n      console.log('Redux: 開始延遲 AI 服務初始化...');\n      \n      // 先快速檢查 Ollama 服務\n      const isConnected = await dispatch(checkOllamaService()).unwrap();\n      \n      if (isConnected) {\n        // 如果連接成功，背景載入模型列表\n        console.log('Redux: Ollama 已連接，載入模型列表...');\n        await dispatch(fetchModelsInfo());\n      }\n      \n      return isConnected;\n    } catch (error) {\n      console.warn('Redux: 延遲 AI 初始化失敗:', error);\n      // 不返回錯誤，允許應用程式繼續運行\n      return false;\n    }\n  }\n);\n\nexport const fetchServiceStatus = createAsyncThunk(\n  'ai/fetchServiceStatus',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('Redux: 獲取服務狀態...');\n      const status = await api.ai.getServiceStatus();\n      console.log('Redux: 服務狀態結果:', status);\n      return status;\n    } catch (error) {\n      console.error('Redux: 獲取服務狀態失敗:', error);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const fetchAvailableModels = createAsyncThunk(\n  'ai/fetchAvailableModels',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('Redux: 獲取可用模型...');\n      const models = await api.ai.listModels();\n      console.log('Redux: 可用模型結果:', models);\n      return models;\n    } catch (error) {\n      console.error('Redux: 獲取可用模型失敗:', error);\n      return rejectWithValue([]);\n    }\n  }\n);\n\nexport const fetchModelsInfo = createAsyncThunk(\n  'ai/fetchModelsInfo',\n  async (_, { rejectWithValue }) => {\n    try {\n      console.log('Redux: 獲取模型詳細資訊...');\n      const modelsInfo = await api.ai.getModelsInfo();\n      console.log('Redux: 模型詳細資訊結果:', modelsInfo);\n      return modelsInfo;\n    } catch (error) {\n      console.error('Redux: 獲取模型詳細資訊失敗:', error);\n      return rejectWithValue(null);\n    }\n  }\n);\n\nexport const checkModelAvailability = createAsyncThunk(\n  'ai/checkModelAvailability',\n  async (modelName: string) => {\n    const result = await api.ai.checkModelAvailability(modelName);\n    return { modelName, ...result };\n  }\n);\n\nexport const generateText = createAsyncThunk(\n  'ai/generateText',\n  async (params: {\n    prompt: string;\n    model: string;\n    aiParams: AIParameters;\n  }) => {\n    const result = await api.ai.generateText(\n      params.prompt,\n      params.model,\n      params.aiParams\n    );\n    \n    return {\n      id: Date.now().toString(),\n      prompt: params.prompt,\n      result,\n      model: params.model,\n      timestamp: new Date(),\n      params: params.aiParams,\n    };\n  }\n);\n\nconst aiSlice = createSlice({\n  name: 'ai',\n  initialState,\n  reducers: {\n    setCurrentModel: (state, action: PayloadAction<string>) => {\n      state.currentModel = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    clearGenerationHistory: (state) => {\n      state.generationHistory = [];\n    },\n    removeGenerationResult: (state, action: PayloadAction<string>) => {\n      state.generationHistory = state.generationHistory.filter(\n        result => result.id !== action.payload\n      );\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // checkOllamaService\n      .addCase(checkOllamaService.fulfilled, (state, action) => {\n        state.isOllamaConnected = action.payload;\n        if (!action.payload) {\n          state.availableModels = [];\n          state.currentModel = null;\n        }\n      })\n      .addCase(checkOllamaService.rejected, (state) => {\n        state.isOllamaConnected = false;\n        state.availableModels = [];\n        state.currentModel = null;\n      })\n\n      // initializeAIServiceLazy\n      .addCase(initializeAIServiceLazy.fulfilled, (state, action) => {\n        state.isOllamaConnected = action.payload;\n        if (!action.payload) {\n          state.availableModels = [];\n          state.currentModel = null;\n        }\n      })\n      .addCase(initializeAIServiceLazy.rejected, (state) => {\n        // 延遲初始化失敗不影響應用程式運行\n        state.isOllamaConnected = false;\n      })\n\n      // fetchServiceStatus\n      .addCase(fetchServiceStatus.fulfilled, (state, action) => {\n        state.serviceStatus = action.payload;\n        if (action.payload && action.payload.service) {\n          state.isOllamaConnected = action.payload.service.available;\n          if (!action.payload.service.available) {\n            state.availableModels = [];\n            state.currentModel = null;\n          }\n        } else {\n          state.isOllamaConnected = false;\n          state.availableModels = [];\n          state.currentModel = null;\n        }\n      })\n      .addCase(fetchServiceStatus.rejected, (state, action) => {\n        state.error = action.error.message || '獲取服務狀態失敗';\n        state.isOllamaConnected = false;\n      })\n      \n      // fetchAvailableModels\n      .addCase(fetchAvailableModels.fulfilled, (state, action) => {\n        state.availableModels = action.payload;\n        // 如果沒有選擇模型且有可用模型，選擇第一個\n        if (!state.currentModel && action.payload.length > 0) {\n          state.currentModel = action.payload[0];\n        }\n      })\n      .addCase(fetchAvailableModels.rejected, (state, action) => {\n        state.error = action.error.message || '獲取模型列表失敗';\n        state.availableModels = [];\n      })\n\n      // fetchModelsInfo\n      .addCase(fetchModelsInfo.fulfilled, (state, action) => {\n        state.modelsInfo = action.payload;\n        if (action.payload && action.payload.success) {\n          state.availableModels = action.payload.models.map((m: any) => m.name);\n          // 如果沒有選擇模型且有可用模型，選擇第一個\n          if (!state.currentModel && action.payload.models.length > 0) {\n            state.currentModel = action.payload.models[0].name;\n          }\n        } else {\n          state.availableModels = [];\n        }\n      })\n      .addCase(fetchModelsInfo.rejected, (state, action) => {\n        state.error = action.error.message || '獲取模型資訊失敗';\n        state.modelsInfo = null;\n      })\n\n      // checkModelAvailability\n      .addCase(checkModelAvailability.fulfilled, (state, action) => {\n        // 可以在這裡處理特定模型的可用性狀態\n        if (!action.payload.available && state.currentModel === action.payload.modelName) {\n          state.currentModel = null;\n        }\n      })\n      \n      // generateText\n      .addCase(generateText.pending, (state) => {\n        state.generating = true;\n        state.error = null;\n      })\n      .addCase(generateText.fulfilled, (state, action) => {\n        state.generating = false;\n        state.generationHistory.unshift(action.payload);\n        // 限制歷史記錄數量\n        if (state.generationHistory.length > 50) {\n          state.generationHistory = state.generationHistory.slice(0, 50);\n        }\n      })\n      .addCase(generateText.rejected, (state, action) => {\n        state.generating = false;\n        state.error = action.error.message || 'AI 生成失敗';\n      });\n  },\n});\n\nexport const {\n  setCurrentModel,\n  clearError,\n  clearGenerationHistory,\n  removeGenerationResult,\n} = aiSlice.actions;\n\nexport default aiSlice.reducer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/chaptersSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[449,452],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[449,452],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1024,1027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1024,1027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { Descendant } from 'slate';\nimport { api } from '../../api';\n\nexport interface Chapter {\n  id: string;\n  projectId: string;\n  title: string;\n  content: Descendant[];\n  order: number;\n  createdAt: Date;\n  updatedAt: Date;\n  wordCount?: number;\n  metadata?: {\n    notes?: string;\n    status?: 'draft' | 'in_progress' | 'review' | 'completed';\n    [key: string]: any;\n  };\n}\n\ninterface ChaptersState {\n  chapters: Chapter[];\n  currentChapter: Chapter | null;\n  loading: boolean;\n  saving: boolean;\n  error: string | null;\n  lastSaved: Date | null;\n}\n\nconst initialState: ChaptersState = {\n  chapters: [],\n  currentChapter: null,\n  loading: false,\n  saving: false,\n  error: null,\n  lastSaved: null,\n};\n\n// 異步 thunks\nexport const fetchChaptersByProjectId = createAsyncThunk(\n  'chapters/fetchByProjectId',\n  async (projectId: string) => {\n    const chapters = await api.chapters.getByProjectId(projectId);\n    return chapters.map((chapter: any) => ({\n      ...chapter,\n      content: chapter.content ? JSON.parse(chapter.content) : [{ type: 'paragraph', children: [{ text: '' }] }],\n      createdAt: new Date(chapter.createdAt),\n      updatedAt: new Date(chapter.updatedAt),\n    }));\n  }\n);\n\nexport const createChapter = createAsyncThunk(\n  'chapters/create',\n  async (chapterData: {\n    projectId: string;\n    title: string;\n    content?: Descendant[];\n    order?: number;\n  }) => {\n    const chapterId = await api.chapters.create({\n      ...chapterData,\n      content: JSON.stringify(chapterData.content || [{ type: 'paragraph', children: [{ text: '' }] }]),\n    });\n    const chapter = await api.chapters.getById(chapterId);\n    return {\n      ...chapter,\n      content: chapter.content ? JSON.parse(chapter.content) : [{ type: 'paragraph', children: [{ text: '' }] }],\n      createdAt: new Date(chapter.createdAt),\n      updatedAt: new Date(chapter.updatedAt),\n    };\n  }\n);\n\nexport const updateChapter = createAsyncThunk(\n  'chapters/update',\n  async (chapter: Chapter) => {\n    await api.chapters.update({\n      ...chapter,\n      content: JSON.stringify(chapter.content),\n    });\n    return chapter;\n  }\n);\n\nexport const deleteChapter = createAsyncThunk(\n  'chapters/delete',\n  async (chapterId: string) => {\n    await api.chapters.delete(chapterId);\n    return chapterId;\n  }\n);\n\nexport const fetchChapterById = createAsyncThunk(\n  'chapters/fetchById',\n  async (chapterId: string) => {\n    const chapter = await api.chapters.getById(chapterId);\n    return {\n      ...chapter,\n      content: chapter.content ? JSON.parse(chapter.content) : [{ type: 'paragraph', children: [{ text: '' }] }],\n      createdAt: new Date(chapter.createdAt),\n      updatedAt: new Date(chapter.updatedAt),\n    };\n  }\n);\n\nconst chaptersSlice = createSlice({\n  name: 'chapters',\n  initialState,\n  reducers: {\n    setCurrentChapter: (state, action: PayloadAction<Chapter | null>) => {\n      state.currentChapter = action.payload;\n    },\n    updateCurrentChapterContent: (state, action: PayloadAction<Descendant[]>) => {\n      if (state.currentChapter) {\n        state.currentChapter.content = action.payload;\n        // 計算字數\n        state.currentChapter.wordCount = calculateWordCount(action.payload);\n      }\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    setSaving: (state, action: PayloadAction<boolean>) => {\n      state.saving = action.payload;\n    },\n    setLastSaved: (state, action: PayloadAction<Date>) => {\n      state.lastSaved = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchChaptersByProjectId\n      .addCase(fetchChaptersByProjectId.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchChaptersByProjectId.fulfilled, (state, action) => {\n        state.loading = false;\n        state.chapters = action.payload;\n      })\n      .addCase(fetchChaptersByProjectId.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '獲取章節列表失敗';\n      })\n      \n      // createChapter\n      .addCase(createChapter.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createChapter.fulfilled, (state, action) => {\n        state.loading = false;\n        state.chapters.push(action.payload);\n      })\n      .addCase(createChapter.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '創建章節失敗';\n      })\n      \n      // updateChapter\n      .addCase(updateChapter.pending, (state) => {\n        state.saving = true;\n        state.error = null;\n      })\n      .addCase(updateChapter.fulfilled, (state, action) => {\n        state.saving = false;\n        state.lastSaved = new Date();\n        const index = state.chapters.findIndex(c => c.id === action.payload.id);\n        if (index !== -1) {\n          state.chapters[index] = action.payload;\n        }\n        if (state.currentChapter?.id === action.payload.id) {\n          state.currentChapter = action.payload;\n        }\n      })\n      .addCase(updateChapter.rejected, (state, action) => {\n        state.saving = false;\n        state.error = action.error.message || '儲存章節失敗';\n      })\n      \n      // deleteChapter\n      .addCase(deleteChapter.fulfilled, (state, action) => {\n        state.chapters = state.chapters.filter(c => c.id !== action.payload);\n        if (state.currentChapter?.id === action.payload) {\n          state.currentChapter = null;\n        }\n      })\n      \n      // fetchChapterById\n      .addCase(fetchChapterById.fulfilled, (state, action) => {\n        state.currentChapter = action.payload;\n      });\n  },\n});\n\n// 輔助函數：計算字數\nconst calculateWordCount = (content: Descendant[]): number => {\n  const getText = (nodes: Descendant[]): string => {\n    return nodes\n      .map(node => {\n        if ('text' in node) {\n          return node.text;\n        } else if ('children' in node) {\n          return getText(node.children);\n        }\n        return '';\n      })\n      .join('');\n  };\n\n  const text = getText(content);\n  // 中文字符計算\n  const chineseChars = text.match(/[\\u4e00-\\u9fff]/g) || [];\n  // 英文單詞計算\n  const englishWords = text.match(/[a-zA-Z]+/g) || [];\n  \n  return chineseChars.length + englishWords.length;\n};\n\nexport const {\n  setCurrentChapter,\n  updateCurrentChapterContent,\n  clearError,\n  setSaving,\n  setLastSaved,\n} = chaptersSlice.actions;\n\nexport default chaptersSlice.reducer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/charactersSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[735,738],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[735,738],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3137,3140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3137,3140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { api } from '../../api';\n\nexport interface Relationship {\n  id?: string;\n  targetId: string;\n  type: string;\n  description: string;\n}\n\nexport interface Character {\n  id: string;\n  projectId: string;\n  name: string;\n  archetype: string;\n  age: number | null;\n  gender: string;\n  appearance: string;\n  personality: string;\n  background: string;\n  relationships?: Relationship[];\n  createdAt: Date;\n  updatedAt: Date;\n}\n\ninterface CharactersState {\n  characters: Character[];\n  currentCharacter: Character | null;\n  loading: boolean;\n  error: string | null;\n  searchQuery: string;\n  filteredCharacters: Character[];\n  relationshipConsistencyIssues: any[];\n}\n\nconst initialState: CharactersState = {\n  characters: [],\n  currentCharacter: null,\n  loading: false,\n  error: null,\n  searchQuery: '',\n  filteredCharacters: [],\n  relationshipConsistencyIssues: [],\n};\n\n// 異步 thunks\nexport const fetchCharactersByProjectId = createAsyncThunk(\n  'characters/fetchCharactersByProjectId',\n  async (projectId: string) => {\n    const characters = await api.characters.getByProjectId(projectId);\n    return characters;\n  }\n);\n\nexport const createCharacter = createAsyncThunk(\n  'characters/createCharacter',\n  async (characterData: Omit<Character, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const characterId = await api.characters.create(characterData);\n    \n    // 如果有關係資料，創建關係\n    if (characterData.relationships && characterData.relationships.length > 0) {\n      // updateRelationships 方法不存在，先清除再重新創建\n      await api.characters.clearRelationships(characterId);\n    }\n    \n    const character = await api.characters.getById(characterId);\n    return character;\n  }\n);\n\nexport const updateCharacter = createAsyncThunk(\n  'characters/updateCharacter',\n  async (character: Character) => {\n    await api.characters.update(character);\n    \n    // 如果有關係資料，更新關係\n    if (character.relationships) {\n      // updateRelationships 方法不存在，先清除再重新創建\n      await api.characters.clearRelationships(character.id);\n    }\n    \n    return character;\n  }\n);\n\nexport const deleteCharacter = createAsyncThunk(\n  'characters/deleteCharacter',\n  async (characterId: string) => {\n    await api.characters.delete(characterId);\n    return characterId;\n  }\n);\n\nexport const fetchCharacterById = createAsyncThunk(\n  'characters/fetchCharacterById',\n  async (characterId: string) => {\n    const character = await api.characters.getById(characterId);\n    return character;\n  }\n);\n\nexport const updateCharacterRelationships = createAsyncThunk(\n  'characters/updateCharacterRelationships',\n  async ({ characterId, _relationships }: { characterId: string; _relationships: Relationship[] }) => {\n    // updateRelationships 方法不存在，先清除再重新創建\n      await api.characters.clearRelationships(characterId);\n    const character = await api.characters.getById(characterId);\n    return character;\n  }\n);\n\nexport const checkRelationshipConsistency = createAsyncThunk(\n  'characters/checkRelationshipConsistency',\n  async (_projectId: string) => {\n    // checkRelationshipConsistency 方法不存在，返回空陣列\n    const issues: any[] = [];\n    return issues;\n  }\n);\n\n// 輔助函數：過濾角色\nconst filterCharacters = (characters: Character[], query: string): Character[] => {\n  if (!query.trim()) return characters;\n  \n  const lowercaseQuery = query.toLowerCase();\n  return characters.filter(character =>\n    character.name.toLowerCase().includes(lowercaseQuery) ||\n    character.archetype.toLowerCase().includes(lowercaseQuery) ||\n    character.personality.toLowerCase().includes(lowercaseQuery) ||\n    character.background.toLowerCase().includes(lowercaseQuery)\n  );\n};\n\nconst charactersSlice = createSlice({\n  name: 'characters',\n  initialState,\n  reducers: {\n    setCurrentCharacter: (state, action: PayloadAction<Character | null>) => {\n      state.currentCharacter = action.payload;\n    },\n    setSearchQuery: (state, action: PayloadAction<string>) => {\n      state.searchQuery = action.payload;\n      state.filteredCharacters = filterCharacters(state.characters, action.payload);\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    // 角色原型模板\n    applyCharacterArchetype: (state, action: PayloadAction<{\n      characterId: string;\n      archetype: {\n        name: string;\n        personality: string;\n        appearance?: string;\n        background?: string;\n      };\n    }>) => {\n      const { characterId, archetype } = action.payload;\n      const character = state.characters.find(c => c.id === characterId);\n      \n      if (character) {\n        character.archetype = archetype.name;\n        character.personality = archetype.personality;\n        if (archetype.appearance) character.appearance = archetype.appearance;\n        if (archetype.background) character.background = archetype.background;\n        character.updatedAt = new Date();\n        \n        // 更新當前角色\n        if (state.currentCharacter?.id === characterId) {\n          state.currentCharacter = { ...character };\n        }\n        \n        // 更新過濾結果\n        state.filteredCharacters = filterCharacters(state.characters, state.searchQuery);\n      }\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchCharactersByProjectId\n      .addCase(fetchCharactersByProjectId.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchCharactersByProjectId.fulfilled, (state, action) => {\n        state.loading = false;\n        state.characters = action.payload;\n        state.filteredCharacters = filterCharacters(action.payload, state.searchQuery);\n      })\n      .addCase(fetchCharactersByProjectId.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '獲取角色列表失敗';\n      })\n      \n      // createCharacter\n      .addCase(createCharacter.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createCharacter.fulfilled, (state, action) => {\n        state.loading = false;\n        state.characters.push(action.payload);\n        state.filteredCharacters = filterCharacters(state.characters, state.searchQuery);\n      })\n      .addCase(createCharacter.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '創建角色失敗';\n      })\n      \n      // updateCharacter\n      .addCase(updateCharacter.fulfilled, (state, action) => {\n        const index = state.characters.findIndex(c => c.id === action.payload.id);\n        if (index !== -1) {\n          state.characters[index] = action.payload;\n        }\n        if (state.currentCharacter?.id === action.payload.id) {\n          state.currentCharacter = action.payload;\n        }\n        state.filteredCharacters = filterCharacters(state.characters, state.searchQuery);\n      })\n      .addCase(updateCharacter.rejected, (state, action) => {\n        state.error = action.error.message || '更新角色失敗';\n      })\n      \n      // deleteCharacter\n      .addCase(deleteCharacter.fulfilled, (state, action) => {\n        state.characters = state.characters.filter(c => c.id !== action.payload);\n        if (state.currentCharacter?.id === action.payload) {\n          state.currentCharacter = null;\n        }\n        state.filteredCharacters = filterCharacters(state.characters, state.searchQuery);\n      })\n      .addCase(deleteCharacter.rejected, (state, action) => {\n        state.error = action.error.message || '刪除角色失敗';\n      })\n      \n      // fetchCharacterById\n      .addCase(fetchCharacterById.fulfilled, (state, action) => {\n        state.currentCharacter = action.payload;\n      })\n      \n      // updateCharacterRelationships\n      .addCase(updateCharacterRelationships.fulfilled, (state, action) => {\n        const index = state.characters.findIndex(c => c.id === action.payload.id);\n        if (index !== -1) {\n          state.characters[index] = action.payload;\n        }\n        if (state.currentCharacter?.id === action.payload.id) {\n          state.currentCharacter = action.payload;\n        }\n        state.filteredCharacters = filterCharacters(state.characters, state.searchQuery);\n      })\n      .addCase(updateCharacterRelationships.rejected, (state, action) => {\n        state.error = action.error.message || '更新角色關係失敗';\n      })\n      \n      // checkRelationshipConsistency\n      .addCase(checkRelationshipConsistency.fulfilled, (state, action) => {\n        state.relationshipConsistencyIssues = action.payload;\n      })\n      .addCase(checkRelationshipConsistency.rejected, (state, action) => {\n        state.error = action.error.message || '檢查關係一致性失敗';\n      });\n  },\n});\n\nexport const {\n  setCurrentCharacter,\n  setSearchQuery,\n  clearError,\n  applyCharacterArchetype,\n} = charactersSlice.actions;\n\nexport default charactersSlice.reducer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/editorSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1535,1538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1535,1538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { \n  EditorSettings, \n  EditorState, \n  CustomTheme, \n  DEFAULT_EDITOR_SETTINGS,\n  THEME_OPTIONS \n} from '../../types/editor';\n\nconst initialState: EditorState = {\n  settings: DEFAULT_EDITOR_SETTINGS,\n  isSettingsOpen: false,\n  isReadingMode: false,\n  currentTheme: THEME_OPTIONS[0], // 預設為宇宙深藍主題\n  customThemes: []\n};\n\nconst editorSlice = createSlice({\n  name: 'editor',\n  initialState,\n  reducers: {\n    updateSettings: (state, action: PayloadAction<Partial<EditorSettings>>) => {\n      state.settings = { ...state.settings, ...action.payload };\n      \n      // 如果更新了主題，同時更新當前主題\n      if (action.payload.theme) {\n        const theme = THEME_OPTIONS.find(t => t.value === action.payload.theme) || THEME_OPTIONS[0];\n        state.currentTheme = theme;\n        \n        // 更新相關顏色設定\n        state.settings.backgroundColor = theme.colors.background;\n        state.settings.textColor = theme.colors.text;\n        state.settings.selectionColor = theme.colors.accent;\n      }\n    },\n    \n    toggleSettings: (state) => {\n      state.isSettingsOpen = !state.isSettingsOpen;\n    },\n    \n    toggleReadingMode: (state) => {\n      state.isReadingMode = !state.isReadingMode;\n      state.settings.readingMode = state.isReadingMode;\n    },\n    \n    setTheme: (state, action: PayloadAction<string>) => {\n      const theme = THEME_OPTIONS.find(t => t.value === action.payload) || THEME_OPTIONS[0];\n      state.currentTheme = theme;\n      state.settings.theme = action.payload as any;\n      \n      // 更新相關顏色設定\n      state.settings.backgroundColor = theme.colors.background;\n      state.settings.textColor = theme.colors.text;\n      state.settings.selectionColor = theme.colors.accent;\n    },\n    \n    addCustomTheme: (state, action: PayloadAction<CustomTheme>) => {\n      state.customThemes.push(action.payload);\n    },\n    \n    removeCustomTheme: (state, action: PayloadAction<string>) => {\n      state.customThemes = state.customThemes.filter(theme => theme.name !== action.payload);\n    },\n    \n    resetSettings: (state) => {\n      state.settings = DEFAULT_EDITOR_SETTINGS;\n      state.currentTheme = THEME_OPTIONS[0];\n      state.isReadingMode = false;\n    },\n    \n    // 字體設定\n    setFontFamily: (state, action: PayloadAction<string>) => {\n      state.settings.fontFamily = action.payload;\n    },\n    \n    setFontSize: (state, action: PayloadAction<number>) => {\n      state.settings.fontSize = Math.max(12, Math.min(32, action.payload));\n    },\n    \n    setFontWeight: (state, action: PayloadAction<EditorSettings['fontWeight']>) => {\n      state.settings.fontWeight = action.payload;\n    },\n    \n    // 排版設定\n    setLineHeight: (state, action: PayloadAction<number>) => {\n      state.settings.lineHeight = Math.max(1.0, Math.min(3.0, action.payload));\n    },\n    \n    setLetterSpacing: (state, action: PayloadAction<number>) => {\n      state.settings.letterSpacing = Math.max(-2, Math.min(5, action.payload));\n    },\n    \n    setParagraphSpacing: (state, action: PayloadAction<number>) => {\n      state.settings.paragraphSpacing = Math.max(0, Math.min(50, action.payload));\n    },\n    \n    setTextAlign: (state, action: PayloadAction<EditorSettings['textAlign']>) => {\n      state.settings.textAlign = action.payload;\n    },\n    \n    // 閱讀模式設定\n    setReadingModeWidth: (state, action: PayloadAction<number>) => {\n      state.settings.readingModeWidth = Math.max(600, Math.min(1200, action.payload));\n    },\n    \n    setReadingModeOpacity: (state, action: PayloadAction<number>) => {\n      state.settings.readingModeOpacity = Math.max(0.5, Math.min(1.0, action.payload));\n    },\n    \n    // 編輯器行為設定\n    toggleAutoSave: (state) => {\n      state.settings.autoSave = !state.settings.autoSave;\n    },\n    \n    setAutoSaveInterval: (state, action: PayloadAction<number>) => {\n      state.settings.autoSaveInterval = Math.max(1000, Math.min(30000, action.payload));\n    },\n    \n    toggleSpellCheck: (state) => {\n      state.settings.spellCheck = !state.settings.spellCheck;\n    },\n    \n    toggleWordWrap: (state) => {\n      state.settings.wordWrap = !state.settings.wordWrap;\n    },\n    \n    toggleLineNumbers: (state) => {\n      state.settings.showLineNumbers = !state.settings.showLineNumbers;\n    }\n  }\n});\n\nexport const {\n  updateSettings,\n  toggleSettings,\n  toggleReadingMode,\n  setTheme,\n  addCustomTheme,\n  removeCustomTheme,\n  resetSettings,\n  setFontFamily,\n  setFontSize,\n  setFontWeight,\n  setLineHeight,\n  setLetterSpacing,\n  setParagraphSpacing,\n  setTextAlign,\n  setReadingModeWidth,\n  setReadingModeOpacity,\n  toggleAutoSave,\n  setAutoSaveInterval,\n  toggleSpellCheck,\n  toggleWordWrap,\n  toggleLineNumbers\n} = editorSlice.actions;\n\nexport default editorSlice.reducer;\n\n// Selectors\nexport const selectEditorSettings = (state: { editor: EditorState }) => state.editor.settings;\nexport const selectIsSettingsOpen = (state: { editor: EditorState }) => state.editor.isSettingsOpen;\nexport const selectIsReadingMode = (state: { editor: EditorState }) => state.editor.isReadingMode;\nexport const selectCurrentTheme = (state: { editor: EditorState }) => state.editor.currentTheme;\nexport const selectCustomThemes = (state: { editor: EditorState }) => state.editor.customThemes;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/errorSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/notificationSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/projectsSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[927,930],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[927,930],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { api } from '../../api';\n\nexport interface Project {\n  id: string;\n  name: string;\n  type: 'isekai' | 'school' | 'scifi' | 'fantasy';\n  description: string;\n  createdAt: string; // 改為字符串以符合 Redux 序列化要求\n  updatedAt: string; // 改為字符串以符合 Redux 序列化要求\n  settings: {\n    aiModel?: string;\n    aiParams?: {\n      temperature: number;\n      topP: number;\n      maxTokens: number;\n    };\n  };\n}\n\ninterface ProjectsState {\n  projects: Project[];\n  currentProject: Project | null;\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: ProjectsState = {\n  projects: [],\n  currentProject: null,\n  loading: false,\n  error: null,\n};\n\n// 異步 thunks\nexport const fetchProjects = createAsyncThunk(\n  'projects/fetchProjects',\n  async () => {\n    const projects = await api.projects.getAll();\n    // 確保日期是字符串格式\n    return projects.map((project: any) => ({\n      ...project,\n      createdAt: project.createdAt instanceof Date ? project.createdAt.toISOString() : project.createdAt,\n      updatedAt: project.updatedAt instanceof Date ? project.updatedAt.toISOString() : project.updatedAt,\n    }));\n  }\n);\n\nexport const createProject = createAsyncThunk(\n  'projects/createProject',\n  async (projectData: Omit<Project, 'id' | 'createdAt' | 'updatedAt'>) => {\n    const projectId = await api.projects.create(projectData);\n    const project = await api.projects.getById(projectId);\n    // 確保日期是字符串格式\n    return {\n      ...project,\n      createdAt: project.createdAt instanceof Date ? project.createdAt.toISOString() : project.createdAt,\n      updatedAt: project.updatedAt instanceof Date ? project.updatedAt.toISOString() : project.updatedAt,\n    };\n  }\n);\n\nexport const updateProject = createAsyncThunk(\n  'projects/updateProject',\n  async (project: Project) => {\n    await api.projects.update(project);\n    return project;\n  }\n);\n\nexport const deleteProject = createAsyncThunk(\n  'projects/deleteProject',\n  async (projectId: string) => {\n    await api.projects.delete(projectId);\n    return projectId;\n  }\n);\n\nexport const fetchProjectById = createAsyncThunk(\n  'projects/fetchProjectById',\n  async (projectId: string) => {\n    const project = await api.projects.getById(projectId);\n    return project;\n  }\n);\n\nconst projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setCurrentProject: (state, action: PayloadAction<Project | null>) => {\n      state.currentProject = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchProjects\n      .addCase(fetchProjects.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchProjects.fulfilled, (state, action) => {\n        state.loading = false;\n        state.projects = action.payload;\n      })\n      .addCase(fetchProjects.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '獲取專案列表失敗';\n      })\n      \n      // createProject\n      .addCase(createProject.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createProject.fulfilled, (state, action) => {\n        state.loading = false;\n        state.projects.unshift(action.payload);\n      })\n      .addCase(createProject.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '創建專案失敗';\n      })\n      \n      // updateProject\n      .addCase(updateProject.fulfilled, (state, action) => {\n        const index = state.projects.findIndex(p => p.id === action.payload.id);\n        if (index !== -1) {\n          state.projects[index] = action.payload;\n        }\n        if (state.currentProject?.id === action.payload.id) {\n          state.currentProject = action.payload;\n        }\n      })\n      \n      // deleteProject\n      .addCase(deleteProject.fulfilled, (state, action) => {\n        state.projects = state.projects.filter(p => p.id !== action.payload);\n        if (state.currentProject?.id === action.payload) {\n          state.currentProject = null;\n        }\n      })\n      \n      // fetchProjectById\n      .addCase(fetchProjectById.fulfilled, (state, action) => {\n        state.currentProject = action.payload;\n      });\n  },\n});\n\nexport const { setCurrentProject, clearError } = projectsSlice.actions;\nexport default projectsSlice.reducer;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/settingsSlice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/templatesSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4110,4113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4110,4113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4131,4134],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4131,4134],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\nimport { NovelTemplate, TemplateType, TemplateFilters, TemplateSortOptions, TemplateState } from '../../types/template';\nimport { templateService } from '../../services/templateService';\n\nconst initialState: TemplateState = {\n  templates: [],\n  currentTemplate: null,\n  loading: false,\n  error: null,\n  filters: {},\n  sortOptions: {\n    field: 'name',\n    direction: 'asc'\n  }\n};\n\n// 異步 thunks\nexport const fetchAllTemplates = createAsyncThunk(\n  'templates/fetchAll',\n  async () => {\n    return templateService.getAllTemplates();\n  }\n);\n\nexport const fetchTemplatesByType = createAsyncThunk(\n  'templates/fetchByType',\n  async (type: TemplateType) => {\n    return templateService.getTemplatesByType(type);\n  }\n);\n\nexport const fetchTemplateById = createAsyncThunk(\n  'templates/fetchById',\n  async (id: string) => {\n    const template = templateService.getTemplateById(id);\n    if (!template) {\n      throw new Error('找不到指定的模板');\n    }\n    return template;\n  }\n);\n\nexport const createCustomTemplate = createAsyncThunk(\n  'templates/createCustom',\n  async (templateData: Omit<NovelTemplate, 'id' | 'createdAt' | 'updatedAt' | 'isCustom'>) => {\n    const templateId = templateService.createCustomTemplate(templateData);\n    const template = templateService.getTemplateById(templateId);\n    if (!template) {\n      throw new Error('創建模板後無法找到');\n    }\n    return template;\n  }\n);\n\nexport const updateTemplate = createAsyncThunk(\n  'templates/update',\n  async ({ id, updates }: { id: string; updates: Partial<NovelTemplate> }) => {\n    const success = templateService.updateTemplate(id, updates);\n    if (!success) {\n      throw new Error('更新模板失敗');\n    }\n    const template = templateService.getTemplateById(id);\n    if (!template) {\n      throw new Error('更新後無法找到模板');\n    }\n    return template;\n  }\n);\n\nexport const deleteTemplate = createAsyncThunk(\n  'templates/delete',\n  async (id: string) => {\n    const success = templateService.deleteTemplate(id);\n    if (!success) {\n      throw new Error('刪除模板失敗');\n    }\n    return id;\n  }\n);\n\nexport const cloneTemplate = createAsyncThunk(\n  'templates/clone',\n  async ({ id, newName }: { id: string; newName?: string }) => {\n    const newTemplateId = templateService.cloneTemplate(id, newName);\n    const template = templateService.getTemplateById(newTemplateId);\n    if (!template) {\n      throw new Error('複製模板後無法找到');\n    }\n    return template;\n  }\n);\n\nexport const applyTemplateToProject = createAsyncThunk(\n  'templates/applyToProject',\n  async ({ templateId, projectId }: { templateId: string; projectId: string }) => {\n    return await templateService.applyTemplateToProject(templateId, projectId);\n  }\n);\n\nexport const searchTemplates = createAsyncThunk(\n  'templates/search',\n  async (query: string) => {\n    return templateService.searchTemplates(query);\n  }\n);\n\nexport const importTemplate = createAsyncThunk(\n  'templates/import',\n  async (templateJson: string) => {\n    const templateId = templateService.importTemplate(templateJson);\n    const template = templateService.getTemplateById(templateId);\n    if (!template) {\n      throw new Error('導入模板後無法找到');\n    }\n    return template;\n  }\n);\n\n// 輔助函數：過濾和排序模板\nconst filterAndSortTemplates = (\n  templates: NovelTemplate[], \n  filters: TemplateFilters, \n  sortOptions: TemplateSortOptions\n): NovelTemplate[] => {\n  let filtered = [...templates];\n\n  // 應用過濾器\n  if (filters.type) {\n    filtered = filtered.filter(template => template.type === filters.type);\n  }\n\n  if (filters.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(template =>\n      template.name.toLowerCase().includes(searchTerm) ||\n      template.description.toLowerCase().includes(searchTerm)\n    );\n  }\n\n  if (filters.isCustom !== undefined) {\n    filtered = filtered.filter(template => template.isCustom === filters.isCustom);\n  }\n\n  if (filters.isActive !== undefined) {\n    filtered = filtered.filter(template => template.isActive === filters.isActive);\n  }\n\n  // 應用排序\n  filtered.sort((a, b) => {\n    let aValue: any;\n    let bValue: any;\n\n    switch (sortOptions.field) {\n      case 'name':\n        aValue = a.name.toLowerCase();\n        bValue = b.name.toLowerCase();\n        break;\n      case 'type':\n        aValue = a.type;\n        bValue = b.type;\n        break;\n      case 'createdAt':\n        aValue = new Date(a.createdAt).getTime();\n        bValue = new Date(b.createdAt).getTime();\n        break;\n      case 'updatedAt':\n        aValue = new Date(a.updatedAt).getTime();\n        bValue = new Date(b.updatedAt).getTime();\n        break;\n      default:\n        return 0;\n    }\n\n    if (aValue < bValue) {\n      return sortOptions.direction === 'asc' ? -1 : 1;\n    }\n    if (aValue > bValue) {\n      return sortOptions.direction === 'asc' ? 1 : -1;\n    }\n    return 0;\n  });\n\n  return filtered;\n};\n\nconst templatesSlice = createSlice({\n  name: 'templates',\n  initialState,\n  reducers: {\n    setCurrentTemplate: (state, action: PayloadAction<NovelTemplate | null>) => {\n      state.currentTemplate = action.payload;\n    },\n    setFilters: (state, action: PayloadAction<TemplateFilters>) => {\n      state.filters = action.payload;\n    },\n    setSortOptions: (state, action: PayloadAction<TemplateSortOptions>) => {\n      state.sortOptions = action.payload;\n    },\n    clearError: (state) => {\n      state.error = null;\n    },\n    resetTemplateState: (state) => {\n      state.currentTemplate = null;\n      state.filters = {};\n      state.error = null;\n    }\n  },\n  extraReducers: (builder) => {\n    builder\n      // fetchAllTemplates\n      .addCase(fetchAllTemplates.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchAllTemplates.fulfilled, (state, action) => {\n        state.loading = false;\n        state.templates = action.payload;\n      })\n      .addCase(fetchAllTemplates.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '獲取模板列表失敗';\n      })\n\n      // fetchTemplatesByType\n      .addCase(fetchTemplatesByType.fulfilled, (state, action) => {\n        state.templates = action.payload;\n      })\n\n      // fetchTemplateById\n      .addCase(fetchTemplateById.fulfilled, (state, action) => {\n        state.currentTemplate = action.payload;\n      })\n      .addCase(fetchTemplateById.rejected, (state, action) => {\n        state.error = action.error.message || '獲取模板失敗';\n      })\n\n      // createCustomTemplate\n      .addCase(createCustomTemplate.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(createCustomTemplate.fulfilled, (state, action) => {\n        state.loading = false;\n        state.templates.push(action.payload);\n        state.currentTemplate = action.payload;\n      })\n      .addCase(createCustomTemplate.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '創建模板失敗';\n      })\n\n      // updateTemplate\n      .addCase(updateTemplate.fulfilled, (state, action) => {\n        const index = state.templates.findIndex(t => t.id === action.payload.id);\n        if (index !== -1) {\n          state.templates[index] = action.payload;\n        }\n        if (state.currentTemplate?.id === action.payload.id) {\n          state.currentTemplate = action.payload;\n        }\n      })\n      .addCase(updateTemplate.rejected, (state, action) => {\n        state.error = action.error.message || '更新模板失敗';\n      })\n\n      // deleteTemplate\n      .addCase(deleteTemplate.fulfilled, (state, action) => {\n        state.templates = state.templates.filter(t => t.id !== action.payload);\n        if (state.currentTemplate?.id === action.payload) {\n          state.currentTemplate = null;\n        }\n      })\n      .addCase(deleteTemplate.rejected, (state, action) => {\n        state.error = action.error.message || '刪除模板失敗';\n      })\n\n      // cloneTemplate\n      .addCase(cloneTemplate.fulfilled, (state, action) => {\n        state.templates.push(action.payload);\n      })\n      .addCase(cloneTemplate.rejected, (state, action) => {\n        state.error = action.error.message || '複製模板失敗';\n      })\n\n      // applyTemplateToProject\n      .addCase(applyTemplateToProject.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(applyTemplateToProject.fulfilled, (state) => {\n        state.loading = false;\n      })\n      .addCase(applyTemplateToProject.rejected, (state, action) => {\n        state.loading = false;\n        state.error = action.error.message || '應用模板失敗';\n      })\n\n      // searchTemplates\n      .addCase(searchTemplates.fulfilled, (state, action) => {\n        state.templates = action.payload;\n      })\n\n      // importTemplate\n      .addCase(importTemplate.fulfilled, (state, action) => {\n        state.templates.push(action.payload);\n      })\n      .addCase(importTemplate.rejected, (state, action) => {\n        state.error = action.error.message || '導入模板失敗';\n      });\n  },\n});\n\nexport const {\n  setCurrentTemplate,\n  setFilters,\n  setSortOptions,\n  clearError,\n  resetTemplateState,\n} = templatesSlice.actions;\n\nexport default templatesSlice.reducer;\n\n// Selectors\nexport const selectAllTemplates = (state: { templates: TemplateState }) => state.templates.templates;\nexport const selectCurrentTemplate = (state: { templates: TemplateState }) => state.templates.currentTemplate;\nexport const selectTemplateLoading = (state: { templates: TemplateState }) => state.templates.loading;\nexport const selectTemplateError = (state: { templates: TemplateState }) => state.templates.error;\nexport const selectTemplateFilters = (state: { templates: TemplateState }) => state.templates.filters;\nexport const selectTemplateSortOptions = (state: { templates: TemplateState }) => state.templates.sortOptions;\n\nexport const selectFilteredAndSortedTemplates = (state: { templates: TemplateState }) => {\n  return filterAndSortTemplates(\n    state.templates.templates,\n    state.templates.filters,\n    state.templates.sortOptions\n  );\n};\n\nexport const selectTemplatesByType = (type: TemplateType) => (state: { templates: TemplateState }) => {\n  return state.templates.templates.filter(template => template.type === type);\n};\n\nexport const selectDefaultTemplates = (state: { templates: TemplateState }) => {\n  return state.templates.templates.filter(template => !template.isCustom);\n};\n\nexport const selectCustomTemplates = (state: { templates: TemplateState }) => {\n  return state.templates.templates.filter(template => template.isCustom);\n};\n\nexport const selectActiveTemplates = (state: { templates: TemplateState }) => {\n  return state.templates.templates.filter(template => template.isActive !== false);\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/slices/uiSlice.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":8,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[271,274],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[271,274],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3814,3817],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3814,3817],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface UIState {\n  sidebarCollapsed: boolean;\n  currentView: 'dashboard' | 'editor' | 'characters' | 'settings';\n  theme: 'cosmic' | 'light' | 'dark';\n  notifications: Notification[];\n  selectedTemplate: any | null; // 儲存選中的模板\n  modals: {\n    createProject: boolean;\n    projectManage: boolean;\n    deleteProject: boolean;\n    importProject: boolean;\n    chapterManage: boolean;\n    createChapter: boolean;\n    aiSettings: boolean;\n    settings: boolean;\n    characterForm: boolean;\n    templateManager: boolean;\n    templateApplication: boolean;\n    selectProjectForCharacters: boolean;\n    backupManager: boolean;\n    helpCenter: boolean;\n    updateManager: boolean;\n    testModal: boolean; // 用於測試的模態框\n  };\n  loading: {\n    global: boolean;\n    projects: boolean;\n    chapters: boolean;\n    characters: boolean;\n    ai: boolean;\n  };\n}\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n  title: string;\n  message: string;\n  timestamp: Date;\n  autoClose?: boolean;\n  duration?: number;\n}\n\nconst initialState: UIState = {\n  sidebarCollapsed: false,\n  currentView: 'dashboard',\n  theme: 'cosmic',\n  notifications: [],\n  selectedTemplate: null,\n  modals: {\n    createProject: false,\n    projectManage: false,\n    deleteProject: false,\n    importProject: false,\n    chapterManage: false,\n    createChapter: false,\n    aiSettings: false,\n    settings: false,\n    characterForm: false,\n    templateManager: false,\n    templateApplication: false,\n    selectProjectForCharacters: false,\n    backupManager: false,\n    helpCenter: false,\n    updateManager: false,\n    testModal: false,\n  },\n  loading: {\n    global: false,\n    projects: false,\n    chapters: false,\n    characters: false,\n    ai: false,\n  },\n};\n\nconst uiSlice = createSlice({\n  name: 'ui',\n  initialState,\n  reducers: {\n    toggleSidebar: (state) => {\n      state.sidebarCollapsed = !state.sidebarCollapsed;\n    },\n    setSidebarCollapsed: (state, action: PayloadAction<boolean>) => {\n      state.sidebarCollapsed = action.payload;\n    },\n    setCurrentView: (state, action: PayloadAction<UIState['currentView']>) => {\n      state.currentView = action.payload;\n    },\n    setTheme: (state, action: PayloadAction<UIState['theme']>) => {\n      state.theme = action.payload;\n    },\n    \n    // 通知管理\n    addNotification: (state, action: PayloadAction<Omit<Notification, 'id' | 'timestamp'>>) => {\n      const notification: Notification = {\n        ...action.payload,\n        id: Date.now().toString(),\n        timestamp: new Date(),\n        autoClose: action.payload.autoClose ?? true,\n        duration: action.payload.duration ?? 5000,\n      };\n      state.notifications.push(notification);\n    },\n    removeNotification: (state, action: PayloadAction<string>) => {\n      state.notifications = state.notifications.filter(n => n.id !== action.payload);\n    },\n    clearNotifications: (state) => {\n      state.notifications = [];\n    },\n    \n    // 模態框管理\n    openModal: (state, action: PayloadAction<keyof UIState['modals']>) => {\n      state.modals[action.payload] = true;\n    },\n    closeModal: (state, action: PayloadAction<keyof UIState['modals']>) => {\n      state.modals[action.payload] = false;\n    },\n    closeAllModals: (state) => {\n      Object.keys(state.modals).forEach(key => {\n        state.modals[key as keyof UIState['modals']] = false;\n      });\n    },\n    \n    // 載入狀態管理\n    setLoading: (state, action: PayloadAction<{ key: keyof UIState['loading']; value: boolean }>) => {\n      state.loading[action.payload.key] = action.payload.value;\n    },\n    setGlobalLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading.global = action.payload;\n    },\n    \n    // 模板管理\n    setSelectedTemplate: (state, action: PayloadAction<any>) => {\n      state.selectedTemplate = action.payload;\n    },\n  },\n});\n\nexport const {\n  toggleSidebar,\n  setSidebarCollapsed,\n  setCurrentView,\n  setTheme,\n  addNotification,\n  removeNotification,\n  clearNotifications,\n  openModal,\n  closeModal,\n  closeAllModals,\n  setLoading,\n  setGlobalLoading,\n  setSelectedTemplate,\n} = uiSlice.actions;\n\nexport default uiSlice.reducer;\n\n// 輔助函數：創建通知\nexport const createNotification = {\n  success: (title: string, message: string): Omit<Notification, 'id' | 'timestamp'> => ({\n    type: 'success',\n    title,\n    message,\n  }),\n  error: (title: string, message: string): Omit<Notification, 'id' | 'timestamp'> => ({\n    type: 'error',\n    title,\n    message,\n    autoClose: false, // 錯誤通知不自動關閉\n  }),\n  warning: (title: string, message: string): Omit<Notification, 'id' | 'timestamp'> => ({\n    type: 'warning',\n    title,\n    message,\n  }),\n  info: (title: string, message: string): Omit<Notification, 'id' | 'timestamp'> => ({\n    type: 'info',\n    title,\n    message,\n  }),\n};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/store/store.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1520,1523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1520,1523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { configureStore } from '@reduxjs/toolkit';\nimport projectsReducer from './slices/projectsSlice';\nimport chaptersReducer from './slices/chaptersSlice';\nimport charactersReducer from './slices/charactersSlice';\nimport templatesReducer from './slices/templatesSlice';\nimport aiReducer from './slices/aiSlice'; // 重新啟用 AI slice\nimport aiHistoryReducer from './slices/aiHistorySlice';\nimport uiReducer from './slices/uiSlice';\nimport editorReducer from './slices/editorSlice';\nimport { errorReducer, progressReducer } from './slices/errorSlice';\nimport notificationReducer from './slices/notificationSlice';\nimport settingsReducer from './slices/settingsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    projects: projectsReducer,\n    chapters: chaptersReducer,\n    characters: charactersReducer,\n    templates: templatesReducer,\n    ai: aiReducer, // 重新啟用 AI slice\n    aiHistory: aiHistoryReducer,\n    ui: uiReducer,\n    editor: editorReducer,\n    error: errorReducer,\n    progress: progressReducer,\n    notification: notificationReducer,\n    settings: settingsReducer,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'progress/startProgress', 'progress/updateProgress', 'progress/completeProgress', 'progress/failProgress'],\n        ignoredPaths: ['payload.timestamp', 'meta.arg', 'meta.baseQueryMeta', 'progress.indicators', 'error.errors'],\n        // 自定義檢查，允許 Date 物件和函數\n        isSerializable: (value: any) => {\n          if (value instanceof Date) {\n            return true;\n          }\n          if (typeof value === 'function') {\n            return false; // 函數不應該被序列化\n          }\n          return true;\n        },\n      },\n      thunk: true, // 確保 thunk 中間件被啟用\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/character.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/editor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/error.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[388,391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[388,391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 錯誤處理相關類型定義\n\nexport type ErrorSeverity = 'low' | 'medium' | 'high' | 'critical';\nexport type ErrorCategory = 'network' | 'database' | 'ai' | 'file' | 'validation' | 'system' | 'user';\n\nexport interface AppError {\n  id: string;\n  code: string;\n  message: string;\n  description?: string;\n  severity: ErrorSeverity;\n  category: ErrorCategory;\n  timestamp: Date;\n  context?: Record<string, any>;\n  stack?: string;\n  resolved?: boolean;\n  suggestions?: ErrorSuggestion[];\n}\n\nexport interface ErrorSuggestion {\n  id: string;\n  title: string;\n  description: string;\n  action?: {\n    type: 'button' | 'link' | 'auto';\n    label: string;\n    handler?: () => void | Promise<void>;\n    url?: string;\n  };\n  priority: number;\n}\n\nexport interface ProgressIndicator {\n  id: string;\n  title: string;\n  description?: string;\n  progress: number; // 0-100\n  status: 'pending' | 'running' | 'completed' | 'failed' | 'cancelled';\n  startTime: Date;\n  endTime?: Date;\n  estimatedDuration?: number;\n  currentStep?: string;\n  totalSteps?: number;\n  completedSteps?: number;\n  error?: AppError;\n}\n\n// 預定義錯誤類型\nexport const ERROR_CODES = {\n  // 網路錯誤\n  NETWORK_OFFLINE: 'NETWORK_OFFLINE',\n  NETWORK_TIMEOUT: 'NETWORK_TIMEOUT',\n  NETWORK_CONNECTION_FAILED: 'NETWORK_CONNECTION_FAILED',\n  \n  // AI 相關錯誤\n  AI_SERVICE_UNAVAILABLE: 'AI_SERVICE_UNAVAILABLE',\n  AI_MODEL_NOT_FOUND: 'AI_MODEL_NOT_FOUND',\n  AI_GENERATION_FAILED: 'AI_GENERATION_FAILED',\n  AI_CONTEXT_TOO_LONG: 'AI_CONTEXT_TOO_LONG',\n  \n  // 資料庫錯誤\n  DATABASE_CONNECTION_FAILED: 'DATABASE_CONNECTION_FAILED',\n  DATABASE_QUERY_FAILED: 'DATABASE_QUERY_FAILED',\n  DATABASE_CORRUPTION: 'DATABASE_CORRUPTION',\n  \n  // 檔案系統錯誤\n  FILE_NOT_FOUND: 'FILE_NOT_FOUND',\n  FILE_PERMISSION_DENIED: 'FILE_PERMISSION_DENIED',\n  FILE_CORRUPTED: 'FILE_CORRUPTED',\n  DISK_SPACE_INSUFFICIENT: 'DISK_SPACE_INSUFFICIENT',\n  \n  // 驗證錯誤\n  VALIDATION_REQUIRED_FIELD: 'VALIDATION_REQUIRED_FIELD',\n  VALIDATION_INVALID_FORMAT: 'VALIDATION_INVALID_FORMAT',\n  VALIDATION_LENGTH_EXCEEDED: 'VALIDATION_LENGTH_EXCEEDED',\n  \n  // 系統錯誤\n  SYSTEM_OUT_OF_MEMORY: 'SYSTEM_OUT_OF_MEMORY',\n  SYSTEM_PERMISSION_DENIED: 'SYSTEM_PERMISSION_DENIED',\n  SYSTEM_UNKNOWN_ERROR: 'SYSTEM_UNKNOWN_ERROR',\n  \n  // 使用者錯誤\n  USER_OPERATION_CANCELLED: 'USER_OPERATION_CANCELLED',\n  USER_INVALID_INPUT: 'USER_INVALID_INPUT',\n  USER_UNAUTHORIZED: 'USER_UNAUTHORIZED'\n} as const;\n\n// 錯誤訊息模板\nexport const ERROR_MESSAGES: Record<string, {\n  title: string;\n  message: string;\n  suggestions: Omit<ErrorSuggestion, 'id'>[];\n}> = {\n  [ERROR_CODES.AI_SERVICE_UNAVAILABLE]: {\n    title: 'AI 服務無法使用',\n    message: 'Ollama AI 服務目前無法連接，請檢查服務是否正在運行。',\n    suggestions: [\n      {\n        title: '檢查 Ollama 服務',\n        description: '確認 Ollama 服務是否已安裝並正在運行',\n        action: {\n          type: 'button',\n          label: '重新連接',\n          handler: async () => {\n            // 重新檢查 Ollama 服務\n            window.location.reload();\n          }\n        },\n        priority: 1\n      },\n      {\n        title: '安裝 Ollama',\n        description: '如果尚未安裝 Ollama，請前往官網下載安裝',\n        action: {\n          type: 'link',\n          label: '前往下載',\n          url: 'https://ollama.ai'\n        },\n        priority: 2\n      }\n    ]\n  },\n  \n  [ERROR_CODES.AI_GENERATION_FAILED]: {\n    title: 'AI 生成失敗',\n    message: 'AI 文本生成過程中發生錯誤，請稍後再試。',\n    suggestions: [\n      {\n        title: '重新生成',\n        description: '嘗試重新生成內容',\n        action: {\n          type: 'button',\n          label: '重試',\n        },\n        priority: 1\n      },\n      {\n        title: '調整生成參數',\n        description: '降低生成長度或調整其他參數可能有助於成功生成',\n        priority: 2\n      }\n    ]\n  },\n  \n  [ERROR_CODES.DATABASE_CONNECTION_FAILED]: {\n    title: '資料庫連接失敗',\n    message: '無法連接到本地資料庫，您的資料可能暫時無法存取。',\n    suggestions: [\n      {\n        title: '重新啟動應用程式',\n        description: '重新啟動可能解決資料庫連接問題',\n        action: {\n          type: 'button',\n          label: '重新啟動',\n          handler: async () => {\n            try {\n              const { api } = await import('../api');\n              await api.system.reloadApp();\n            } catch {\n              window.location.reload();\n            }\n          }\n        },\n        priority: 1\n      },\n      {\n        title: '檢查磁碟空間',\n        description: '確保有足夠的磁碟空間用於資料庫操作',\n        priority: 2\n      }\n    ]\n  },\n  \n  [ERROR_CODES.FILE_PERMISSION_DENIED]: {\n    title: '檔案權限不足',\n    message: '應用程式沒有足夠的權限存取所需的檔案或資料夾。',\n    suggestions: [\n      {\n        title: '以管理員身分執行',\n        description: '嘗試以管理員權限重新啟動應用程式',\n        priority: 1\n      },\n      {\n        title: '檢查檔案權限',\n        description: '確認應用程式資料夾的讀寫權限設定',\n        priority: 2\n      }\n    ]\n  },\n  \n  [ERROR_CODES.NETWORK_OFFLINE]: {\n    title: '網路連線中斷',\n    message: '偵測到網路連線中斷，部分功能可能無法正常使用。',\n    suggestions: [\n      {\n        title: '檢查網路連線',\n        description: '確認您的網路連線是否正常',\n        priority: 1\n      },\n      {\n        title: '離線模式',\n        description: '您仍可以使用本地功能進行創作',\n        priority: 2\n      }\n    ]\n  }\n};\n\n// 進度指示器狀態\nexport interface ProgressState {\n  indicators: ProgressIndicator[];\n  activeIndicators: string[];\n}\n\n// 錯誤狀態\nexport interface ErrorState {\n  errors: AppError[];\n  activeErrors: string[];\n  dismissedErrors: string[];\n  globalErrorHandler: boolean;\n}\n\n// 錯誤處理動作類型\nexport type ErrorAction = \n  | { type: 'ADD_ERROR'; payload: AppError }\n  | { type: 'REMOVE_ERROR'; payload: string }\n  | { type: 'DISMISS_ERROR'; payload: string }\n  | { type: 'RESOLVE_ERROR'; payload: string }\n  | { type: 'CLEAR_ERRORS' }\n  | { type: 'TOGGLE_GLOBAL_HANDLER'; payload: boolean };\n\n// 進度指示器動作類型\nexport type ProgressAction = \n  | { type: 'START_PROGRESS'; payload: Omit<ProgressIndicator, 'id' | 'startTime' | 'status'> }\n  | { type: 'UPDATE_PROGRESS'; payload: { id: string; progress: number; currentStep?: string } }\n  | { type: 'COMPLETE_PROGRESS'; payload: string }\n  | { type: 'FAIL_PROGRESS'; payload: { id: string; error: AppError } }\n  | { type: 'CANCEL_PROGRESS'; payload: string }\n  | { type: 'REMOVE_PROGRESS'; payload: string };","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/global.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[147,150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[147,150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { ElectronAPI } from '../../../electron/main/preload';\n\ndeclare global {\n  interface Window {\n    electronAPI: ElectronAPI;\n    __TAURI__?: any;\n  }\n}\n\nexport {};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/tauri.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[112,115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[112,115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":5,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":5,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[128,131],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[128,131],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":6,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":6,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[155,158],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[155,158],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[235,238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[235,238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[251,254],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[251,254],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[278,281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[278,281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[354,357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[354,357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Tauri 全局類型定義\ndeclare global {\n  interface Window {\n    __TAURI__?: {\n      invoke?: (command: string, args?: any) => Promise<any>;\n      [key: string]: any;\n    };\n    __TAURI_INTERNALS__?: {\n      invoke?: (command: string, args?: any) => Promise<any>;\n      [key: string]: any;\n    };\n    __TAURI_INVOKE__?: (command: string, args?: any) => Promise<any>;\n  }\n}\n\nexport {};","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/types/template.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":95,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":95,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3005,3008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3005,3008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3341,3344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3341,3344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 輕小說模板系統類型定義\n\nexport type TemplateType = 'isekai' | 'school' | 'scifi' | 'fantasy';\n\nexport interface WorldSetting {\n  era: string;                    // 時代背景\n  technology: string;             // 科技水平\n  society: string;                // 社會結構\n  specialElements: string[];      // 特殊元素\n  geography?: string;             // 地理環境\n  culture?: string;               // 文化特色\n  magic?: MagicSystem;            // 魔法系統（如適用）\n  levelSystem?: LevelSystem;      // 等級系統（如適用）\n}\n\nexport interface MagicSystem {\n  type: string;                   // 魔法類型\n  rules: string[];                // 魔法規則\n  limitations: string[];          // 魔法限制\n  schools?: string[];             // 魔法學派\n}\n\nexport interface LevelSystem {\n  type: string;                   // 等級系統類型\n  maxLevel?: number;              // 最高等級\n  attributes: string[];           // 屬性列表\n  skills?: string[];              // 技能列表\n}\n\nexport interface CharacterArchetypeTemplate {\n  name: string;                   // 原型名稱\n  description: string;            // 原型描述\n  personality: string;            // 預設性格\n  appearance?: string;            // 預設外觀\n  background?: string;            // 預設背景\n  suggestedAge?: {                // 建議年齡範圍\n    min: number;\n    max: number;\n  };\n  suggestedGender?: string[];     // 建議性別\n  commonTraits: string[];         // 常見特徵\n  typicalRoles: string[];         // 典型角色\n  tags: string[];                 // 標籤\n}\n\nexport interface PlotFramework {\n  phase: string;                  // 劇情階段\n  description: string;            // 階段描述\n  keyEvents: string[];            // 關鍵事件\n  characterDevelopment?: string;  // 角色發展\n  worldBuilding?: string;         // 世界觀建構\n}\n\nexport interface WritingGuidelines {\n  tone: string;                   // 寫作語調\n  style: string;                  // 寫作風格\n  pacing: string;                 // 節奏控制\n  themes: string[];               // 主要主題\n  commonTropes: string[];         // 常見套路\n  avoidances: string[];           // 應避免的元素\n}\n\nexport interface AIPromptTemplate {\n  context: string;                // 上下文模板\n  characterPrompts: string[];     // 角色相關提示\n  worldPrompts: string[];         // 世界觀相關提示\n  stylePrompts: string[];         // 風格相關提示\n  continuationPrompts: string[];  // 續寫相關提示\n}\n\nexport interface NovelTemplate {\n  id: string;                     // 模板 ID\n  name: string;                   // 模板名稱\n  type: TemplateType;             // 模板類型\n  description: string;            // 模板描述\n  version: string;                // 模板版本\n  createdAt: Date;                // 創建時間\n  updatedAt: Date;                // 更新時間\n  \n  // 核心設定\n  worldSetting: WorldSetting;     // 世界觀設定\n  characterArchetypes: CharacterArchetypeTemplate[];  // 角色原型\n  plotFramework: PlotFramework[]; // 劇情框架\n  writingGuidelines: WritingGuidelines;  // 寫作指導\n  aiPromptTemplate: AIPromptTemplate;    // AI 提示模板\n  \n  // 可選設定\n  sampleContent?: {               // 範例內容\n    opening: string;              // 開場範例\n    dialogue: string[];           // 對話範例\n    description: string[];        // 描述範例\n  };\n  \n  // 自定義設定\n  customSettings?: Record<string, any>;  // 自定義設定\n  isCustom?: boolean;             // 是否為自定義模板\n  isActive?: boolean;             // 是否啟用\n}\n\n// 模板應用結果\nexport interface TemplateApplicationResult {\n  success: boolean;\n  message: string;\n  appliedSettings: {\n    worldSetting: WorldSetting;\n    createdCharacters: string[];  // 創建的角色 ID\n    projectSettings: Record<string, any>;\n  };\n  errors?: string[];\n}\n\n// 模板管理相關\nexport interface TemplateFilters {\n  type?: TemplateType;\n  search?: string;\n  isCustom?: boolean;\n  isActive?: boolean;\n}\n\nexport interface TemplateSortOptions {\n  field: 'name' | 'type' | 'createdAt' | 'updatedAt';\n  direction: 'asc' | 'desc';\n}\n\n// 模板驗證錯誤\nexport interface TemplateValidationError {\n  field: string;\n  message: string;\n  severity: 'error' | 'warning';\n}\n\n// 常量定義\nexport const TEMPLATE_TYPES: Record<TemplateType, string> = {\n  isekai: '異世界轉生',\n  school: '校園戀愛',\n  scifi: '科幻冒險',\n  fantasy: '奇幻冒險'\n};\n\nexport const DEFAULT_TEMPLATE_VERSION = '1.0.0';\n\n// 模板狀態\nexport interface TemplateState {\n  templates: NovelTemplate[];\n  currentTemplate: NovelTemplate | null;\n  loading: boolean;\n  error: string | null;\n  filters: TemplateFilters;\n  sortOptions: TemplateSortOptions;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/utils/dateUtils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]},{"filePath":"/Users/tznthou/Documents/Practice/6 novel writing/src/renderer/src/utils/errorUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[472,475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[472,475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[949,952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[949,952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[979,982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[979,982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1911,1914],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1911,1914],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1941,1944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1941,1944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3216,3219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3216,3219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3246,3249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3246,3249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4210,4213],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4210,4213],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4240,4243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4240,4243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":224,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":224,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5479,5482],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5479,5482],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6325,6328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6325,6328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8062,8065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8062,8065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8080,8083],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8080,8083],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8121,8124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8121,8124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8167,8170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8167,8170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":356,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":356,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8950,8953],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8950,8953],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { AppError, ErrorCategory, ErrorSeverity, ERROR_CODES } from '../types/error';\nimport { store } from '../store/store';\nimport { addError } from '../store/slices/errorSlice';\n\n// 錯誤處理工具類\nexport class ErrorHandler {\n  /**\n   * 創建並分發錯誤\n   */\n  static createError(\n    code: string,\n    message: string,\n    options: {\n      description?: string;\n      severity?: ErrorSeverity;\n      category?: ErrorCategory;\n      context?: Record<string, any>;\n      stack?: string;\n    } = {}\n  ): void {\n    const error: Omit<AppError, 'id' | 'timestamp'> = {\n      code,\n      message,\n      description: options.description,\n      severity: options.severity || 'medium',\n      category: options.category || 'system',\n      context: options.context,\n      stack: options.stack || new Error().stack,\n      resolved: false\n    };\n\n    store.dispatch(addError(error));\n  }\n\n  /**\n   * 處理 API 錯誤\n   */\n  static handleApiError(error: any, context?: Record<string, any>): void {\n    if (error.code === 'NETWORK_ERROR') {\n      this.createError(\n        ERROR_CODES.NETWORK_CONNECTION_FAILED,\n        '網路連接失敗',\n        {\n          description: '無法連接到服務器，請檢查網路連接',\n          severity: 'high',\n          category: 'network',\n          context\n        }\n      );\n    } else if (error.code === 'TIMEOUT') {\n      this.createError(\n        ERROR_CODES.NETWORK_TIMEOUT,\n        '請求超時',\n        {\n          description: '服務器響應時間過長，請稍後再試',\n          severity: 'medium',\n          category: 'network',\n          context\n        }\n      );\n    } else {\n      this.createError(\n        ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        'API 請求失敗',\n        {\n          description: error.message || '未知的 API 錯誤',\n          severity: 'medium',\n          category: 'network',\n          context: { ...context, originalError: error }\n        }\n      );\n    }\n  }\n\n  /**\n   * 處理 AI 相關錯誤\n   */\n  static handleAIError(error: any, context?: Record<string, any>): void {\n    if (error.message?.includes('connection refused')) {\n      this.createError(\n        ERROR_CODES.AI_SERVICE_UNAVAILABLE,\n        'AI 服務無法使用',\n        {\n          description: 'Ollama AI 服務目前無法連接，請檢查服務是否正在運行',\n          severity: 'high',\n          category: 'ai',\n          context\n        }\n      );\n    } else if (error.message?.includes('model not found')) {\n      this.createError(\n        ERROR_CODES.AI_MODEL_NOT_FOUND,\n        'AI 模型不存在',\n        {\n          description: '指定的 AI 模型未找到，請檢查模型是否已安裝',\n          severity: 'medium',\n          category: 'ai',\n          context\n        }\n      );\n    } else if (error.message?.includes('context too long')) {\n      this.createError(\n        ERROR_CODES.AI_CONTEXT_TOO_LONG,\n        '上下文過長',\n        {\n          description: '輸入的文本過長，請縮短內容後重試',\n          severity: 'medium',\n          category: 'ai',\n          context\n        }\n      );\n    } else {\n      this.createError(\n        ERROR_CODES.AI_GENERATION_FAILED,\n        'AI 生成失敗',\n        {\n          description: error.message || 'AI 文本生成過程中發生錯誤',\n          severity: 'medium',\n          category: 'ai',\n          context: { ...context, originalError: error }\n        }\n      );\n    }\n  }\n\n  /**\n   * 處理資料庫錯誤\n   */\n  static handleDatabaseError(error: any, context?: Record<string, any>): void {\n    if (error.code === 'SQLITE_CANTOPEN') {\n      this.createError(\n        ERROR_CODES.DATABASE_CONNECTION_FAILED,\n        '資料庫連接失敗',\n        {\n          description: '無法打開資料庫文件，請檢查文件權限',\n          severity: 'critical',\n          category: 'database',\n          context\n        }\n      );\n    } else if (error.code === 'SQLITE_CORRUPT') {\n      this.createError(\n        ERROR_CODES.DATABASE_CORRUPTION,\n        '資料庫損壞',\n        {\n          description: '資料庫文件已損壞，可能需要修復或重建',\n          severity: 'critical',\n          category: 'database',\n          context\n        }\n      );\n    } else {\n      this.createError(\n        ERROR_CODES.DATABASE_QUERY_FAILED,\n        '資料庫操作失敗',\n        {\n          description: error.message || '資料庫查詢執行失敗',\n          severity: 'high',\n          category: 'database',\n          context: { ...context, originalError: error }\n        }\n      );\n    }\n  }\n\n  /**\n   * 處理檔案系統錯誤\n   */\n  static handleFileSystemError(error: any, context?: Record<string, any>): void {\n    if (error.code === 'ENOENT') {\n      this.createError(\n        ERROR_CODES.FILE_NOT_FOUND,\n        '檔案不存在',\n        {\n          description: '指定的檔案或資料夾不存在',\n          severity: 'medium',\n          category: 'file',\n          context\n        }\n      );\n    } else if (error.code === 'EACCES') {\n      this.createError(\n        ERROR_CODES.FILE_PERMISSION_DENIED,\n        '檔案權限不足',\n        {\n          description: '沒有足夠的權限存取檔案',\n          severity: 'high',\n          category: 'file',\n          context\n        }\n      );\n    } else if (error.code === 'ENOSPC') {\n      this.createError(\n        ERROR_CODES.DISK_SPACE_INSUFFICIENT,\n        '磁碟空間不足',\n        {\n          description: '磁碟空間不足，無法完成操作',\n          severity: 'high',\n          category: 'file',\n          context\n        }\n      );\n    } else {\n      this.createError(\n        ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        '檔案系統錯誤',\n        {\n          description: error.message || '檔案系統操作失敗',\n          severity: 'medium',\n          category: 'file',\n          context: { ...context, originalError: error }\n        }\n      );\n    }\n  }\n\n  /**\n   * 處理驗證錯誤\n   */\n  static handleValidationError(\n    field: string,\n    message: string,\n    context?: Record<string, any>\n  ): void {\n    this.createError(\n      ERROR_CODES.VALIDATION_INVALID_FORMAT,\n      `驗證失敗: ${field}`,\n      {\n        description: message,\n        severity: 'low',\n        category: 'validation',\n        context: { field, ...context }\n      }\n    );\n  }\n}\n\n// 錯誤邊界 HOC\nexport function withErrorBoundary<P extends object>(\n  Component: React.ComponentType<P>,\n  fallback?: React.ComponentType<{ error: Error; resetError: () => void }>\n) {\n  // React 已在頂部導入，不需要 require\n  \n  return class ErrorBoundary extends React.Component<\n    P,\n    { hasError: boolean; error: Error | null }\n  > {\n    constructor(props: P) {\n      super(props);\n      this.state = { hasError: false, error: null };\n    }\n\n    static getDerivedStateFromError(error: Error) {\n      return { hasError: true, error };\n    }\n\n    componentDidCatch(error: Error, errorInfo: any) {\n      ErrorHandler.createError(\n        ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n        '組件渲染錯誤',\n        {\n          description: error.message,\n          severity: 'high',\n          category: 'system',\n          context: {\n            componentStack: errorInfo.componentStack,\n            errorBoundary: true\n          },\n          stack: error.stack\n        }\n      );\n    }\n\n    resetError = () => {\n      this.setState({ hasError: false, error: null });\n    };\n\n    render() {\n      if (this.state.hasError && this.state.error) {\n        if (fallback) {\n          const FallbackComponent = fallback;\n          return React.createElement(FallbackComponent, { \n            error: this.state.error, \n            resetError: this.resetError \n          });\n        }\n\n        return React.createElement('div', {\n          className: 'flex items-center justify-center min-h-screen bg-cosmic-950'\n        }, React.createElement('div', {\n          className: 'text-center p-8'\n        }, [\n          React.createElement('div', {\n            key: 'icon',\n            className: 'text-6xl mb-4'\n          }, '💥'),\n          React.createElement('h2', {\n            key: 'title',\n            className: 'text-2xl font-cosmic text-red-500 mb-4'\n          }, '組件發生錯誤'),\n          React.createElement('p', {\n            key: 'message',\n            className: 'text-gray-400 mb-6'\n          }, this.state.error.message),\n          React.createElement('button', {\n            key: 'button',\n            onClick: this.resetError,\n            className: 'btn-primary'\n          }, '重新載入')\n        ]));\n      }\n\n      return React.createElement(Component, this.props);\n    }\n  };\n}\n\n// 異步錯誤處理裝飾器\nexport function handleAsyncErrors<T extends (...args: any[]) => Promise<any>>(\n  fn: T,\n  errorHandler?: (error: any) => void\n): T {\n  return (async (...args: any[]) => {\n    try {\n      return await fn(...args);\n    } catch (error) {\n      if (errorHandler) {\n        errorHandler(error);\n      } else {\n        ErrorHandler.createError(\n          ERROR_CODES.SYSTEM_UNKNOWN_ERROR,\n          '異步操作失敗',\n          {\n            description: error instanceof Error ? error.message : String(error),\n            severity: 'medium',\n            category: 'system',\n            context: { functionName: fn.name, args },\n            stack: error instanceof Error ? error.stack : undefined\n          }\n        );\n      }\n      throw error;\n    }\n  }) as T;\n}\n\n// 重試機制\nexport async function retryWithBackoff<T>(\n  fn: () => Promise<T>,\n  maxRetries: number = 3,\n  baseDelay: number = 1000,\n  backoffFactor: number = 2\n): Promise<T> {\n  let lastError: any;\n\n  for (let attempt = 0; attempt <= maxRetries; attempt++) {\n    try {\n      return await fn();\n    } catch (error) {\n      lastError = error;\n      \n      if (attempt === maxRetries) {\n        break;\n      }\n\n      const delay = baseDelay * Math.pow(backoffFactor, attempt);\n      await new Promise(resolve => setTimeout(resolve, delay));\n    }\n  }\n\n  throw lastError;\n}","usedDeprecatedRules":[{"ruleId":"no-extra-semi","replacedBy":[]},{"ruleId":"no-mixed-spaces-and-tabs","replacedBy":[]}]}]
