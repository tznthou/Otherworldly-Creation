#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üì¶ ÊâãÂãïÊâìÂåÖ Genesis Chronicle...\n');

// Ê™¢Êü•ÂøÖË¶ÅÊñá‰ª∂
const requiredFiles = [
  'dist/main.js',
  'dist/renderer/index.html',
  'package.json'
];

console.log('üîç Ê™¢Êü•ÊßãÂª∫Êñá‰ª∂...');
for (const file of requiredFiles) {
  if (!fs.existsSync(file)) {
    console.error(`‚ùå Áº∫Â∞ëÂøÖË¶ÅÊñá‰ª∂: ${file}`);
    console.log('Ë´ãÂÖàÂü∑Ë°å: npm run build');
    process.exit(1);
  }
}
console.log('‚úÖ ÊßãÂª∫Êñá‰ª∂Ê™¢Êü•ÂÆåÊàê');

// ÂâµÂª∫Ëº∏Âá∫ÁõÆÈåÑ
const outDir = './out/genesis-chronicle-manual';
if (fs.existsSync(outDir)) {
  fs.rmSync(outDir, { recursive: true });
}
fs.mkdirSync(outDir, { recursive: true });

console.log('üìÅ ÂâµÂª∫ÊáâÁî®Á®ãÂºèÁõÆÈåÑÁµêÊßã...');

// Ë§áË£ΩÂøÖË¶ÅÊñá‰ª∂
const filesToCopy = [
  { src: 'dist/', dest: 'dist/' },
  { src: 'package.json', dest: 'package.json' },
  { src: 'assets/', dest: 'assets/' },
  { src: 'node_modules/', dest: 'node_modules/' }
];

for (const file of filesToCopy) {
  const srcPath = file.src;
  const destPath = path.join(outDir, file.dest);
  
  if (fs.existsSync(srcPath)) {
    console.log(`   Ë§áË£Ω ${srcPath} -> ${destPath}`);
    
    if (fs.statSync(srcPath).isDirectory()) {
      fs.mkdirSync(path.dirname(destPath), { recursive: true });
      execSync(`cp -r "${srcPath}" "${destPath}"`, { stdio: 'pipe' });
    } else {
      fs.mkdirSync(path.dirname(destPath), { recursive: true });
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

// ÂâµÂª∫ÂïüÂãïËÖ≥Êú¨
console.log('üìù ÂâµÂª∫ÂïüÂãïËÖ≥Êú¨...');

// macOS/Linux ÂïüÂãïËÖ≥Êú¨
const startScript = `#!/bin/bash
cd "$(dirname "$0")"
echo "ÂïüÂãï Genesis Chronicle..."
echo "Ê™¢Êü• Node.js..."
node --version
echo "Ê™¢Êü• npm..."
npm --version
echo "ÂÆâË£ù‰æùË≥¥ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ..."
npm install --production
echo "ÂïüÂãïÊáâÁî®Á®ãÂºè..."
./node_modules/.bin/electron dist/main.js
`;

fs.writeFileSync(path.join(outDir, 'start.sh'), startScript);
fs.chmodSync(path.join(outDir, 'start.sh'), '755');

// Windows ÂïüÂãïËÖ≥Êú¨
const startBat = `@echo off
cd /d "%~dp0"
echo ÂïüÂãï Genesis Chronicle...
echo Ê™¢Êü• Node.js...
node --version
echo Ê™¢Êü• npm...
npm --version
echo ÂÆâË£ù‰æùË≥¥ÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ...
npm install --production
echo ÂïüÂãïÊáâÁî®Á®ãÂºè...
.\\node_modules\\.bin\\electron.cmd dist\\main.js
pause
`;

fs.writeFileSync(path.join(outDir, 'start.bat'), startBat);

// ÂâµÂª∫ README
const readme = `# Genesis Chronicle - Ââµ‰∏ñÁ¥ÄÂÖÉÔºöÁï∞‰∏ñÁïåÂâµ‰ΩúÁ•ûÂô®

## ÂÆâË£ùË™™Êòé

### ÂâçÁΩÆÈúÄÊ±Ç
- Node.js 16 ÊàñÊõ¥È´òÁâàÊú¨
- npm Êàñ yarn

### ÂïüÂãïÊáâÁî®Á®ãÂºè

#### macOS/Linux
\`\`\`bash
chmod +x start.sh
./start.sh
\`\`\`

#### Windows
ÈõôÊìä \`start.bat\` ÊàñÂú®ÂëΩ‰ª§ÊèêÁ§∫Â≠óÂÖÉ‰∏≠Âü∑Ë°åÔºö
\`\`\`cmd
start.bat
\`\`\`

#### ÊâãÂãïÂïüÂãï
\`\`\`bash
npm install
npx electron dist/main.js
\`\`\`

## ÂäüËÉΩÁâπËâ≤
- Âü∫Êñº AI ÁöÑËºïÂ∞èË™™Ââµ‰ΩúËºîÂä©
- ÊîØÊè¥Áï∞‰∏ñÁïå„ÄÅÊ†°Âúí„ÄÅÁßëÂπªÁ≠âÂ§öÁ®ÆÈ°åÊùê
- Á´†ÁØÄÂºèÂØ´‰ΩúÁÆ°ÁêÜ
- ËßíËâ≤Èóú‰øÇÁÆ°ÁêÜ
- Ê®°ÊùøÁ≥ªÁµ±

## Á≥ªÁµ±ÈúÄÊ±Ç
- ‰ΩúÊ•≠Á≥ªÁµ±: Windows 10+, macOS 10.15+, Êàñ Linux (Ubuntu 18.04+)
- Ë®òÊÜ∂È´î: ÊúÄÂ∞ë 4GB RAMÔºåÂª∫Ë≠∞ 8GB+
- ÂÑ≤Â≠òÁ©∫Èñì: Ëá≥Â∞ë 500MB ÂèØÁî®Á©∫Èñì
- Á∂≤Ë∑Ø: ÈúÄË¶ÅÁ∂≤Ë∑ØÈÄ£Êé•‰ª•‰ΩøÁî® AI ÂäüËÉΩÔºàOllamaÔºâ

## Ê≥®ÊÑè‰∫ãÈ†Ö
- È¶ñÊ¨°‰ΩøÁî®ÂâçË´ãÁ¢∫‰øùÂ∑≤ÂÆâË£ù‰∏¶ÈÖçÁΩÆ Ollama
- Âª∫Ë≠∞ÂÆöÊúüÂÇô‰ªΩÊÇ®ÁöÑÂâµ‰ΩúÂÖßÂÆπ
- Â¶ÇÈÅáÂïèÈ°åË´ãÊü•ÁúãÊáâÁî®Á®ãÂºèÂÖßÁöÑÂπ´Âä©ÊñáÊ™î

## ÁâàÊú¨Ë≥áË®ä
- ÁâàÊú¨: ${JSON.parse(fs.readFileSync('package.json', 'utf8')).version}
- ÊßãÂª∫Êó•Êúü: ${new Date().toLocaleString('zh-TW')}
- Âπ≥Âè∞: ${process.platform}
`;

fs.writeFileSync(path.join(outDir, 'README.md'), readme);

// ÂâµÂª∫Á∞°ÂåñÁöÑ package.jsonÔºàÂè™ÂåÖÂê´ÈÅãË°åÊôÇ‰æùË≥¥Ôºâ
const originalPackage = JSON.parse(fs.readFileSync('package.json', 'utf8'));
const runtimePackage = {
  name: originalPackage.name,
  version: originalPackage.version,
  description: originalPackage.description,
  main: originalPackage.main,
  author: originalPackage.author,
  license: originalPackage.license,
  dependencies: originalPackage.dependencies
};

fs.writeFileSync(
  path.join(outDir, 'package.json'), 
  JSON.stringify(runtimePackage, null, 2)
);

console.log('\nüéâ ÊâãÂãïÊâìÂåÖÂÆåÊàêÔºÅ');
console.log(`üìÅ Ëº∏Âá∫‰ΩçÁΩÆ: ${outDir}`);
console.log('\nüìã ÂåÖÂê´Êñá‰ª∂:');

function listFiles(dir, prefix = '') {
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stats = fs.statSync(filePath);
    if (stats.isDirectory()) {
      console.log(`${prefix}üìÇ ${file}/`);
      if (file !== 'node_modules') { // ‰∏çÂ±ïÈñã node_modules
        listFiles(filePath, prefix + '  ');
      }
    } else {
      const size = (stats.size / 1024).toFixed(1);
      console.log(`${prefix}üìÑ ${file} (${size} KB)`);
    }
  });
}

listFiles(outDir);

console.log('\nüí° ‰ΩøÁî®Ë™™Êòé:');
console.log('   1. ÈÄ≤ÂÖ•Ëº∏Âá∫ÁõÆÈåÑ');
console.log('   2. Âü∑Ë°å npm installÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ');
console.log('   3. Âü∑Ë°åÂïüÂãïËÖ≥Êú¨ÊàñÊâãÂãïÂïüÂãï');
console.log('   4. ÂèØ‰ª•Â∞áÊï¥ÂÄãÁõÆÈåÑÊâìÂåÖÂàÜÁôº');

// Ë®àÁÆóÁ∏ΩÂ§ßÂ∞è
function calculateSize(dir) {
  let totalSize = 0;
  const files = fs.readdirSync(dir);
  files.forEach(file => {
    const filePath = path.join(dir, file);
    const stats = fs.statSync(filePath);
    if (stats.isDirectory()) {
      totalSize += calculateSize(filePath);
    } else {
      totalSize += stats.size;
    }
  });
  return totalSize;
}

const totalSize = calculateSize(outDir);
console.log(`\nüìä Á∏ΩÂ§ßÂ∞è: ${(totalSize / 1024 / 1024).toFixed(2)} MB`);