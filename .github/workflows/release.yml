name: 🚀 Release

on:
  push:
    tags: ['v*']

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🎉 Create Release
        id: create_release
        run: |
          RELEASE_BODY="🎮 **創世紀元 - 異世界創作神器 v${{ steps.get_version.outputs.VERSION }}**

          ## 📦 安裝包下載

          ### 🍎 macOS 版本 (支援 Intel + Apple Silicon)
          
          #### 🥇 **強烈推薦：DMG 格式** ⭐
          - **genesis-chronicle_v${{ steps.get_version.outputs.VERSION }}_universal.dmg**
          - ✅ **最佳用戶體驗** - 拖放到 Applications 即可
          - ✅ **無需權限** - 不需要管理員密碼
          - ✅ **即裝即用** - macOS 標準安裝方式
          - ✅ **Tauri 原生支援** - 更穩定可靠
          
          #### 🏢 **Legacy 支援：PKG 格式**
          - **genesis-chronicle_v${{ steps.get_version.outputs.VERSION }}_universal.pkg**
          - ⚠️ **特殊用途** - 主要供企業環境使用
          - ✅ **批次部署** - 適合 IT 管理員
          - ℹ️ **一般用戶請優先選擇 DMG 格式**

          **系統需求**：macOS 10.12+

          ### 🪟 Windows 版本  
          - **genesis-chronicle_v${{ steps.get_version.outputs.VERSION }}_x64.msi**
          - 64位元 Windows 安裝程式
          - 系統需求：Windows 10+

          ## 🆕 本版本改進

          ### 🔧 安裝系統全面升級
          - ⭐ **DMG 格式成為主要推薦**：提供 macOS 用戶最佳安裝體驗
          - ✅ **PKG 格式轉為 Legacy 支援**：保留企業環境使用需求
          - ✅ **版本統一管理**：所有平台版本號完全一致
          - ✅ **自動化流程**：GitHub Actions 全自動建置和發布

          ### 💡 安裝建議
          - **🥇 一般用戶**：強烈推薦使用 **DMG 格式**，拖放到 Applications 即可
          - **🏢 企業用戶**：如有批次部署需求，可選擇 PKG 格式
          - **✨ 最佳體驗**：DMG 格式已成為主要推薦選項！

          ## ✨ 主要功能
          - 🤖 **5大AI供應商整合** (Ollama, OpenAI, Gemini, Claude, OpenRouter)
          - 📚 **智能小說創作輔助** - AI驅動的創作靈感
          - 📄 **EPUB/PDF 雙格式匯出** - 專業排版輸出
          - 🎭 **角色分析與劇情追蹤** - 深度角色一致性分析
          - 🎨 **AI 插畫生成** - 視覺化你的故事世界
          - 💾 **自動儲存與備份** - 永不遺失創作成果

          ---

          🔥 **讓AI成為你的創作夥伴，開啟異世界冒險！**
          
          📝 **版本統一保證**：本次發布所有平台版本號均為 v${{ steps.get_version.outputs.VERSION }}，徹底解決版本不一致問題！"
          
          # 使用 gh CLI 創建 release
          RELEASE_OUTPUT=$(gh release create ${{ steps.get_version.outputs.VERSION }} \
            --title "Genesis Chronicle ${{ steps.get_version.outputs.VERSION }}" \
            --notes "$RELEASE_BODY" \
            --draft=false \
            --prerelease=false)
          
          # 取得 upload URL (雖然 gh CLI 不需要，但保持相容性)
          UPLOAD_URL=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.VERSION }} --jq .upload_url)
          echo "upload_url=$UPLOAD_URL" >> $GITHUB_OUTPUT
          echo "id=$(gh api repos/${{ github.repository }}/releases/tags/${{ steps.get_version.outputs.VERSION }} --jq .id)" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-macos:
    needs: create-release
    runs-on: macos-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Setup version environment
        run: |
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "PKG_VERSION=$VERSION" >> $GITHUB_ENV
          echo "📦 Release version: $VERSION"

      - name: 🔄 Sync versions across all configs
        run: node scripts/sync-version.js

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: 📦 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🔧 Install Tauri CLI
        run: |
          if ! command -v cargo-tauri &> /dev/null; then
            echo "Installing Tauri CLI..."
            cargo install tauri-cli --version "^2.0"
          else
            echo "Tauri CLI already installed: $(cargo tauri --version)"
          fi

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build frontend
        run: npm run build:renderer

      - name: 🔨 Build Tauri app (DMG + App)
        run: |
          echo "🚀 Building Tauri app with DMG support..."
          cd src-tauri
          cargo tauri build --target universal-apple-darwin
          echo "✅ Tauri build completed"

      - name: 📦 Create PKG installer
        run: |
          echo "🔍 Looking for generated .app file..."
          APP_PATH=$(find src-tauri/target -name "genesis-chronicle.app" -type d | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "❌ Error: genesis-chronicle.app not found"
            echo "🔍 Debug: Searching for any genesis-chronicle files:"
            find src-tauri/target -name "*genesis-chronicle*" -type f | head -10
            exit 1
          fi
          
          echo "✅ Found app at: $APP_PATH"
          
          # 創建 PKG 輸出目錄
          mkdir -p dist
          
          # 創建 PKG
          chmod +x ./scripts/create-pkg.sh
          PKG_NAME="genesis-chronicle_v${RELEASE_VERSION}_universal.pkg"
          echo "📦 Creating PKG: $PKG_NAME"
          ./scripts/create-pkg.sh "$APP_PATH" "dist/$PKG_NAME"

      - name: 🔍 Verify build artifacts
        run: |
          echo "🔍 Checking build artifacts:"
          echo ""
          echo "📁 DMG files:"
          find src-tauri/target -name "*.dmg" -type f | while read -r dmg; do
            echo "   ✅ $(basename "$dmg") ($(du -h "$dmg" | cut -f1))"
          done
          echo ""
          echo "📁 PKG files:"
          find dist -name "*.pkg" -type f | while read -r pkg; do
            echo "   ✅ $(basename "$pkg") ($(du -h "$pkg" | cut -f1))"
          done
          echo ""
          
          # 檢查是否至少有一個 DMG 和一個 PKG
          DMG_COUNT=$(find src-tauri/target -name "*.dmg" -type f | wc -l)
          PKG_COUNT=$(find dist -name "*.pkg" -type f | wc -l)
          
          if [ "$DMG_COUNT" -eq 0 ]; then
            echo "❌ Error: No DMG files found"
            exit 1
          fi
          
          if [ "$PKG_COUNT" -eq 0 ]; then
            echo "❌ Error: No PKG files found"
            exit 1
          fi
          
          echo "✅ Build verification passed: $DMG_COUNT DMG(s) + $PKG_COUNT PKG(s)"

      - name: 📤 Upload Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          files: |
            src-tauri/target/universal-apple-darwin/release/bundle/dmg/*.dmg
            dist/*.pkg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    needs: create-release
    runs-on: windows-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Setup version environment
        run: |
          $VERSION = "${{ github.ref }}".Replace("refs/tags/v", "")
          echo "RELEASE_VERSION=$VERSION" >> $env:GITHUB_ENV
          echo "📦 Release version: $VERSION"

      - name: 🔄 Sync versions across all configs
        run: node scripts/sync-version.js

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: 📦 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🔧 Install Tauri CLI
        run: |
          if (!(Get-Command "cargo-tauri" -ErrorAction SilentlyContinue)) {
            Write-Output "Installing Tauri CLI..."
            cargo install tauri-cli --version "^2.0"
          } else {
            $version = cargo tauri --version
            Write-Output "Tauri CLI already installed: $version"
          }

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build frontend
        run: npm run build:renderer

      - name: 🔨 Build Tauri app (MSI)
        run: |
          echo "🚀 Building Tauri app for Windows..."
          cd src-tauri
          cargo tauri build --target x86_64-pc-windows-msvc
          echo "✅ Tauri Windows build completed"

      - name: 🔍 Verify Windows build artifacts
        run: |
          echo "🔍 Checking Windows build artifacts:"
          Get-ChildItem -Path "src-tauri/target" -Recurse -Include "*.msi" | ForEach-Object {
            $size = [math]::Round($_.Length / 1MB, 2)
            echo "   ✅ $($_.Name) ($size MB)"
          }

      - name: 📤 Upload Windows Release Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.RELEASE_VERSION }}
          files: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}