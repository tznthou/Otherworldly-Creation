name: 🚀 Build and Release Genesis Chronicle

on:
  push:
    tags:
      - 'v*.*.*'  # 觸發條件：推送版本標籤 (例如: v1.0.1)
  workflow_dispatch: # 允許手動觸發

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  # 建立版本資訊
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create-release.outputs.id }}
      release_upload_url: ${{ steps.create-release.outputs.upload_url }}
      release_body: "${{ steps.tag.outputs.message }}"

    steps:
      - uses: actions/checkout@v4

      - name: 🏷️ Get version from tag
        id: tag
        run: |
          echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"
          echo "::set-output name=message::Release ${GITHUB_REF#refs/tags/v}"

      - name: 📝 Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "創世紀元 Genesis Chronicle v${{ steps.tag.outputs.version }}"
          body: |
            ## 🎉 創世紀元：異世界創作神器 v${{ steps.tag.outputs.version }}
            
            ### ✨ 核心功能
            - 🤖 **多AI整合**: 支援Ollama、OpenAI、Claude、Gemini、OpenRouter
            - 📚 **智能寫作**: Context-aware文本生成與角色分析
            - 📖 **專業導出**: EPUB 3.0電子書 + 嵌入式中文字型PDF
            - 🎭 **劇情分析**: NLP驅動的角色一致性檢測
            - 💾 **自動備份**: 2秒自動保存 + SQLite數據庫
            
            ### 📦 下載說明
            - **macOS**: 下載 `genesis-chronicle_v${{ steps.tag.outputs.version }}_universal.dmg` (支援Intel + Apple Silicon)
            - **Windows**: 下載 `genesis-chronicle_v${{ steps.tag.outputs.version }}_x64_en-US.msi`
            - **便攜版**: 下載對應的 `.zip` 文件
            
            ### 🔧 系統需求
            - **macOS**: 10.11+ (El Capitan)
            - **Windows**: Windows 10+ (64位元)
            - **記憶體**: 最少2GB，建議4GB+
            
            ---
            🌟 **創世從未如此簡單，讓AI成為你的創作夥伴！**
          draft: false
          prerelease: false

  # 多平台構建
  build-tauri:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target universal-apple-darwin'
            rust-target: universal-apple-darwin
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
            rust-target: x86_64-pc-windows-msvc

    runs-on: ${{ matrix.platform }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.rust-target }}

      - name: 📦 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🏗️ Install frontend dependencies
        run: npm ci

      - name: 🔧 Build frontend
        run: npm run build:renderer

      # macOS專用設定
      - name: 🍎 Install Apple Developer Certificate (macOS)
        if: matrix.platform == 'macos-latest'
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 如果沒有憑證，跳過簽名
          if [ -z "$BUILD_CERTIFICATE_BASE64" ]; then
            echo "⚠️ No signing certificate provided, building unsigned"
            exit 0
          fi
          
          # 建立變數
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # 匯入憑證
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          
          # 建立keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # 匯入憑證到keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

      - name: 🔨 Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # macOS簽名設定 (可選)
          APPLE_CERTIFICATE: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.P12_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          args: ${{ matrix.args }}
          releaseId: ${{ needs.create-release.outputs.release_id }}

      # 清理敏感資料 (macOS)
      - name: 🧹 Clean up keychain (macOS)
        if: matrix.platform == 'macos-latest' && always()
        run: |
          if [ -f "$RUNNER_TEMP/app-signing.keychain-db" ]; then
            security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          fi

  # 構建後驗證
  post-build:
    needs: [create-release, build-tauri]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: 🎉 Build Status
        run: |
          echo "🚀 Genesis Chronicle 構建完成！"
          echo "📦 Release ID: ${{ needs.create-release.outputs.release_id }}"
          echo "🔗 Release URL: https://github.com/${{ github.repository }}/releases"