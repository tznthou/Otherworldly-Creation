name: 🚀 Signed Release

on:
  push:
    tags: ['v*-signed']

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🏷️ Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: 🎉 Create Signed Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Genesis Chronicle ${{ steps.get_version.outputs.VERSION }} (Signed)
          body: |
            🎮 **創世紀元 - 異世界創作神器** (Apple 官方簽名版)
            
            ## 📦 安裝包下載 - 官方簽名版本
            
            ### 🍎 macOS 版本 (已簽名)
            - **genesis-chronicle-${{ steps.get_version.outputs.VERSION }}-universal-signed.dmg**
            - ✅ Apple 官方代碼簽名
            - ✅ 已通過公證 (Notarized)
            - ✅ 可直接安裝，無安全警告
            - 支援 Intel + Apple Silicon Mac
            - 系統需求：macOS 10.15+
            
            ### 🪟 Windows 版本  
            - **genesis-chronicle-${{ steps.get_version.outputs.VERSION }}-x64.msi**
            - 64位元 Windows 安裝程式
            - 系統需求：Windows 10+
            
            ## ✨ 主要功能
            - 🤖 5大AI供應商整合 (Ollama, OpenAI, Gemini, Claude, OpenRouter)
            - 📚 智能小說創作輔助
            - 📄 EPUB/PDF 雙格式匯出
            - 🎭 角色分析與劇情追蹤
            - 💾 自動儲存與備份
            
            ## 🔒 安全性
            - ✅ Apple 開發者 ID 簽名
            - ✅ 通過 Apple 公證系統
            - ✅ 無需手動解除安全限制
            
            ---
            
            🔥 **官方簽名版本 - 安裝更安全，使用更放心！**
          draft: false
          prerelease: false

  build-macos-signed:
    needs: create-release
    runs-on: macos-latest
    timeout-minutes: 45
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin,x86_64-apple-darwin

      - name: 📦 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build frontend
        run: npm run build:renderer

      # 🔑 Apple 代碼簽名設定
      - name: 🍎 Import Apple Developer Certificate
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # 創建臨時 keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          
          # 導入 Apple 開發者憑證
          echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
          security import certificate.p12 -k build.keychain -P "$APPLE_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          
          # 列出可用的簽名身份
          security find-identity -v

      - name: 🔨 Build and Sign Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          releaseId: ${{ needs.create-release.outputs.release_id }}
          # Tauri 會自動使用找到的簽名身份進行簽名和公證

      # 🧹 清理
      - name: 🧹 Cleanup
        if: always()
        run: |
          security delete-keychain build.keychain
          rm -f certificate.p12

  build-windows:
    needs: create-release
    runs-on: windows-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🦀 Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: 📦 Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build frontend
        run: npm run build:renderer

      - name: 🔨 Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: '--target x86_64-pc-windows-msvc'
          releaseId: ${{ needs.create-release.outputs.release_id }}