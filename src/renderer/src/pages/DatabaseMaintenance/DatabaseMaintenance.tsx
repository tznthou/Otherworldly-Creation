import React, { useState, useEffect } from 'react';
import { useDispatch } from 'react-redux';
import { Card, CardContent, CardHeader, CardTitle } from '../../components/UI/Card';
import { Button } from '../../components/UI/Button';
import { Badge } from '../../components/UI/Badge';
import { Progress } from '../../components/UI/Progress';
import { Alert, AlertDescription } from '../../components/UI/Alert';
import ConfirmDialog from '../../components/UI/ConfirmDialog';
// üî• Tauri v2 dialog API - Ê≠£Á¢∫Ë™ûÊ≥ï
import { save, open } from '@tauri-apps/plugin-dialog';
import { addNotification } from '../../store/slices/uiSlice';
import { AppDispatch } from '../../store/store';
import api from '../../api';

// Ë≥áÊñôÂ∫´‰øÆÂæ©ÁµêÊûúÈ°ûÂûã
interface RepairResult {
  success: boolean;
  message: string;
  issuesFixed?: number;
  errors?: string[];
  warnings?: string[];
}
import { 
  Database, 
  CheckCircle, 
  AlertTriangle, 
  XCircle, 
  RefreshCw, 
  Download, 
  Upload,
  BarChart3,
  Settings,
  FileText,
  Zap,
  ToggleLeft,
  ToggleRight
} from 'lucide-react';

interface DatabaseIssue {
  type: 'integrity' | 'orphan' | 'corruption' | 'constraint' | 'performance';
  severity: 'low' | 'medium' | 'high' | 'critical';
  table: string;
  description: string;
  suggestion: string;
  autoFixable: boolean;
}

interface DatabaseStatistics {
  totalProjects: number;
  totalChapters: number;
  totalCharacters: number;
  totalTemplates: number;
  databaseSize: number;
  lastVacuum: string | null;
  fragmentationLevel: number;
  journalMode?: string;
  isWalMode?: boolean;
}

interface DatabaseCheckResult {
  isHealthy: boolean;
  issues: DatabaseIssue[];
  statistics: DatabaseStatistics;
  timestamp: string;
}

const DatabaseMaintenance: React.FC = () => {
  const dispatch = useDispatch<AppDispatch>();
  const [checkResult, setCheckResult] = useState<DatabaseCheckResult | null>(null);
  const [isChecking, setIsChecking] = useState(false);
  const [isRepairing, setIsRepairing] = useState(false);
  const [isOptimizing, setIsOptimizing] = useState(false);
  const [isExporting, setIsExporting] = useState(false);
  const [isImporting, setIsImporting] = useState(false);
  const [isReindexing, setIsReindexing] = useState(false);
  const [isIncrementalVacuuming, setIsIncrementalVacuuming] = useState(false);
  const [isRunningMaintenance, setIsRunningMaintenance] = useState(false);
  const [walModeStatus, setWalModeStatus] = useState<{
    enabled: boolean;
    is_wal_mode: boolean;
    journal_mode: string;
    synchronous: string;
    wal_autocheckpoint: number;
    wal_info?: {
      bytes: number;
      frames: number;
    };
    benefits?: string[];
    recommendations?: string[];
  } | null>(null);
  const [_isLoadingWalStatus, setIsLoadingWalStatus] = useState(false);
  const [isTogglingWalMode, setIsTogglingWalMode] = useState(false);
  const [showWalWarning, setShowWalWarning] = useState(false);
  const [repairResult, setRepairResult] = useState<RepairResult | null>(null);
  const [errorReport, setErrorReport] = useState<string>('');
  const [confirmImport, setConfirmImport] = useState<{show: boolean; filePath: string | null}>({show: false, filePath: null});

  useEffect(() => {
    // È†ÅÈù¢ËºâÂÖ•ÊôÇËá™ÂãïÂü∑Ë°åÂÅ•Â∫∑Ê™¢Êü•ÂíåËºâÂÖ• WAL ÁãÄÊÖã
    performHealthCheck();
    loadWalModeStatus();
  }, []);

  const performHealthCheck = async () => {
    setIsChecking(true);
    try {
      const result = await api.database.healthCheck();
      // ‰ΩøÁî®ÂæåÁ´ØÊ≠£Á¢∫ÁöÑËøîÂõûÊ†ºÂºè
      const checkResult: DatabaseCheckResult = {
        isHealthy: result.isHealthy || false,
        issues: result.issues || [],
        statistics: result.statistics || { 
          totalProjects: 0, 
          totalChapters: 0, 
          totalCharacters: 0, 
          totalTemplates: 0, 
          databaseSize: 0, 
          lastVacuum: null, 
          fragmentationLevel: 0 
        },
        timestamp: result.timestamp || new Date().toISOString()
      };
      // Â¶ÇÊûúÊ≤íÊúâÁµ±Ë®àË≥áË®ä‰ΩÜÊúâÂïèÈ°åÔºå‰øùÁïôËàäÈÇèËºØ‰ΩúÁÇ∫ÂÇô‰ªΩ
      if (!result.statistics && !result.isHealthy) {
        checkResult.issues = checkResult.issues.length > 0 ? checkResult.issues : [{ 
          type: 'performance' as const, 
          table: 'system',
          description: 'Ë≥áÊñôÂ∫´ÁãÄÊÖãÈúÄË¶ÅÊ≥®ÊÑè', 
          suggestion: 'Ë´ãÂü∑Ë°åË≥áÊñôÂ∫´Á∂≠Ë≠∑‰ª•‰øÆÂæ©ÂïèÈ°å',
          severity: 'medium',
          autoFixable: true
        }];
      }
      setCheckResult(checkResult);
      setRepairResult(null);
    } catch (error) {
      console.error('ÂÅ•Â∫∑Ê™¢Êü•Â§±Êïó:', error);
    } finally {
      setIsChecking(false);
    }
  };

  const loadWalModeStatus = async () => {
    setIsLoadingWalStatus(true);
    try {
      const status = await api.database.getWalModeStatus();
      setWalModeStatus({
        enabled: true,
        is_wal_mode: status.is_wal_mode,
        journal_mode: status.journal_mode,
        synchronous: String(status.synchronous),
        wal_autocheckpoint: status.wal_autocheckpoint,
        wal_info: status.wal_info as { bytes: number; frames: number },
        benefits: Array.isArray(status.benefits) ? status.benefits : (typeof status.benefits === 'object' ? Object.values(status.benefits || {}).flat() : []),
        recommendations: Array.isArray(status.recommendations) ? [status.recommendations] : [status.recommendations || '']
      });
    } catch (error) {
      console.error('ËºâÂÖ• WAL Ê®°ÂºèÁãÄÊÖãÂ§±Êïó:', error);
      setWalModeStatus(null);
    } finally {
      setIsLoadingWalStatus(false);
    }
  };

  // Ê™¢Êü•ÊòØÂê¶ÊúâÂÖ∂‰ªñÊìç‰ΩúÊ≠£Âú®ÈÄ≤Ë°å
  const hasActiveOperation = isRepairing || isOptimizing || isReindexing || 
                             isIncrementalVacuuming || isRunningMaintenance || 
                             isExporting || isImporting;

  const toggleWalMode = async () => {
    if (!walModeStatus) return;
    
    if (hasActiveOperation) {
      dispatch(addNotification({
        type: 'warning',
        title: 'WAL Ê®°ÂºèÂàáÊèõÂª∂ÈÅ≤',
        message: 'Ë´ãÁ≠âÂæÖÁï∂ÂâçË≥áÊñôÂ∫´Êìç‰ΩúÂÆåÊàêÂæåÂÜçÂòóË©¶ÂàáÊèõ WAL Ê®°Âºè'
      }));
      return;
    }

    // üî• Êñ∞Â¢ûÔºöÂïüÁî® WAL Ê®°ÂºèÂâçÁöÑË≠¶ÂëäÊ™¢Êü•
    const currentIsWal = walModeStatus.is_wal_mode;
    const shouldShowWarning = !currentIsWal && !localStorage.getItem('dontShowWalWarning');
    
    if (shouldShowWarning) {
      setShowWalWarning(true);
      return; // Á≠âÂæÖÁî®Êà∂Á¢∫Ë™ç
    }
    
    // Áõ¥Êé•Âü∑Ë°åÂàáÊèõÔºàÁî®Êà∂Â∑≤Á¢∫Ë™çÊàñÊòØÈóúÈñâ WALÔºâ
    await performWalModeToggle();
  };

  // üî• Êñ∞Â¢ûÔºöÂØ¶ÈöõÂü∑Ë°å WAL Ê®°ÂºèÂàáÊèõÁöÑÂáΩÊï∏
  const performWalModeToggle = async () => {
    if (!walModeStatus) return;
    
    setIsTogglingWalMode(true);
    try {
      const currentIsWal = walModeStatus.is_wal_mode;
      const result = await api.database.setWalMode(!currentIsWal);
      
      dispatch(addNotification({
        type: 'success',
        title: `${!currentIsWal ? 'ÂïüÁî®' : 'ÂÅúÁî®'} WAL Ê®°ÂºèÊàêÂäü`,
        message: result
      }));
      
      // ÂàáÊèõÂæåÈáçÊñ∞ËºâÂÖ•ÁãÄÊÖãÂíåÂÅ•Â∫∑Ê™¢Êü•
      await Promise.all([
        loadWalModeStatus(),
        performHealthCheck()
      ]);
      
    } catch (error) {
      console.error('ÂàáÊèõ WAL Ê®°ÂºèÂ§±Êïó:', error);
      const errorMessage = error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§';
      
      // üî• Ê†πÊìöÈåØË™§È°ûÂûãÊèê‰æõ‰∏çÂêåÁöÑÂª∫Ë≠∞
      if (errorMessage.includes('Ë≥áÊñôÂ∫´Ê≠£Âú®Ë¢´ÂÖ∂‰ªñÊìç‰Ωú‰ΩøÁî®')) {
        const currentIsWal = walModeStatus.is_wal_mode;
        dispatch(addNotification({
          type: 'warning',
          title: 'WAL Ê®°ÂºèÂàáÊèõÊö´ÊôÇÁÑ°Ê≥ïÂü∑Ë°å',
          message: currentIsWal 
            ? 'WAL Ê®°ÂºèÂïüÁî®ÂæåÂæàÈõ£Âú®ÈÅãË°åÊôÇÈóúÈñâ„ÄÇÂª∫Ë≠∞ÈáçÊñ∞ÂïüÂãïÊáâÁî®Á®ãÂºè‰ª•ÈáãÊîæÊâÄÊúâË≥áÊñôÂ∫´ÈÄ£Êé•ÔºåÁÑ∂ÂæåÂÜçÂòóË©¶ÂàáÊèõÊ®°Âºè„ÄÇ'
            : 'Ë´ãÁ≠âÂæÖÊâÄÊúâË≥áÊñôÂ∫´Á∂≠Ë≠∑Êìç‰ΩúÂÆåÊàêÂæåÂÜçË©¶„ÄÇÂ¶ÇÊûúÊ≤íÊúâÂÖ∂‰ªñÊìç‰ΩúÂú®ÈÄ≤Ë°åÔºåÂèØËÉΩÈúÄË¶ÅÈáçÊñ∞ÂïüÂãïÊáâÁî®Á®ãÂºè‰ª•ÈáãÊîæË≥áÊñôÂ∫´ÈéñÂÆö„ÄÇ',
          autoClose: false
        }));
      } else {
        dispatch(addNotification({
          type: 'error',
          title: 'WAL Ê®°ÂºèÂàáÊèõÂ§±Êïó',
          message: `ÂàáÊèõÂ§±Êïó: ${errorMessage}`
        }));
      }
    } finally {
      setIsTogglingWalMode(false);
    }
  };

  // üî• Êñ∞Â¢ûÔºöWAL Ë≠¶ÂëäÂ∞çË©±Ê°ÜËôïÁêÜÂáΩÊï∏
  const handleWalWarningConfirm = async (dontShowAgain: boolean = false) => {
    if (dontShowAgain) {
      localStorage.setItem('dontShowWalWarning', 'true');
    }
    setShowWalWarning(false);
    await performWalModeToggle();
  };

  const handleWalWarningCancel = () => {
    setShowWalWarning(false);
  };

  const performAutoRepair = async () => {
    console.log('performAutoRepair called, checkResult:', checkResult);
    console.log('checkResult?.issues:', checkResult?.issues);
    console.log('checkResult?.issues.length:', checkResult?.issues?.length);
    
    if (!checkResult || !checkResult.issues.length) {
      console.log('Early return: no checkResult or no issues');
      dispatch(addNotification({
        type: 'warning',
        title: 'ÁÑ°Ê≥ïÂü∑Ë°åËá™Âãï‰øÆÂæ©',
        message: 'Ê≤íÊúâÊ™¢Ê∏¨Âà∞ÂèØ‰øÆÂæ©ÁöÑÂïèÈ°åÔºåË´ãÂÖàÂü∑Ë°åÂÅ•Â∫∑Ê™¢Êü•'
      }));
      return;
    }

    setIsRepairing(true);
    try {
      // autoRepair ÊñπÊ≥ï‰∏çÂ≠òÂú®Ôºå‰ΩøÁî® runMaintenance ‰ª£Êõø
      const result = await api.database.runMaintenance();
      
      console.log('API result:', result);
      
      // Â∞á String ÁµêÊûúËΩâÊèõÁÇ∫ RepairResult Ê†ºÂºè
      const repairResult: RepairResult = {
        success: typeof result === 'string' && result.includes('ÂÆåÊàê'),
        message: typeof result === 'string' ? result : '‰øÆÂæ©Êìç‰ΩúÂÆåÊàê',
        issuesFixed: checkResult?.issues.filter(issue => issue.autoFixable).length || 0
      };
      setRepairResult(repairResult);
      
      console.log('repairResult:', repairResult);
      
      // üî• Á∞°ÂåñÈÇèËºØÔºöAPI ÊàêÂäüÂ∞±È°ØÁ§∫ÊàêÂäüÈÄöÁü•
      dispatch(addNotification({
        type: 'success',
        title: 'Ë≥áÊñôÂ∫´Ëá™Âãï‰øÆÂæ©ÊàêÂäü',
        message: `${repairResult.message}ÔºåÂ∑≤‰øÆÂæ© ${repairResult.issuesFixed} ÂÄãÂïèÈ°å`
      }));
      
      // ‰øÆÂæ©ÂæåÈáçÊñ∞Ê™¢Êü•ÂÅ•Â∫∑ÁãÄÊÖã
      await performHealthCheck();
    } catch (error) {
      console.error('Ëá™Âãï‰øÆÂæ©Â§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'Ëá™Âãï‰øÆÂæ©Â§±Êïó',
        message: `‰øÆÂæ©Â§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setIsRepairing(false);
    }
  };

  const optimizeDatabase = async () => {
    setIsOptimizing(true);
    try {
      // optimize ÊñπÊ≥ï‰∏çÂ≠òÂú®Ôºå‰ΩøÁî® runMaintenance ‰ª£Êõø
      const result = await api.database.runMaintenance();
      // Ê™¢Êü•ÁµêÊûúÊòØÂê¶ÊàêÂäüÔºàString È°ûÂûã‰∏îÂåÖÂê´ÊàêÂäüË®äÊÅØÔºâ
      const isSuccess = typeof result === 'string' && result.includes('ÂÆåÊàê');
      if (isSuccess) {
        // ÂÑ™ÂåñÊàêÂäüÂæåÈáçÊñ∞Ê™¢Êü•
        await performHealthCheck();
        dispatch(addNotification({
          type: 'success',
          title: 'ÂÑ™ÂåñÊàêÂäü',
          message: 'Ë≥áÊñôÂ∫´Â∑≤ÊàêÂäüÂÑ™ÂåñÔºåÊü•Ë©¢ÊïàËÉΩÂ∑≤ÊèêÂçá'
        }));
      } else {
        dispatch(addNotification({
          type: 'warning',
          title: 'ÂÑ™ÂåñÁï∞Â∏∏',
          message: 'Ë≥áÊñôÂ∫´ÂÑ™ÂåñÂèØËÉΩÊú™ÂÆåÂÖ®ÊàêÂäü'
        }));
      }
    } catch (error) {
      console.error('Ë≥áÊñôÂ∫´ÂÑ™ÂåñÂ§±Êïó:', error);
    } finally {
      setIsOptimizing(false);
    }
  };

  const reindexDatabase = async () => {
    setIsReindexing(true);
    try {
      // üî• Âü∑Ë°å REINDEX Êìç‰ΩúÈáçÂª∫ÊâÄÊúâÁ¥¢Âºï
      const result = await api.database.reindex();
      
      dispatch(addNotification({
        type: 'success',
        title: 'Á¥¢ÂºïÈáçÂª∫ÊàêÂäü',
        message: result || 'ÊâÄÊúâË≥áÊñôÂ∫´Á¥¢ÂºïÂ∑≤ÈáçÂª∫ÂÆåÊàêÔºåÊü•Ë©¢ÊÄßËÉΩÂ∑≤ÊèêÂçá'
      }));
      
      // ÈáçÂª∫Á¥¢ÂºïÂæåÈáçÊñ∞Ê™¢Êü•Ë≥áÊñôÂ∫´ÂÅ•Â∫∑ÁãÄÊÖã
      await performHealthCheck();
      
    } catch (error) {
      console.error('ÈáçÂª∫Á¥¢ÂºïÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'Á¥¢ÂºïÈáçÂª∫Â§±Êïó',
        message: `ÈáçÂª∫Á¥¢ÂºïÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setIsReindexing(false);
    }
  };

  const incrementalVacuumDatabase = async () => {
    setIsIncrementalVacuuming(true);
    try {
      // üî• Âü∑Ë°å PRAGMA incremental_vacuum Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜ
      // Â∞çÊñºÂ§ßÂûãË≥áÊñôÂ∫´Êõ¥ÂèãÂñÑÔºå‰∏çÊúÉÈï∑ÊôÇÈñìÈéñÂÆöË≥áÊñôÂ∫´
      const result = await api.database.incrementalVacuum();
      
      dispatch(addNotification({
        type: 'success',
        title: 'Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜÊàêÂäü',
        message: result || 'Ë≥áÊñôÂ∫´Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜÂ∑≤ÂÆåÊàêÔºåÁ¢éÁâáÂåñÁ®ãÂ∫¶Â∑≤Èôç‰Ωé'
      }));
      
      // Ê∏ÖÁêÜÂæåÈáçÊñ∞Ê™¢Êü•Ë≥áÊñôÂ∫´ÂÅ•Â∫∑ÁãÄÊÖã
      await performHealthCheck();
      
    } catch (error) {
      console.error('Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜÂ§±Êïó',
        message: `Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setIsIncrementalVacuuming(false);
    }
  };

  const runMaintenanceDatabase = async () => {
    setIsRunningMaintenance(true);
    try {
      // üî• Âü∑Ë°åÂÆåÊï¥ÁöÑË≥áÊñôÂ∫´Á∂≠Ë≠∑Êìç‰Ωú
      // ÂåÖÂê´ VACUUM„ÄÅANALYZE Âíå PRAGMA optimize
      const result = await api.database.runMaintenance();
      
      dispatch(addNotification({
        type: 'success',
        title: 'Ë≥áÊñôÂ∫´Êï¥ÁêÜÊàêÂäü',
        message: result || 'Ë≥áÊñôÂ∫´Á∂≠Ë≠∑Êìç‰ΩúÂ∑≤ÂÆåÊàêÔºåÊÄßËÉΩÂ∑≤ÂÑ™Âåñ'
      }));
      
      // Êï¥ÁêÜÂæåÈáçÊñ∞Ê™¢Êü•Ë≥áÊñôÂ∫´ÂÅ•Â∫∑ÁãÄÊÖã‰ª•È°ØÁ§∫ÊúÄÊñ∞ÁöÑÁ¢éÁâáÂåñÁ®ãÂ∫¶
      await performHealthCheck();
      
    } catch (error) {
      console.error('Ë≥áÊñôÂ∫´Êï¥ÁêÜÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'Ë≥áÊñôÂ∫´Êï¥ÁêÜÂ§±Êïó',
        message: `Êï¥ÁêÜÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setIsRunningMaintenance(false);
    }
  };

  const exportDatabase = async () => {
    setIsExporting(true);
    try {
      // üî• ‰ΩøÁî® Tauri v2 dialog API ÈÅ∏ÊìáÂÇô‰ªΩ‰ΩçÁΩÆ
      const defaultFileName = `genesis-backup-${new Date().toISOString().split('T')[0]}.db`;
      
      const filePath = await save({
        defaultPath: defaultFileName,
        filters: [{
          name: 'Database',
          extensions: ['db']
        }]
      });

      if (filePath) {
        // Âü∑Ë°åÂÇô‰ªΩÊìç‰Ωú
        await api.database.backup(filePath);
        console.log('Ë≥áÊñôÂ∫´Â∑≤ÊàêÂäüÂÇô‰ªΩËá≥:', filePath);
        dispatch(addNotification({
          type: 'success',
          title: 'ÂÇô‰ªΩÊàêÂäü',
          message: `Ë≥áÊñôÂ∫´Â∑≤ÊàêÂäüÂÇô‰ªΩËá≥: ${filePath}`
        }));
      } else {
        // Áî®Êà∂ÂèñÊ∂à‰∫ÜÊñá‰ª∂ÈÅ∏Êìá
        console.log('Áî®Êà∂ÂèñÊ∂à‰∫ÜÂÇô‰ªΩÊìç‰Ωú');
      }
    } catch (error) {
      console.error('ÂåØÂá∫Ë≥áÊñôÂ∫´Â§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'ÂÇô‰ªΩÂ§±Êïó',
        message: `Ë≥áÊñôÂ∫´ÂÇô‰ªΩÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setIsExporting(false);
    }
  };

  const importDatabase = async () => {
    setIsImporting(true);
    try {
      // üî• ‰ΩøÁî® Tauri v2 dialog API ÈÅ∏ÊìáÈÇÑÂéüÊ™îÊ°à
      const filePath = await open({
        multiple: false,
        filters: [{
          name: 'Database',
          extensions: ['db']
        }]
      });

      if (filePath) {
        // È°ØÁ§∫Á¢∫Ë™çÂ∞çË©±Ê°Ü
        setConfirmImport({show: true, filePath: filePath as string});
      } else {
        // Áî®Êà∂ÂèñÊ∂à‰∫ÜÊñá‰ª∂ÈÅ∏Êìá
        console.log('Áî®Êà∂ÂèñÊ∂à‰∫ÜÈÇÑÂéüÊìç‰Ωú');
        setIsImporting(false);
      }
    } catch (error) {
      console.error('ÈÅ∏ÊìáÈÇÑÂéüÊ™îÊ°àÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'ÈÅ∏ÊìáÊ™îÊ°àÂ§±Êïó',
        message: `ÈÅ∏ÊìáÈÇÑÂéüÊ™îÊ°àÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
      setIsImporting(false);
    }
  };

  const generateReport = async () => {
    if (!checkResult) return;

    try {
      // generateReport ÊñπÊ≥ï‰∏çÂ≠òÂú®Ôºå‰ΩøÁî® getStats ‰ª£Êõø
      const report = await api.database.getStats();
      setErrorReport(JSON.stringify(report, null, 2));
      dispatch(addNotification({
        type: 'success',
        title: 'Â†±ÂëäÁîüÊàêÊàêÂäü',
        message: 'Ë≥áÊñôÂ∫´Áµ±Ë®àÂ†±ÂëäÂ∑≤ÁîüÊàê'
      }));
    } catch (error) {
      console.error('ÁîüÊàêÂ†±ÂëäÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'Â†±ÂëäÁîüÊàêÂ§±Êïó',
        message: `ÁîüÊàêÂ†±ÂëäÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    }
  };

  // Á¢∫Ë™çÂåØÂÖ•Êìç‰Ωú
  const handleConfirmImport = async () => {
    if (!confirmImport.filePath) return;
    
    try {
      // Âü∑Ë°åË≥áÊñôÂ∫´ÈÇÑÂéüÊìç‰Ωú
      await api.database.restore(confirmImport.filePath);
      
      dispatch(addNotification({
        type: 'success',
        title: 'ÈÇÑÂéüÊàêÂäü',
        message: 'Ë≥áÊñôÂ∫´Â∑≤ÊàêÂäüÂæûÂÇô‰ªΩÈÇÑÂéü'
      }));
      
      // ÈÇÑÂéüÊàêÂäüÂæåÈáçÊñ∞Ê™¢Êü•Ë≥áÊñôÂ∫´ÂÅ•Â∫∑ÁãÄÊÖã
      await performHealthCheck();
      
    } catch (error) {
      console.error('Ë≥áÊñôÂ∫´ÈÇÑÂéüÂ§±Êïó:', error);
      dispatch(addNotification({
        type: 'error',
        title: 'ÈÇÑÂéüÂ§±Êïó',
        message: `Ë≥áÊñôÂ∫´ÈÇÑÂéüÂ§±Êïó: ${error instanceof Error ? error.message : 'Êú™Áü•ÈåØË™§'}`
      }));
    } finally {
      setConfirmImport({show: false, filePath: null});
      setIsImporting(false);
    }
  };

  // ÂèñÊ∂àÂåØÂÖ•Êìç‰Ωú
  const handleCancelImport = () => {
    setConfirmImport({show: false, filePath: null});
    setIsImporting(false);
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical': return 'bg-red-500';
      case 'high': return 'bg-orange-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-blue-500';
      default: return 'bg-gray-500';
    }
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case 'critical': return <XCircle className="w-4 h-4" />;
      case 'high': return <AlertTriangle className="w-4 h-4" />;
      case 'medium': return <AlertTriangle className="w-4 h-4" />;
      case 'low': return <CheckCircle className="w-4 h-4" />;
      default: return <CheckCircle className="w-4 h-4" />;
    }
  };

  const formatBytes = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <Database className="w-8 h-8 text-blue-400" />
          <div>
            <h1 className="text-2xl font-bold text-white">Ë≥áÊñôÂ∫´Á∂≠Ë≠∑</h1>
            <p className="text-gray-400">Ê™¢Êü•ÂíåÁ∂≠Ë≠∑Ë≥áÊñôÂ∫´ÂÅ•Â∫∑ÁãÄÊÖã</p>
          </div>
        </div>
        
        <div className="flex space-x-2">
          <Button
            onClick={performHealthCheck}
            disabled={isChecking}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${isChecking ? 'animate-spin' : ''}`} />
            {isChecking ? 'Ê™¢Êü•‰∏≠...' : 'ÈáçÊñ∞Ê™¢Êü•'}
          </Button>
        </div>
      </div>

      {/* ÂÅ•Â∫∑ÁãÄÊÖãÊ¶ÇË¶Ω */}
      {checkResult && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              {checkResult.isHealthy ? (
                <CheckCircle className="w-5 h-5 text-green-400" />
              ) : (
                <AlertTriangle className="w-5 h-5 text-yellow-400" />
              )}
              <span className="text-white">
                Ë≥áÊñôÂ∫´ÁãÄÊÖã: {checkResult.isHealthy ? 'ÂÅ•Â∫∑' : 'ÈúÄË¶ÅÊ≥®ÊÑè'}
              </span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            {checkResult.statistics ? (
              <>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <div className="text-2xl font-bold text-blue-400">
                      {checkResult.statistics.totalProjects || 0}
                    </div>
                    <div className="text-sm text-gray-400">Â∞àÊ°à</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-green-400">
                      {checkResult.statistics.totalChapters || 0}
                    </div>
                    <div className="text-sm text-gray-400">Á´†ÁØÄ</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-purple-400">
                      {checkResult.statistics.totalCharacters || 0}
                    </div>
                    <div className="text-sm text-gray-400">ËßíËâ≤</div>
                  </div>
                  <div className="text-center">
                    <div className="text-2xl font-bold text-orange-400">
                      {formatBytes(checkResult.statistics.databaseSize || 0)}
                    </div>
                    <div className="text-sm text-gray-400">Ë≥áÊñôÂ∫´Â§ßÂ∞è</div>
                  </div>
                </div>
                
                <div className="mt-4">
                  <div className="flex justify-between text-sm text-gray-400 mb-1">
                    <span>Á¢éÁâáÂåñÁ®ãÂ∫¶</span>
                    <span>{(checkResult.statistics.fragmentationLevel || 0).toFixed(1)}%</span>
                  </div>
                  <Progress 
                    value={checkResult.statistics.fragmentationLevel || 0} 
                    className="h-2"
                  />
                </div>
                
                <div className="mt-4 flex justify-between items-center">
                  <div className="text-sm text-gray-400">
                    ‰∏äÊ¨°Êï¥ÁêÜ: {checkResult.statistics.lastVacuum ? 
                      new Date(checkResult.statistics.lastVacuum).toLocaleString('zh-TW') : 
                      'Êú™Áü•'
                    }
                  </div>
                  <div className="text-sm text-gray-400">
                    Êó•Ë™åÊ®°Âºè: <span className={`font-medium ${
                      checkResult.statistics.isWalMode ? 'text-green-400' : 'text-orange-400'
                    }`}>
                      {checkResult.statistics.journalMode || 'unknown'} 
                      {checkResult.statistics.isWalMode && ' ‚ö°'}
                    </span>
                  </div>
                </div>
              </>
            ) : (
              <div className="text-center py-8 text-gray-400">
                <Database className="w-12 h-12 mx-auto mb-4 opacity-50" />
                <p>ÁÑ°Ê≥ïËºâÂÖ•Ë≥áÊñôÂ∫´Áµ±Ë®àË≥áË®ä</p>
                <p className="text-sm mt-2">Ë´ãÊ™¢Êü•Ë≥áÊñôÂ∫´ÈÄ£Êé•ÁãÄÊÖã</p>
              </div>
            )}
          </CardContent>
        </Card>
      )}

      {/* WAL Ê®°ÂºèË©≥Á¥∞Ë≥áË®ä */}
      {walModeStatus && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              {walModeStatus.is_wal_mode ? (
                <ToggleRight className="w-5 h-5 text-emerald-400" />
              ) : (
                <ToggleLeft className="w-5 h-5 text-slate-400" />
              )}
              <span className="text-white">
                Write-Ahead Logging (WAL) Ê®°Âºè: {walModeStatus.is_wal_mode ? 'Â∑≤ÂïüÁî®' : 'Â∑≤ÂÅúÁî®'}
              </span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h4 className="text-white mb-3 font-semibold">Áï∂ÂâçË®≠ÂÆö</h4>
                <div className="space-y-2 text-sm">
                  <div className="flex justify-between">
                    <span className="text-gray-400">Êó•Ë™åÊ®°Âºè:</span>
                    <span className="text-white font-mono">{walModeStatus.journal_mode}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">ÂêåÊ≠•Á¥öÂà•:</span>
                    <span className="text-white font-mono">{walModeStatus.synchronous}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-gray-400">WAL Ëá™ÂãïÊ™¢Êü•Èªû:</span>
                    <span className="text-white font-mono">{walModeStatus.wal_autocheckpoint}</span>
                  </div>
                  {walModeStatus.is_wal_mode && walModeStatus.wal_info && (
                    <div className="flex justify-between">
                      <span className="text-gray-400">WAL Ê™îÊ°à:</span>
                      <span className="text-white">
                        {walModeStatus.wal_info.bytes ? 
                          `${(walModeStatus.wal_info.bytes / 1024).toFixed(1)} KB` : 
                          '‰∏çÂ≠òÂú®'
                        }
                      </span>
                    </div>
                  )}
                </div>
              </div>
              
              <div>
                <h4 className="text-white mb-3 font-semibold">Ê®°ÂºèÂÑ™Âã¢</h4>
                <div className="space-y-2">
                  {walModeStatus.is_wal_mode ? (
                    walModeStatus.benefits?.map((benefit: string, index: number) => (
                      <div key={index} className="flex items-center space-x-2">
                        <CheckCircle className="w-4 h-4 text-emerald-400 flex-shrink-0" />
                        <span className="text-sm text-gray-300">{benefit}</span>
                      </div>
                    ))
                  ) : (
                    walModeStatus.benefits?.map((benefit: string, index: number) => (
                      <div key={index} className="flex items-center space-x-2">
                        <CheckCircle className="w-4 h-4 text-blue-400 flex-shrink-0" />
                        <span className="text-sm text-gray-300">{benefit}</span>
                      </div>
                    ))
                  )}
                </div>
                
                <div className="mt-4">
                  <div className="text-xs text-gray-400 bg-gray-700 p-3 rounded">
                    üí° {walModeStatus.recommendations}
                  </div>
                  {walModeStatus.is_wal_mode && (
                    <div className="text-xs text-amber-400 bg-amber-900/20 p-3 rounded mt-2 border border-amber-500/30">
                      ‚ö†Ô∏è <strong>ÈáçË¶ÅÊèêÈÜíÔºö</strong>WAL Ê®°ÂºèÂïüÁî®ÂæåÂæàÈõ£Âú®ÈÅãË°åÊôÇÈóúÈñâ„ÄÇÂ¶ÇÈúÄÂàáÊèõÂõû DELETE Ê®°ÂºèÔºåÂª∫Ë≠∞ÈáçÊñ∞ÂïüÂãïÊáâÁî®Á®ãÂºè‰ª•ÈáãÊîæÊâÄÊúâË≥áÊñôÂ∫´ÈÄ£Êé•„ÄÇ
                    </div>
                  )}
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* ÂïèÈ°åÂàóË°® */}
      {checkResult && checkResult.issues.length > 0 && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="flex items-center justify-between">
              <span className="text-white">ÁôºÁèæÁöÑÂïèÈ°å ({checkResult.issues.length})</span>
              <div className="flex space-x-2">
                <Button
                  onClick={performAutoRepair}
                  disabled={isRepairing || !checkResult.issues.some(issue => issue.autoFixable)}
                  className="bg-green-600 hover:bg-green-700"
                  size="sm"
                >
                  <Settings className={`w-4 h-4 mr-2 ${isRepairing ? 'animate-spin' : ''}`} />
                  {isRepairing ? '‰øÆÂæ©‰∏≠...' : 'Ëá™Âãï‰øÆÂæ©'}
                </Button>
                <Button
                  onClick={generateReport}
                  className="bg-blue-600 hover:bg-blue-700"
                  size="sm"
                >
                  <FileText className="w-4 h-4 mr-2" />
                  ÁîüÊàêÂ†±Âëä
                </Button>
              </div>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-3">
              {checkResult.issues.map((issue, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 bg-gray-700 rounded-lg">
                  <div className="flex-shrink-0">
                    {getSeverityIcon(issue.severity)}
                  </div>
                  <div className="flex-1">
                    <div className="flex items-center space-x-2 mb-1">
                      <Badge className={`${getSeverityColor(issue.severity)} text-white`}>
                        {issue.severity}
                      </Badge>
                      <Badge variant="outline" className="text-gray-300">
                        {issue.table}
                      </Badge>
                      {issue.autoFixable && (
                        <Badge className="bg-green-600 text-white">
                          ÂèØËá™Âãï‰øÆÂæ©
                        </Badge>
                      )}
                    </div>
                    <div className="text-white mb-1">{issue.description}</div>
                    <div className="text-sm text-gray-400">{issue.suggestion}</div>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>
      )}

      {/* ‰øÆÂæ©ÁµêÊûú */}
      {repairResult && (
        <Alert className={repairResult.success ? 'border-green-500' : 'border-red-500'}>
          <AlertDescription className="text-white">
            {repairResult.message}
            {repairResult.issuesFixed && repairResult.issuesFixed > 0 && (
              <div className="mt-2">
                Â∑≤‰øÆÂæ© {repairResult.issuesFixed} ÂÄãÂïèÈ°å
              </div>
            )}
          </AlertDescription>
        </Alert>
      )}

      {/* Êìç‰ΩúÊåâÈàï */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-7 gap-3">
        <Button
          onClick={optimizeDatabase}
          disabled={isOptimizing}
          className="bg-purple-600 hover:bg-purple-700 h-16"
        >
          <div className="text-center">
            <BarChart3 className={`w-6 h-6 mx-auto mb-1 ${isOptimizing ? 'animate-pulse' : ''}`} />
            <div>{isOptimizing ? 'ÂÑ™Âåñ‰∏≠...' : 'ÂÑ™ÂåñË≥áÊñôÂ∫´'}</div>
          </div>
        </Button>
        
        <Button
          onClick={reindexDatabase}
          disabled={isReindexing}
          className="bg-indigo-600 hover:bg-indigo-700 h-16"
        >
          <div className="text-center">
            <Settings className={`w-6 h-6 mx-auto mb-1 ${isReindexing ? 'animate-spin' : ''}`} />
            <div>{isReindexing ? 'ÈáçÂª∫‰∏≠...' : 'ÈáçÂª∫Á¥¢Âºï'}</div>
          </div>
        </Button>
        
        <Button
          onClick={incrementalVacuumDatabase}
          disabled={isIncrementalVacuuming}
          className="bg-teal-600 hover:bg-teal-700 h-16"
        >
          <div className="text-center">
            <Zap className={`w-6 h-6 mx-auto mb-1 ${isIncrementalVacuuming ? 'animate-pulse' : ''}`} />
            <div>{isIncrementalVacuuming ? 'Ê∏ÖÁêÜ‰∏≠...' : 'Êº∏ÈÄ≤ÂºèÊ∏ÖÁêÜ'}</div>
          </div>
        </Button>
        
        <Button
          onClick={toggleWalMode}
          disabled={isTogglingWalMode || !walModeStatus || hasActiveOperation}
          className={`h-16 ${
            hasActiveOperation ? 'bg-gray-500 cursor-not-allowed' :
            walModeStatus?.is_wal_mode 
              ? 'bg-emerald-600 hover:bg-emerald-700' 
              : 'bg-slate-600 hover:bg-slate-700'
          }`}
        >
          <div className="text-center">
            {walModeStatus?.is_wal_mode ? (
              <ToggleRight className={`w-6 h-6 mx-auto mb-1 ${isTogglingWalMode ? 'animate-pulse' : ''}`} />
            ) : (
              <ToggleLeft className={`w-6 h-6 mx-auto mb-1 ${isTogglingWalMode ? 'animate-pulse' : ''}`} />
            )}
            <div className="text-xs">
              {isTogglingWalMode ? 'ÂàáÊèõ‰∏≠...' : 
               hasActiveOperation ? 'Á≠âÂæÖÊìç‰ΩúÂÆåÊàê' :
                `WAL ${walModeStatus?.is_wal_mode ? 'Â∑≤ÂïüÁî®' : 'Â∑≤ÂÅúÁî®'}`}
            </div>
          </div>
        </Button>
        
        <Button
          onClick={exportDatabase}
          disabled={isExporting}
          className="bg-blue-600 hover:bg-blue-700 h-16"
        >
          <div className="text-center">
            <Download className={`w-6 h-6 mx-auto mb-1 ${isExporting ? 'animate-bounce' : ''}`} />
            <div>{isExporting ? 'ÂåØÂá∫‰∏≠...' : 'ÂåØÂá∫ÂÇô‰ªΩ'}</div>
          </div>
        </Button>
        
        <Button
          onClick={importDatabase}
          disabled={isImporting}
          className="bg-orange-600 hover:bg-orange-700 h-16"
        >
          <div className="text-center">
            <Upload className={`w-6 h-6 mx-auto mb-1 ${isImporting ? 'animate-bounce' : ''}`} />
            <div>{isImporting ? 'ÂåØÂÖ•‰∏≠...' : 'ÂåØÂÖ•ÂÇô‰ªΩ'}</div>
          </div>
        </Button>
        
        <Button
          onClick={runMaintenanceDatabase}
          disabled={isRunningMaintenance}
          className="bg-green-600 hover:bg-green-700 h-16"
        >
          <div className="text-center">
            <RefreshCw className={`w-6 h-6 mx-auto mb-1 ${isRunningMaintenance ? 'animate-spin' : ''}`} />
            <div>{isRunningMaintenance ? 'Êï¥ÁêÜ‰∏≠...' : 'Êï¥ÁêÜË≥áÊñôÂ∫´'}</div>
          </div>
        </Button>
      </div>

      {/* ÈåØË™§Â†±Âëä */}
      {errorReport && (
        <Card className="bg-gray-800 border-gray-700">
          <CardHeader>
            <CardTitle className="text-white">Ë©≥Á¥∞Â†±Âëä</CardTitle>
          </CardHeader>
          <CardContent>
            <pre className="text-sm text-gray-300 whitespace-pre-wrap bg-gray-900 p-4 rounded-lg overflow-auto max-h-96">
              {errorReport}
            </pre>
          </CardContent>
        </Card>
      )}

      {/* ÂåØÂÖ•Á¢∫Ë™çÂ∞çË©±Ê°Ü */}
      <ConfirmDialog
        isOpen={confirmImport.show}
        title="Á¢∫Ë™çÂåØÂÖ•ÂÇô‰ªΩ"
        message="ÂåØÂÖ•ÂÇô‰ªΩÂ∞áÊúÉË¶ÜËìãÁï∂ÂâçÁöÑË≥áÊñôÂ∫´„ÄÇÊ≠§Êìç‰ΩúÁÑ°Ê≥ïÂæ©ÂéüÔºåË´ãÁ¢∫‰øùÂ∑≤Á∂ìÂÇô‰ªΩÁï∂ÂâçË≥áÊñô„ÄÇÁ¢∫ÂÆöË¶ÅÁπºÁ∫åÂóéÔºü"
        confirmText="ÂåØÂÖ•"
        cancelText="ÂèñÊ∂à"
        confirmButtonClass="bg-orange-600 hover:bg-orange-700"
        onConfirm={handleConfirmImport}
        onCancel={handleCancelImport}
      />

      {/* üî• Êñ∞Â¢ûÔºöWAL Ê®°ÂºèÂïüÁî®Ë≠¶ÂëäÂ∞çË©±Ê°Ü */}
      {showWalWarning && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 border border-gray-600 rounded-lg p-6 max-w-md w-full mx-4">
            <div className="flex items-center space-x-3 mb-4">
              <div className="w-10 h-10 bg-amber-100 rounded-full flex items-center justify-center">
                <AlertTriangle className="w-6 h-6 text-amber-600" />
              </div>
              <div>
                <h3 className="text-lg font-semibold text-white">ÂïüÁî® WAL Ê®°Âºè</h3>
                <p className="text-sm text-gray-400">Ë´ã‰ªîÁ¥∞Èñ±ËÆÄ‰ª•‰∏ãË≥áË®ä</p>
              </div>
            </div>

            <div className="space-y-4 mb-6">
              {/* ÂÑ™ÈªûË™™Êòé */}
              <div>
                <h4 className="flex items-center text-green-400 font-medium mb-2">
                  <CheckCircle className="w-4 h-4 mr-2" />
                  ÊÄßËÉΩÂÑ™Âã¢
                </h4>
                <ul className="text-sm text-gray-300 space-y-1 ml-6">
                  <li>‚Ä¢ ÊîØÊè¥Â§öÂÄãÁî®Êà∂ÂêåÊôÇËÆÄÂèñ</li>
                  <li>‚Ä¢ ÂØ´ÂÖ•Êìç‰Ωú‰∏çÊúÉÈòªÂ°ûËÆÄÂèñ</li>
                  <li>‚Ä¢ Êõ¥Â•ΩÁöÑÂÆπÈåØÊÄßÂíåË≥áÊñôÂÆâÂÖ®</li>
                  <li>‚Ä¢ Êï¥È´îÊÄßËÉΩÈ°ØËëóÊèêÂçá</li>
                </ul>
              </div>

              {/* Ê≥®ÊÑè‰∫ãÈ†Ö */}
              <div>
                <h4 className="flex items-center text-amber-400 font-medium mb-2">
                  <AlertTriangle className="w-4 h-4 mr-2" />
                  ÈáçË¶ÅÊ≥®ÊÑè‰∫ãÈ†Ö
                </h4>
                <ul className="text-sm text-gray-300 space-y-1 ml-6">
                  <li>‚Ä¢ ÂïüÁî®ÂæåÂæàÈõ£Âú®ÈÅãË°åÊôÇÈóúÈñâ</li>
                  <li>‚Ä¢ ÊúÉÁî¢ÁîüÈ°çÂ§ñÁöÑ .wal Âíå .shm Êñá‰ª∂</li>
                  <li>‚Ä¢ ÈóúÈñâÊ®°ÂºèÈúÄË¶ÅÈáçÊñ∞ÂïüÂãïÊáâÁî®Á®ãÂºè</li>
                </ul>
              </div>

              {/* Âª∫Ë≠∞ */}
              <div className="bg-blue-900/30 border border-blue-500/30 rounded p-3">
                <h4 className="flex items-center text-blue-400 font-medium mb-1">
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Â∞àÊ•≠Âª∫Ë≠∞
                </h4>
                <p className="text-sm text-gray-300">
                  Âª∫Ë≠∞ÂïüÁî®‰∏¶‰øùÊåÅ WAL Ê®°ÂºèÔºåÂÆÉÈÅ©ÂêàÂ§ßÂ§öÊï∏‰ΩøÁî®ÊÉÖÂ¢ÉÔºåËÉΩÈ°ØËëóÊèêÂçáÊáâÁî®Á®ãÂºèÁöÑÈüøÊáâÈÄüÂ∫¶ÂíåÁ©©ÂÆöÊÄß„ÄÇ
                </p>
              </div>
            </div>

            {/* ‰∏çÂÜçÈ°ØÁ§∫ÈÅ∏È†Ö */}
            <div className="mb-6">
              <label className="flex items-center space-x-2 text-sm text-gray-400 cursor-pointer">
                <input
                  type="checkbox"
                  id="dontShowWalWarning"
                  className="rounded border-gray-600 bg-gray-700 text-blue-600 focus:ring-blue-500"
                />
                <span>‰∏çË¶ÅÂÜçÊ¨°È°ØÁ§∫Ê≠§Ë≠¶Âëä</span>
              </label>
            </div>

            {/* ÊåâÈàï */}
            <div className="flex space-x-3">
              <Button
                onClick={() => {
                  const checkbox = document.getElementById('dontShowWalWarning') as HTMLInputElement;
                  handleWalWarningConfirm(checkbox?.checked || false);
                }}
                className="flex-1 bg-green-600 hover:bg-green-700"
              >
                ÁπºÁ∫åÂïüÁî® WAL Ê®°Âºè
              </Button>
              <Button
                onClick={handleWalWarningCancel}
                className="flex-1 border border-gray-600 hover:bg-gray-700 bg-transparent"
              >
                ÂèñÊ∂à
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DatabaseMaintenance;